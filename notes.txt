24-Apr-2022

- prim: all flats (cost 0), all logos (cost 10)
353c ST(3111 ST(0031 ST(0003 0001) 0011 ST(0001 0001)) 242c ST(2424 0008))
----RrRr:RgRg----:Ry--Ry--:RwRw----

- The solution uses 6 parts, a 4-logo and 5th layer.
- The solution I want is 4 parts: 2 2-logos and 2 2 part layers and no 5th layer.

- prim: all flats (cost 0), 2-logo (cost 10), 3-logo (cost 20), 4-logo (cost 30)
353c ST(0035 ST(0003 0005) 003c ST(0018 0024))
----RrRr:RgRg----:Ry--Ry--:RwRw----

- That is better.  Only 4 parts and matches what I wanted.
- But, there are still 6 part builds...
3c43 ST(033c ST(0031 ST(0003 0001) 002c ST(0024 0008)) 0043 ST(0042 0001))
RrRr----:----Rg--:----RyRy:RwRw----

- That's 3 layer, 2 2-logos, has fifth layer
- I want 1 layer, 3 2-logos, no fifth layer

- maybe because logos are expensive, and 5th layers cost only 1 stack?
- Maybe add a cost to 5th layer shapes?

- Try with flats (cost 0) and logos (cost 0)
- That's better (and simpler).

- Or, set cost of 2-logos to 2 (stack+cut), 3-logos to 3 (stack+stack+cut), ...
- I think that is even better.

- This avoids logos, but only as much as they cost to build.
- Some builds are longer (more parts), but all are still 5 parts or less.
- Like this one...

old...
0163 ST(0121 0042)
new...
0163 ST(0016 ST(0012 0004) 0003)
RrRr----:--RgRg--:Ry------

- First 5 part build:
5222 ST(0054 ST(0005 0004) 1222 ST(0012 0022 ST(0002 0002)))
- Has 3 layer, 1 2-logo, 5th layer

file: data/builds_flat0_logo234.txt

-----

Unknown shapes when using LOGO_A and LOGO_C
[03d2,07b4,121a,121e,125a,12b4,1385,1387,13a4,13b4,13d2,1678,16b4,1785,1787,17a4,17b4,1b61,1e78,3185,3187,31d2,3425,342d,3478,34a5,3585,3587,35a1,35a4,35b4,361a,361e,3658,3678,36b4,3785,3787,37a4,37b4,521a,521e,52b4,5385,5387,53a4,53b4,7185,7187,71d2,721a,721e,72b4,7385,7387,73a4,73b4,794a,794b,7952,79d2]

5th layer
found by TMAM
[3422,3423,3424,3425,3426,3427,342a,342b,342c,342d,342e,342f,3431,3432,3433,3435,3436,3437,3439,343a,343b,343c,343d,343e,343f,3442,3443,3444,3445,3446,3447,3448,3449,344a,344b,344c,344d,344e,344f,3451,3453,3454,3455,3456,3457,3459,345a,345b,345c,345d,345e,345f,3462,3463,3464,3465,3466,3467,3468,3469,346a,346b,346c,346d,346e,346f,3471,3472,3473,3474,3475,3476,3477,3478,3479,347a,347b,347c,347d,347e,347f,34a2,34a3,34a5,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,34c3,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e2,34e3,34e4,34e5,34e6,34e7,34e8,34e9,34ea,34eb,34ec,34ed,34ee,34ef,34f1,34f2,34f3,34f4,34f5,34f6,34f7,34f8,34f9,34fa,34fb,34fc,34fd,34fe,34ff,3521,3522,3523,3524,3525,3526,3527,3529,352a,352b,352c,352d,352e,352f,3534,3538,3561,3568,3581,3583,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35a4,35b4,35c1,35c2,35e1,3612,3616,361a,361e,3652,3c11,3c13,3c15,3c17,3c18,3c19,3c1a,3c1b,3c1c,3c1d,3c1e,3c1f,3c34,3c52,3c58,3c68,3d24,3d2c,3d34,5211,5212,5213,5215,5216,5217,5219,521a,521b,521d,521e,521f,5221,5222,5223,5225,5227,5229,522a,522b,522d,522f,5231,5232,5233,5234,5235,5236,5237,5239,523a,523b,523c,523d,523e,523f,5251,5253,5255,5257,5259,525a,525b,525d,525f,5271,5272,5273,5275,5277,5279,527a,527b,527d,527f,5291,5293,5295,5296,5297,5298,5299,529a,529b,529c,529d,529e,529f,52a2,52a3,52a5,52a7,52a8,52a9,52aa,52ab,52ad,52af,52b1,52b2,52b3,52b4,52b5,52b6,52b7,52b8,52b9,52ba,52bb,52bc,52bd,52be,52bf,52d1,52d3,52d5,52d7,52d8,52d9,52da,52db,52dd,52df,52f1,52f2,52f3,52f5,52f7,52f8,52f9,52fa,52fb,52fd,52ff,5342,5343,5344,5345,5346,5347,534a,534b,534c,534d,534e,534f,5352,5358,5381,5383,5385,5387,5388,5389,538a,538b,538c,538d,538e,538f,53a1,53a4,53c1,53c2,5a11,5a12,5a13,5a15,5a16,5a17,5a1a,5a1b,5a1e,5a1f,5a34,5a38,5a52,5a78,5b42,5b43,5b44,5b45,5b46,5b47,5b4a,5b4b,5b4e,5b4f,5b52,5b68,7811,7813,7815,7817,7818,7819,781a,781b,781c,781d,781e,781f,7831,7832,7833,7835,7836,7837,7839,783a,783b,783c,783d,783e,783f,7851,7853,7855,7857,7859,785a,785b,785d,785f,7871,7872,7873,7875,7877,7879,787a,787b,787d,787f,7881,7883,7885,7887,7888,7889,788a,788b,788d,788f,7891,7893,7894,7895,7896,7897,7898,7899,789a,789b,789c,789d,789e,789f,78a2,78a3,78a5,78a7,78a8,78a9,78aa,78ab,78ad,78af,78b1,78b2,78b3,78b4,78b5,78b6,78b7,78b8,78b9,78ba,78bb,78bc,78bd,78be,78bf,78d1,78d3,78d5,78d7,78d8,78d9,78da,78db,78dd,78df,78f1,78f2,78f3,78f5,78f7,78f8,78f9,78fa,78fb,78fd,78ff,7921,7922,7923,7925,7926,7927,7929,792a,792b,792d,792e,792f,7944,7945,7946,7947,7948,7949,794a,794b,794c,794d,794e,794f,7952,7958,7961,7968,79a1,79a4,7a11,7a12,7a13,7a15,7a16,7a17,7a18,7a19,7a1a,7a1b,7a1c,7a1d,7a1e,7a1f,7a34,7a38,7a52,7a58,7a78,7a92,7a94,7ad2,7b48,7b49,7b68]
found by constructor
[3422,3423,3424,3425,3426,3427,342a,342b,342c,342d,342e,342f,3431,3432,3433,3435,3436,3437,3439,343a,343b,343c,343d,343e,343f,3442,3443,3444,3445,3446,3447,3448,3449,344a,344b,344c,344d,344e,344f,3451,3453,3454,3455,3456,3457,3459,345a,345b,345c,345d,345e,345f,3462,3463,3464,3465,3466,3467,3468,3469,346a,346b,346c,346d,346e,346f,3471,3472,3473,3474,3475,3476,3477,3478,3479,347a,347b,347c,347d,347e,347f,34a2,34a3,34a5,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,34c3,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e2,34e3,34e4,34e5,34e6,34e7,34e8,34e9,34ea,34eb,34ec,34ed,34ee,34ef,34f1,34f2,34f3,34f4,34f5,34f6,34f7,34f8,34f9,34fa,34fb,34fc,34fd,34fe,34ff,3521,3522,3523,3524,3525,3526,3527,3529,352a,352b,352c,352d,352e,352f,3534,3538,3561,3568,3581,3583,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35a4,35b4,35c1,35c2,35e1,                         3c11,3c13,3c15,3c17,3c18,3c19,3c1a,3c1b,3c1c,3c1d,3c1e,3c1f,3c34,3c52,3c58,3c68,3d24,3d2c,3d34,5211,5212,5213,5215,5216,5217,5219,521a,521b,521d,521e,521f,5221,5222,5223,5225,5227,5229,522a,522b,522d,522f,5231,5232,5233,5234,5235,5236,5237,5239,523a,523b,523c,523d,523e,523f,5251,5253,5255,5257,5259,525a,525b,525d,525f,5271,5272,5273,5275,5277,5279,527a,527b,527d,527f,5291,5293,5295,5296,5297,5298,5299,529a,529b,529c,529d,529e,529f,52a2,52a3,52a5,52a7,52a8,52a9,52aa,52ab,52ad,52af,52b1,52b2,52b3,52b4,52b5,52b6,52b7,52b8,52b9,52ba,52bb,52bc,52bd,52be,52bf,52d1,52d3,52d5,52d7,52d8,52d9,52da,52db,52dd,52df,52f1,52f2,52f3,52f5,52f7,52f8,52f9,52fa,52fb,52fd,52ff,5342,5343,5344,5345,5346,5347,534a,534b,534c,534d,534e,534f,5352,5358,5381,5383,5385,5387,5388,5389,538a,538b,538c,538d,538e,538f,53a1,53a4,53c1,53c2,5a11,5a12,5a13,5a15,5a16,5a17,5a1a,5a1b,5a1e,5a1f,5a34,5a38,5a52,5a78,5b42,5b43,5b44,5b45,5b46,5b47,5b4a,5b4b,5b4e,5b4f,5b52,5b68,7811,7813,7815,7817,7818,7819,781a,781b,781c,781d,781e,781f,7831,7832,7833,7835,7836,7837,7839,783a,783b,783c,783d,783e,783f,7851,7853,7855,7857,7859,785a,785b,785d,785f,7871,7872,7873,7875,7877,7879,787a,787b,787d,787f,7881,7883,7885,7887,7888,7889,788a,788b,788d,788f,7891,7893,7894,7895,7896,7897,7898,7899,789a,789b,789c,789d,789e,789f,78a2,78a3,78a5,78a7,78a8,78a9,78aa,78ab,78ad,78af,78b1,78b2,78b3,78b4,78b5,78b6,78b7,78b8,78b9,78ba,78bb,78bc,78bd,78be,78bf,78d1,78d3,78d5,78d7,78d8,78d9,78da,78db,78dd,78df,78f1,78f2,78f3,78f5,78f7,78f8,78f9,78fa,78fb,78fd,78ff,7921,7922,7923,7925,7926,7927,7929,792a,792b,792d,792e,792f,7944,7945,7946,7947,7948,7949,794a,794b,794c,794d,794e,794f,7952,7958,7961,7968,79a1,79a4,7a11,7a12,7a13,7a15,7a16,7a17,7a18,7a19,7a1a,7a1b,7a1c,7a1d,7a1e,7a1f,7a34,7a38,7a52,7a58,7a78,7a92,7a94,7ad2,7b48,7b49,7b68]

5th layers made by default TMAM
3612 --    3616 --    361a --    361e --    3652 --
- - - -    - - - -    - - - -    - - - -    - - - -
X X - -    X X - -    X X - -    X X - -    X X - -
- X X -    - X X -    - X X -    - X X -    - X X -
X - - -    X - - -    X - - -    X - - -    X - X -
- X - -    - X X -    - X - X    - X X X    - X - -

Shape counts
         Shapes  Keys
1-layer  28112   3885
2-logo   44588   6164
3-logo   47918   6620
4-logo   48432   6691

5th layer - Keys

logos cost zero
1 piece 314
2 piece 255
  total 569

logos cost 123
1 piece  73
2 piece 485
  total 558 - ???

No 5th layer
          Shapes  Keys
 1-layer   28112  3885
 2-logo    42324  5855
 3-logo    44230  6118
 4-logo    44328  6132

Missing: 6691-6132 = 559

Can't make if layer and size are reversed in search...
[16d2]

Can't make if using only X mask...
Unknowns: 7
keys [0361,1361,1634,17a4,1b61,36c2,37a4]

Knowns: 48384
Unknowns: 48
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,17a4,19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,2b58,2c68,36c2,37a4,39c1,3b58,4361,4634,49c1,4c94,     4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,     9361,9b52,9c68,9da4,c634,c938]
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,     19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,     2c68,36c2,     39c1,     4361,4634,49c1,4c94,4da1,4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,8e52,9361,9b52,9c68,9da4,c634,c938,cda1,ce52]

17a4 17a4,1da4,2b58,2e58,47a1,4da1,8b52,8e52
37a4 37a4,3b58,67a1,6e58,9b52,9da4,cda1,ce52

Can't make if using only Y mask (seat joints)...
Unknowns: 9
keys [1642,1643,16c3,16d2,1792,17c2,3521,3529,3561]
Unknowns: 82
keys [1212,1216,121a,121e,125a,1296,1642,1643,165a,1696,16c3,16d2,1792,17c2,1a5a,1e5a,3424,3425,342c,342d,343c,34a5,3524,352c,3534,35a4,35b4,3c18,3c1a,3c1c,3c1e,3c34,3c3c,3c58,3d24,3d2c,3d34,5212,5216,521a,521e,525a,5296,5342,5343,534a,534b,5352,53c2,5a12,5a16,5a1a,5a1e,5a38,5a52,5a5a,5a78,5b42,5b43,5b4a,5b4b,5b68,7818,781a,781c,781e,783c,785a,7948,7949,794a,794b,7958,7968,7a18,7a1c,7a38,7a58,7a78,7b48,7b49,7b68]

- Not sure why these are different
- Maybe size of Y mask?

02-May-2022

MyTMAM

          type, position
round-1 - logo-X, first
round-2 - logo-Y, first
round-3 - logo-X, last
round-4 - logo-Y, last

deconstruct(targetShape) {
  configs = [round1, ...];
  found = false;
  foreach (config of configs) {
    shape = targetShape;
    partlist = [];
    while (hasParts(shape)) {
      parts = findPossibleParts(shape, config);
      part = choosePart(parts, config);
      partList = add(partList, part);
      found = tryBuild(parts);
      if (found) break;
      shape = deletePart(shape, part);
    }
    if (found) break;
  }
  if (!found) partList = []
  return partList
}

findLogo(shape, config) {
  codes = getLogoCodes(config.type);
  foreach (pos of positions) { // rotations
    foreach (size of [4, 3, 2]) {
      foreach ({logo, mask} of codes[pos][size]) {
        if ((shape & mask) == logo) ...
      }
    }
  }
  return found[config.position];
}

-----

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy----
37a4
- - - -
X X - -
X X X -
- X - X
- - X -

ROUND 1
>LOGO [0484,0084,0024]
LOGO  f37a4 [0484]
LAYER f332 [0002]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 2
>LOGO [0484,0084,0424,0024]
LOGO  f37a4 [0484]
LAYER f332 [0002]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 3
>LOGO [0024,0484,0084]
LOGO  f37a4 [0024]
>LOGO [0048,0018]
LOGO  f378 [0048]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 4
>LOGO [0424,0024,0484,0084]
LOGO  f37a4 [0424]
>LOGO [0018]
LOGO  f338 [0018]
LAYER 0f32 [0002]
LAYER 00f3 [0003]
FOUND 37a4 [0424,0018,0002,0003] 4 0123+++

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy----
37a4
- - - -
X X - -
X X X -
- X - X
- - X -

ROUND 1
>LOGO [0024,0484,0084]
LOGO  f37a4 [0024]
>LOGO [0048,0018]
LOGO  f378 [0048]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 2
>LOGO [0024,0424,0484,0084]
LOGO  f37a4 [0024]
>LOGO [0048,0018]
LOGO  f378 [0048]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 3
>LOGO [0084,0484,0024]
LOGO  f37a4 [0084]
LAYER f372 [0002]
LAYER 0f37 [0007]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 4
>LOGO [0084,0484,0424,0024]
LOGO  f37a4 [0084]
LAYER f372 [0002]
LAYER 0f37 [0007]
LAYER 00f3 [0003]
LAYER 000f [000f]
NOT FOUND 37a4

-----

Using "origial" TMAM
- hat not implmented
- special case not implemented

Knowns: 2519
Unknowns: 287
[0178,0361,0378,03d2,07b4,1178,1361,1378,13d2,1622,1623,1625,1626,1627,1629,162a,162b,162c,162d,162e,162f,1631,1632,1633,1634,1635,1636,1637,1639,163a,163b,163c,163d,163e,163f,1643,1644,1645,1646,1647,1649,164a,164b,164c,164d,164e,164f,1651,1653,1654,1655,1656,1657,1659,165b,165c,165d,165e,165f,1661,1668,1678,16a2,16a3,16a6,16a7,16a8,16a9,16aa,16ab,16ac,16ad,16ae,16af,16b1,16b2,16b3,16b4,16b5,16b6,16b7,16b8,16b9,16ba,16bb,16bc,16bd,16be,16bf,16c3,16c4,16c5,16c6,16c7,16c8,16c9,16ca,16cb,16cc,16cd,16ce,16cf,16d1,16d2,16d3,16d4,16d5,16d6,16d7,16d8,16d9,16da,16db,16dc,16dd,16de,16df,16e1,1783,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a1,17a4,17b4,17c1,17c2,17e1,1a22,1a23,1a25,1a26,1a27,1a29,1a2a,1a2b,1a2c,1a2d,1a2e,1a2f,1a31,1a32,1a33,1a35,1a36,1a37,1a39,1a3a,1a3b,1a3d,1a3e,1a3f,1a62,1a63,1a64,1a65,1a66,1a67,1a6a,1a6b,1a6c,1a6d,1a6e,1a6f,1a71,1a72,1a73,1a74,1a75,1a76,1a77,1a79,1a7a,1a7b,1a7c,1a7d,1a7e,1a7f,1aa1,1aa4,1ab4,1ae1,1b61,1b78,1e22,1e23,1e25,1e26,1e27,1e29,1e2a,1e2b,1e2c,1e2d,1e2e,1e2f,1e31,1e32,1e33,1e35,1e36,1e37,1e39,1e3a,1e3b,1e3d,1e3e,1e3f,1e43,1e44,1e45,1e46,1e47,1e4a,1e4b,1e4e,1e4f,1e51,1e53,1e54,1e55,1e56,1e57,1e5b,1e5e,1e5f,1e61,1e68,1e78,1ea1,1ea4,1eb4,1ee1,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36b4,36c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37b4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

After fixing stacking order
- hat implemented
- special case not implemented

Knowns: 2800
Unknowns: 6
[0361,1361,1634,1b61,35a1,36c2]

These are all seat joints, except for 35a1, which is a problem because the TMAM fails to solve it.

The 35a1 shape has two 3-layer half-logos (with hat).  The TMAM picks the wrong one.
The TMAM picks in this order: ESWN
- 0121 is East
- 0181 is North

Rotating right once puts the good half-logo on the East, and that shape works.

Also need a way to fix the problem shape.

Picking last logo
Knowns: 2801
Unknowns: 5
[0361,1361,1634,1b61,36c2]

Only seat joints left.  I think that means there are no other ambiguous shapes.
But need to try all shapes to be sure.

Deconstruct
Rr------:--Rg--Rg:Rb--Rb--:RyRy----
35a1
- - - - 
X X - - 
X - X - 
- X - X 
X - - -
>LOGO f35a1 [] (2,hat)
>LOGO f35a1 [0121,0181] (3,hat)
LOGO  f35a1 [0121]
>LOGO f348 [] (2,hat)
>LOGO f348 [] (3,hat)
>LOGO f348 [] (4)
>LOGO f348 [] (3)
>LOGO f348 [0048] (2)
LOGO  f348 [0048]
LAYER 00f3 [0003]
LAYER 000f [000f]
NOT FOUND 35a1

The "special case" must be seat joints.
But adding support for pad, and looking for them first, causes other shapes to fail.

Need a "smart" way to find seat joints.

From nabby
{----RyRg:RgRg----:Rg--RyRg:--RyRbRc}
ed3c (7bc3)
- X X X
X - X X
X X - -
- - X X

- O B A
X - O X
X X - -
- - O X

where 
- green quads must exist
- missing quads, must not exist
- yellow quads could exist
- blue and cyan are a special case, both could exist but blue can't exist without cyan

0361 --    1361 --    1634 --    1b61 --    36c2 -- 
- - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    X - - -    X - - -    X - - -    X X - - 
X X - -    X X - -    - X X -    X X - X    - X X - 
- X X -    - X X -    X X - -    - X X -    - - X X 
X - - -    X - - -    - - X -    X - - -    - X - - 

0361 --    1361 --    4361 --    1b61 --    9361 -- 
- - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    X - - -    - - X -    X - - -    X - - X 
X X - -    X X - -    X X - -    X X - X    X X - - 
- X X -    - X X -    - X X -    - X X -    - X X - 
X - - -    X - - -    X - - -    X - - -    X - - - 

db61
- - - -
A - B C
X X - D
- X X -
X - - -

- never present
X always present
A,B,C,D optional
C or D only if A is present

Added a seat check, with a mask 0x07ff.

Knowns: 2803
Unknowns: 3
[1792,17c2,35a1]

Found all the seats, but now two fail (plus the problem shape).

1792 --    17c2 --    35a1 -- 
- - - -    - - - -    - - - - 
X - - -    X - - -    X X - - 
X X X -    X X X -    X - X - 
X - - X    - - X X    - X - X 
- X - -    - X - -    X - - - 

1793 - has 1000 set (which is 2000 and not in the mask) and D set (without A)
17c2 - has C and D set (without A)

Added support for seats (pads).
Ran all possible shapes.

Knowns: 48424
Unknowns: 8
[1bc1,2792,35a1,3a52,4e94,65a4,8d68,ca58]

1b61 1b61,1bc1,2792,27c2,4e34,4e94,8d38,8d68
35a1 35a1,3a52,65a4,6a52,95a1,9a58,c5a4,ca58

Test with (3-pad, 2-logo) for seat and (4,3,2-logo) for other. 

Knowns: 2735
Unknowns: 71
[0178,0378,03d2,07b4,1178,1378,13d2,1634,16b4,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a4,17b4,17c2,1b78,1e78,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36b4,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37b4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

0178 - two 2-logo, picks the wrong one.  Looking for a hat would fix.

Test with (3-pad, 2-logo) for seat and (2-hat, 3-hat, 4,3,2-logo) for other. 

Knowns: 2804
Unknowns: 2
[1634,35a1]

Much better.
1634 - one 3-pad, one 3-logo.  The first has a pad, but then fails because the second has no pad.
1bc1 - one 3-pad, then two 2-logo, picks the wrong one.
35a1 - problem shape - two 3-hat, picks the wrong one.

Test having a pad optional.

1634 works now.

1bc1 --    35a1 -- 
- - - -    - - - - 
X - - -    X X - - 
X X - X    X - X - 
- - X X    - X - X 
X - - -    X - - - 

1b61
X - - -
O X - X
- O X -
O - - -

const SEAT_CONFIG = [{ size: 3, pad: true }, { size: 2 }];
 
Knowns: 2638
Unknowns: 168
[0178,0378,1178,1212,1216,121a,121e,125a,1296,1378,13a1,13e1,1642,1643,164a,164b,165a,1696,16c3,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a1,17c2,1a5a,1b78,1e5a,3178,3352,3358,3378,3424,3425,342c,342d,343c,34a5,3522,3523,3524,3526,3527,352a,352b,352c,352e,352f,3534,3538,3568,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35a4,35b4,35c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a1,37c2,3c18,3c1a,3c1c,3c1e,3c34,3c3c,3c52,3c58,3cd2,3d24,3d2c,3d34,3d38,3d68,3da4,3db4,5178,5212,5216,521a,521e,525a,5296,5342,5343,534a,534b,5352,5358,5378,53a1,53c2,5a12,5a16,5a1a,5a1e,5a38,5a52,5a5a,5a78,5b42,5b43,5b4a,5b4b,5b68,5b78,7178,7352,7358,7378,73a1,7818,781a,781c,781e,783c,785a,78b4,7948,7949,794a,794b,7958,7968,7978,79a4,79b4,7a18,7a1c,7a38,7a58,7a78,7b48,7b49,7b58,7b68,7b78,f178,f352,f358,f378]

    const LOGO_CONFIG = [
      { size: 2, hat: true },
      { size: 3, hat: true },
      { size: 4 },
      { size: 3 },
      { size: 2 },
    ];
    
Knowns: 2800
Unknowns: 6
[0361,1361,1634,1b61,35a1,36c2]

    const LOGO_CONFIG = [
      { size: 4 },
      { size: 3 },
      { size: 2 },
    ];
    
Knowns: 2731
Unknowns: 75
[0178,0361,0378,03d2,07b4,1178,1361,1378,13d2,1634,16b4,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a4,17b4,17c2,1b61,1b78,1e78,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36b4,36c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37b4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

-----

Test key shapes without seat check
- Find logo returns largest in each position, and then choses first in the given direction.

config
{ seat: true, reverse: true },

Knowns: 2687
Unknowns: 119
[0125,012d,0361,03d2,07b4,1125,112d,121a,121e,1251,1253,1254,1255,1256,1257,1259,125a,125b,125c,125d,125e,125f,12b4,12d1,12d3,12d4,12d5,12d6,12d7,12d8,12d9,12da,12db,12dc,12dd,12de,12df,1361,13a4,13b4,13d2,1634,1678,16b4,16e1,17a4,17b4,1b61,1e78,3125,312d,31d2,334a,334b,3478,34a2,34a3,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,35a4,35b4,361a,361e,3658,3678,36b4,36c2,36e1,37a4,37b4,5125,512d,521a,521e,52b4,534a,534b,53a4,53b4,7125,712d,71d2,721a,721e,72b4,734a,734b,73a4,73b4,7925,792d,7952,79d2,f125,f12d,f34a,f34b]

config
{ seat: false, reverse: false },
{ seat: true, reverse: true },

Knowns: 2799
Unknowns: 7
[0361,1361,1634,17a4,1b61,36c2,37a4]

Requires seat:
[0x0361, 0x1361, 0x1634, 0x1b61, 0x36c2];

Change find logo to return largest from all positions, then choose the first in the given direction.

Knowns: 2738
Unknowns: 68
[0178,0361,0378,1178,1361,1378,1634,16b4,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a4,17c2,1b61,1b78,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

Using the largest from *each* position works better than the largest from *all* positions.

Test both directions

Deconstruct
Rr--Rr--:--Rg----:Rb------:--------
0125
- - - -
- - - -
X - - -
- X - -
X - X -

ROUND 1
>LOGO [0121,0024]
LOGO  0125 [0024]
EXTRA 0101 [0001]
LAYER 0001 [0001]
ROUND 2
>LOGO [0121,0024]
LOGO  0125 [0121]
LAYER 0004 [0004]
FOUND 0125 [0121,0004] 01+

Choosing 0121 fails.
Choosing 0024 passes.

But you can't always choose the largest, as demonstrated by 0178 and others above.

Test my current (one core) TMAM with all possible shapes...

{ seat: false, reverse: true },

Knowns: 47612
Unknowns: 820
[0125,012d,01d2,021a,021e,024a,024b,02b4,02e1,0361,0392,03b4,03d2,03e1,0478,0485,0487,0634,0678,06b4,06c2,06e1,07b4,07e1,0938,09c1,09d2,0bd2,0c68,0c78,0c94,0e78,1125,112d,11d2,121a,121e,1251,1253,1254,1255,1256,1257,1259,125a,125b,125c,125d,125e,125f,12b4,12d1,12d3,12d4,12d5,12d6,12d7,12d8,12d9,12da,12db,12dc,12dd,12de,12df,1361,13a4,13b4,13d2,1634,1678,16b4,16e1,17a4,17b4,1925,192d,19c1,19d2,1b61,1bc1,1bd2,1c78,1c94,1d22,1d23,1d25,1d26,1d27,1d2a,1d2b,1d2d,1d2e,1d2f,1d38,1d68,1da1,1da4,1e78,2125,212d,21a2,21a3,21a5,21a6,21a7,21a8,21a9,21aa,21ab,21ac,21ad,21ae,21af,21e2,21e3,21e4,21e5,21e6,21e7,21e8,21e9,21ea,21eb,21ec,21ed,21ee,21ef,221a,221e,224a,224b,22b4,22e1,234a,234b,2392,23b4,23e1,2478,24a2,24a3,24a6,24a7,24a8,24a9,24aa,24ab,24ac,24ad,24ae,24af,24b1,24b2,24b3,24b5,24b6,24b7,24b8,24b9,24ba,24bb,24bc,24bd,24be,24bf,261a,261e,2658,2678,26b4,26c2,26e1,2792,27b4,27c2,27e1,2938,29d2,2b44,2b45,2b46,2b47,2b4a,2b4b,2b4c,2b4d,2b4e,2b4f,2b58,2b61,2bc1,2c68,2c78,2e11,2e13,2e15,2e17,2e19,2e1a,2e1b,2e1d,2e1e,2e1f,2e34,2e52,2e58,2e78,2e94,3125,312d,31d2,321a,321e,324a,324b,32b4,32e1,334a,334b,33a4,33b4,3478,34a2,34a3,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,35a4,35b4,361a,361e,3658,3678,36b4,36c2,36e1,37a4,37b4,3925,392d,39c1,39d2,3a44,3a45,3a46,3a47,3a4a,3a4b,3a4c,3a4d,3a4e,3a4f,3a61,3ac1,3b44,3b45,3b46,3b47,3b4a,3b4b,3b4c,3b4d,3b4e,3b4f,3b58,3b61,3bc1,424a,424b,42e1,4361,43b4,43d2,43e1,4478,4485,4487,4634,4678,4685,4687,46a1,46e1,4785,4787,4788,4789,478a,478b,478c,478d,478e,478f,4792,47a1,47c2,47e1,4851,4853,4854,4855,4856,4857,4859,485a,485b,485c,485d,485e,485f,4871,4872,4873,4874,4875,4876,4877,4879,487a,487b,487c,487d,487e,487f,49c1,49d2,4bd2,4c78,4c94,4e34,4e78,4e94,5125,512d,51d2,521a,521e,524a,524b,52b4,52e1,534a,534b,53a4,53b4,5478,5485,5487,561a,561e,5658,5678,5685,5687,56a1,56e1,5925,592d,5952,59d2,6125,612d,61a2,61a3,61a5,61a6,61a7,61a8,61a9,61aa,61ab,61ac,61ad,61ae,61af,61e2,61e3,61e4,61e5,61e6,61e7,61e8,61e9,61ea,61eb,61ec,61ed,61ee,61ef,621a,621e,624a,624b,62b4,62e1,634a,634b,6392,63b4,63e1,6478,6485,6487,6585,6587,6588,6589,658a,658b,658c,658d,658e,658f,6592,65a1,65c2,65e1,661a,661e,6658,6678,6685,6687,66a1,66e1,6785,6787,6788,6789,678a,678b,678c,678d,678e,678f,6792,67a1,67c2,67e1,6851,6853,6854,6855,6856,6857,6859,685a,685b,685c,685d,685e,685f,6871,6872,6873,6874,6875,6876,6877,6879,687a,687b,687c,687d,687e,687f,6925,692d,6952,69d2,6a11,6a13,6a15,6a17,6a19,6a1a,6a1b,6a1d,6a1e,6a1f,6a34,6a52,6a58,6a78,6a94,6c78,6c94,6e11,6e13,6e15,6e17,6e19,6e1a,6e1b,6e1d,6e1e,6e1f,6e34,6e52,6e58,6e78,6e94,7125,712d,71d2,721a,721e,724a,724b,72b4,72e1,734a,734b,73a4,73b4,7478,7485,7487,761a,761e,7658,7678,7685,7687,76a1,76e1,7925,792d,7952,79d2,81d2,8392,83b4,83d2,83e1,8485,8487,84a5,8678,86b4,86c2,86e1,87b4,87e1,8938,8952,89d2,8b52,8bd2,8c68,8d38,8d68,9125,912d,91d2,921a,921e,9251,9253,9254,9255,9256,9257,9259,925a,925b,925c,925d,925e,925f,92b4,92d1,92d3,92d4,92d5,92d6,92d7,92d8,92d9,92da,92db,92dc,92dd,92de,92df,9361,93a4,93b4,93d2,9485,9487,94a5,9522,9523,9525,9526,9527,952a,952b,952d,952e,952f,9538,9568,95a1,961a,961e,9658,9678,9685,9687,96a1,96e1,9925,992d,9952,99d2,9a52,9a58,9ad2,9b52,9bd2,9c68,9d22,9d23,9d25,9d26,9d27,9d2a,9d2b,9d2d,9d2e,9d2f,9d38,9d68,9da1,9da4,a125,a12d,a1d2,a21a,a21e,a24a,a24b,a2b4,a2e1,a34a,a34b,a3a4,a3b4,a478,a485,a487,a61a,a61e,a658,a678,a685,a687,a6a1,a6e1,a925,a92d,a952,a9d2,b125,b12d,b1d2,b21a,b21e,b24a,b24b,b2b4,b2e1,b34a,b34b,b3a4,b3b4,b478,b485,b487,b61a,b61e,b658,b678,b685,b687,b6a1,b6e1,b925,b92d,b952,b9d2,c1d2,c24a,c24b,c2e1,c34a,c34b,c3a4,c3b4,c478,c485,c487,c5a4,c634,c678,c685,c687,c6a1,c6e1,c938,c952,c9d2,d125,d12d,d1d2,d21a,d21e,d24a,d24b,d2b4,d2e1,d34a,d34b,d3a4,d3b4,d478,d485,d487,d61a,d61e,d658,d678,d685,d687,d6a1,d6e1,d925,d92d,d952,d9d2,e125,e12d,e1d2,e21a,e21e,e24a,e24b,e2b4,e2e1,e34a,e34b,e3a4,e3b4,e478,e485,e487,e61a,e61e,e658,e678,e685,e687,e6a1,e6e1,e925,e92d,e952,e9d2,f125,f12d,f1d2,f21a,f21e,f24a,f24b,f2b4,f2e1,f34a,f34b,f3a4,f3b4,f478,f485,f487,f61a,f61e,f658,f678,f685,f687,f6a1,f6e1,f925,f92d,f952,f9d2]

Total: 48432
Percent: 98.3%

0125 --    012d --    01d2 --    021a --    021e --    024a --    024b --    02b4 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X - - -    X - - -    X - - -    - X - -    - X - -    - X - -    - X - -    - X - - 
- X - -    - X - -    X - X X    X - - -    X - - -    - - X -    - - X -    X X - X 
X - X -    X - X X    - X - -    - X - X    - X X X    - X - X    X X - X    - - X - 
...

Test with both directions...

{ seat: false, reverse: true },
{ seat: false, reverse: false },

Knowns: 48384
Unknowns: 48
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,17a4,19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,2b58,2c68,36c2,37a4,39c1,3b58,4361,4634,49c1,4c94,4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,9361,9b52,9c68,9da4,c634,c938]

Total: 48432
Percent: 99.9%

0361 --    0392 --    0634 --    06c2 --    0938 --    09c1 --    0c68 --    0c94 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X - -    X X - -    - X X -    - X X -    X - - X    X - - X    - - X X    - - X X 
- X X -    X - - X    X X - -    - - X X    X X - -    - - X X    - X X -    X - - X 
X - - -    - X - -    - - X -    - X - -    - - - X    X - - -    - - - X    - - X - 

1361 --    1634 --    17a4 --    19c1 --    1b61 --    1bc1 --    1c94 --    1da4 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    X - - - 
X X - -    - X X -    X X X -    X - - X    X X - X    X X - X    - - X X    X - X X 
- X X -    X X - -    - X - X    - - X X    - X X -    - - X X    X - - X    - X - X 
X - - -    - - X -    - - X -    X - - -    X - - -    X - - -    - - X -    - - X - 

2392 --    26c2 --    2792 --    27c2 --    2938 --    2b58 --    2c68 --    36c2 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- X - -    - X - -    - X - -    - X - -    - X - -    - X - -    - X - -    X X - - 
X X - -    - X X -    X X X -    X X X -    X - - X    X X - X    - - X X    - X X - 
X - - X    - - X X    X - - X    - - X X    X X - -    X - X -    - X X -    - - X X 
- X - -    - X - -    - X - -    - X - -    - - - X    - - - X    - - - X    - X - - 

37a4 --    39c1 --    3b58 --    4361 --    4634 --    49c1 --    4c94 --    4e34 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X - -    X X - -    X X - -    - - X -    - - X -    - - X -    - - X -    - - X - 
X X X -    X - - X    X X - X    X X - -    - X X -    X - - X    - - X X    - X X X 
- X - X    - - X X    X - X -    - X X -    X X - -    - - X X    X - - X    X X - - 
- - X -    X - - -    - - - X    X - - -    - - X -    X - - -    - - X -    - - X - 

4e94 --    6392 --    6c94 --    8392 --    86c2 --    8938 --    8b52 --    8c68 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - X -    - X X -    - X X -    - - - X    - - - X    - - - X    - - - X    - - - X 
- X X X    X X - -    - - X X    X X - -    - X X -    X - - X    X X - X    - - X X 
X - - X    X - - X    X - - X    X - - X    - - X X    X X - -    X - X -    - X X - 
- - X -    - X - -    - - X -    - X - -    - X - -    - - - X    - X - -    - - - X 

8d38 --    8d68 --    9361 --    9b52 --    9c68 --    9da4 --    c634 --    c938 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - - X    - - - X    X - - X    X - - X    X - - X    X - - X    - - X X    - - X X 
X - X X    X - X X    X X - -    X X - X    - - X X    X - X X    - X X -    X - - X 
X X - -    - X X -    - X X -    X - X -    - X X -    - X - X    X X - -    X X - - 
- - - X    - - - X    X - - -    - X - -    - - - X    - - X -    - - X -    - - - X 

Test just seats, which don't add a 5th layer

      { seat: true, reverse: false },
      { seat: true, reverse: true },

Knowns: 16050 (complex shapes)
Unknowns: 4270
[1642,1643,16c3,16d2,1792,17c2,1c48,1c49,...]

-----
30-Jun-2022

Find all shapes that require 4-layer half-logo

There are 71 of them.
Modified ops.js t find them and create only4.txt

Last few...
7b49 ST(0433 ST(0042 0013 ST(0001 0003)) 4849 ST(4848 0001))
7b68 ST(4332 ST(0042 0132 ST(0012 0012)) 4848)

Rr----Rr:----Rg--:RbRb--Rb:RyRyRy--
------Rr:--RgRg--:RbRb--Rb:RyRyRy--

7a1c --    7a38 --    7a58 --    7a78 --    7b48 --    7b49 --    7b68 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X X -    X X X -    X X X -    X X X -    X X X -    X X X -    X X X - 
- X - X    - X - X    - X - X    - X - X    X X - X    X X - X    X X - X 
X - - -    X X - -    X - X -    X X X -    - - X -    - - X -    - X X - 
- - X X    - - - X    - - - X    - - - X    - - - X    X - - X    - - - X 

7b49 --
- - - -
X X X -
X X - X
- - X -
X - - X

C:\Program Files\nodejs\node.exe --max-old-space-size=25000 .\main.js
Shape Processing Tools
Wed Oct 12 2022 18:06:22 GMT-0700 (Pacific Daylight Time)

Reading shape file: data/allShapes.txt
lines: 9316
good: 48432
bad: 2625

 1      4
 2     18
 3     68
 4    289
 5   1112
 6   3408
 7   7524
 8  10729
 9  10636
10   7798
11   4332
12   1817
13    560
14    120
15     16
16      1
total: 48432

C:\Program Files\nodejs\node.exe --max-old-space-size=25000 .\main.js
Shape Processing Tools
Wed Oct 12 2022 18:12:59 GMT-0700 (Pacific Daylight Time)

Reading shape file: data/allShapes.txt
lines: 9316
good: 48432
bad: 2625

 1      1
 2      4
 3     11
 4     44
 5    153
 6    463
 7   1004
 8   1449
 9   1443
10   1094
11    619
12    283
13     92
14     26
15      4
16      1
total: 6691

key shapes

6691 possible
 835 impossible
7526 total

3885 standard / stackable
2806 floating

13-Oct-2022

Working on MyTMAM
Level 123 does not work
----Su--:--Wc--Rg:WyCuSg--:WgRy--Cg
code: b7a4
b7a4 [8484,0002,0003,0003,000f] 01234++++

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy--Ry
b7a4
- - - - 
X X - X 
X X X - 
- X - X 
- - X -
ROUND 1
>LOGO [8484,0024]
LOGO  fb7a4 [8484]
LAYER f332 [0002]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
FOUND b7a4 [8484,0002,0003,0003,000f] 01234++++

5th layer on top of 4-logo
reverse stacking

FIX: add reverse stacking to game
TODO: simplify stacking methods, and then implement in-game

Problem
Level 211: ----Wc--:Sc--Rb--:--Wc----
code: 0254

0254 [0004,0024,0001] 012++

The solution has only 3 parts.
The stacking test component uses 4 non "smart" stackers, which returns null when any of the 5 inputs is null.

could add smart stackers, or use intermediate results.
But first, simplify / reduce the needed stacking orders.  Should only need 3 or 4.

level 223: Ry--Sw--:--Cy--Wg:Rr----Wr:----Rg--
code: 49a5

49a5 [0084,0121,0048] 01+2+

--WbSw--:Sw----Cb:----SbWw:RbWw----
3c96 [0084,0012,0024,0018] 01+23++
Missing test stacker

Sr------:--CrSrCr:RuCw--Cw:----Ru--
4be1 [0021,000c,0048,0003] 0123+++
A fifth layer prevents the reverse stacking from working.  But that's okay if the stacking checks early (only 4 layers).

Wy------:--CwCw--:WrCr----:----Cr--
4361 [0121,0424] 01+
That's a seat joint

Need some reverse search codes...
Knowns: 48348
Unknowns: 84
[1792,17c2,181a,181e,185a,1d38,1d68,2125,212d,24a5,29e1,2b61,2bc1,34a5,35a4,35b4,381a,381e,385a,3a58,3a78,3c1a,3c1e,424a,424b,425a,43d2,4978,524a,524b,534a,534b,581a,581e,5c1a,5c1e,6125,612d,6925,692d,781a,781e,7c1a,7c1e,8185,8187,81a5,86b4,8e34,8e94,9a52,9ad2,a125,a12d,a185,a187,a385,a387,a925,a92d,c185,c187,c1a5,c24a,c24b,c25a,c34a,c34b,c385,c387,c5a1,c5e1,d24a,d24b,d34a,d34b,e125,e12d,e185,e187,e385,e387,e925,e92d]

1792 --    17c2 --    181a --    181e --    185a --    1d38 --    1d68 --    2125 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    - X - - 
X X X -    X X X -    - - - X    - - - X    - - - X    X - X X    X - X X    X - - - 
X - - X    - - X X    X - - -    X - - -    X - X -    X X - -    - X X -    - X - - 
- X - -    - X - -    - X - X    - X X X    - X - X    - - - X    - - - X    X - X - 

212d --    24a5 --    29e1 --    2b61 --    2bc1 --    34a5 --    35a4 --    35b4 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- X - -    - X - -    - X - -    - X - -    - X - -    X X - -    X X - -    X X - - 
X - - -    - - X -    X - - X    X X - X    X X - X    - - X -    X - X -    X - X - 
- X - -    - X - X    - X X X    - X X -    - - X X    - X - X    - X - X    X X - X 
X - X X    X - X -    X - - -    X - - -    X - - -    X - X -    - - X -    - - X - 

381a --    381e --    385a --    3a58 --    3a78 --    3c1a --    3c1e --    424a -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X - -    X X - -    X X - -    X X - -    X X - -    X X - -    X X - -    - - X - 
- - - X    - - - X    - - - X    - X - X    - X - X    - - X X    - - X X    - X - - 
X - - -    X - - -    X - X -    X - X -    X X X -    X - - -    X - - -    - - X - 
- X - X    - X X X    - X - X    - - - X    - - - X    - X - X    - X X X    - X - X 

424b --    425a --    43d2 --    4978 --    524a --    524b --    534a --    534b -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - X -    - - X -    - - X -    - - X -    X - X -    X - X -    X - X -    X - X - 
- X - -    - X - -    X X - -    X - - X    - X - -    - X - -    X X - -    X X - - 
- - X -    X - X -    X - X X    X X X -    - - X -    - - X -    - - X -    - - X - 
X X - X    - X - X    - X - -    - - - X    - X - X    X X - X    - X - X    X X - X 
...

--Rr----:Rg----Rg:RbRbRb--:Ry------
1792 [0012,0018,0012,0004] 0123+++

WgSg--Ru:----Rg--:Ry----Wg:Cc--Ru--
594b [4848,0003,0001,0001,000f] 01+234+++
 
--RrRr--:Rg------:Rb------:Ry------
1116 [0012,0004,0001,0001] 01+23++

Problem: Sofware TMAM did not use fifth layer, but game TMAM did.  Not clear if stacking solutions are correct.
TODO: Modify decompose to check after finding all parts.  Maybe need different set of stacking solutions.
OR... Modify game TMAM to flag which stacking is correct and remove 5th layer if not needed.

Note: There are some solutions that the 5th layer can cause the stacking to fail.

Only use X (no seat config)
The list of unknowns has changed. Why???
Unknowns: 48
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,17a4,19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,2b58,2c68,36c2,37a4,39c1,3b58,4361,4634,49c1,4c94,     4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,     9361,9b52,9c68,9da4,c634,c938]
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,     19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,     2c68,36c2,     39c1,     4361,4634,49c1,4c94,4da1,4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,8e52,9361,9b52,9c68,9da4,c634,c938,cda1,ce52]

Same number but 8 differences, including 17a4 and 37a4, which I found previously.
Maybe logo search order?  Yes, that was it.

So what does this mean?
- Changing logo search order changes which shapes are found with the X mask.
- Some shapes can be solved with either X mask (strict logo) or Y mask (seat joint).  Like 17a4, and the 8 differences above.
- X mask might miss some (8?) when looking in a particualar order both forward and reverse.
- But Y mask does find them.
- Maybe this is why I had previously found that there were only 5 key shapes that required seat joints
- But to find all solutions, MyTMAM needs to find more than that when looking for them in order to find the ones X mask misses.

Note: using key shapes is misleading, as some shapes are both.

I think there are 5 key shapes that require seat joints.
Including rotations and mirrors: 5 * 8 = 40 shapes
Then there are 8 that X mask (strict logo) misses: 40 + 8 = 48 shapes.
(which change depending on logo search order)

Rr--Sy--:--Wr----:Cu------:Rg--Ry--
5125 [0121,0004,0005] 01+2+

Seat w/pad

0361 --    1361 --    1634 --    1b61 --    36c2 -- 
- - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    C - - -    B - - -    C - - -    C C - - 
A B - -    A B - -    - B A -    A B - C    - A B - 
- A B -    - A B -    B A - -    - A B -    - - A B 
A - - -    A - - -    - - A -    A - - -    - A - - 

06c2       0634
- - - -    - - - -
- A B -    - B A -
- - A B    B A - -
- A - -    - - A -

A south    A south
B west     B east

4da1 [0181,0042,0048] 012++

--RbSg--

Working on Binz' BUSTTMAM
- looking for half-logos in all positions.
- not including the logos that occupy the same position.
- there are many shapes (like 5a5a) that result in 24 posible logos which iteratie over all 16 million combinations.
- there must be a better way.
- perhaps try all 1 logo, then 2 logo combos, etc.  stop at 4 logos / pieces.
- need to check actual save game to see what it does in this case.
- it's hard to believe that the TMAM takes the order of 2^24 for some shapes.
- maybe the way the logos are sorted makes it faster?  it does search foward and backwards in parallel.
- did not implement 5th layer yet, but some solutions found have 5 pieces.
Knowns: 6147
Unknowns: 544
[3422,3423,3424,3425,3426,3427,342a,342b,342c,342d,342e,342f,3431,3432,3433,3435,3436,3437,3439,343a,343b,343c,343d,343e,343f,3442,3443,3444,3445,3446,3447,3448,3449,344a,344b,344c,344d,344e,344f,3451,3453,3454,3455,3456,3457,3459,345a,345b,345c,345d,345e,345f,3462,3463,3464,3465,3466,3467,3468,3469,346a,346b,346c,346d,346e,346f,3471,3472,3473,3474,3475,3476,3477,3478,3479,347a,347b,347c,347d,347e,347f,34a2,34a3,34a5,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,34c3,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e2,34e3,34e4,34e5,34e6,34e7,34e8,34e9,34ea,34eb,34ec,34ed,34ee,34ef,34f1,34f2,34f3,34f4,34f5,34f6,34f7,34f8,34f9,34fa,34fb,34fc,34fd,34fe,34ff,3521,3522,3523,3524,3525,3526,3527,3529,352a,352b,352c,352d,352e,352f,3534,3538,3561,3568,3581,3583,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35c1,35c2,3c11,3c13,3c15,3c17,3c18,3c19,3c1a,3c1b,3c1c,3c1d,3c1e,3c1f,3c34,3c52,3c58,3c68,3d24,3d2c,3d34,5211,5212,5213,5215,5216,5217,5219,521a,521b,521d,521e,521f,5221,5222,5223,5225,5227,5229,522a,522b,522d,522f,5231,5232,5233,5234,5235,5236,5237,5239,523a,523b,523c,523d,523e,523f,5251,5253,5255,5257,5259,525d,5271,5272,5273,5275,5277,5279,527a,527b,527d,527f,5291,5293,5295,5296,5297,5298,5299,529a,529b,529c,529d,529e,529f,52a2,52a3,52a5,52a7,52a8,52a9,52aa,52ab,52ad,52af,52b1,52b2,52b3,52b4,52b5,52b6,52b7,52b8,52b9,52ba,52bb,52bc,52bd,52be,52bf,52d1,52d3,52d5,52d7,52d8,52d9,52db,52dd,52df,52f1,52f2,52f3,52f5,52f7,52f8,52f9,52fa,52fb,52fd,52ff,5342,5343,5344,5345,5346,5347,534a,534b,534c,534d,534e,534f,5352,5358,5381,5383,5385,5387,5388,5389,538a,538b,538c,538d,538e,538f,53a1,53a4,53c2,5a11,5a12,5a13,5a15,5a16,5a17,5a1a,5a1b,5a1e,5a1f,5a34,5a38,5a52,5b42,5b43,5b44,5b45,5b46,5b47,5b4a,5b4b,5b4e,5b4f,5b52,5b68,7811,7813,7815,7817,7818,7819,781a,781b,781c,781d,781e,781f,7831,7832,7833,7835,7836,7837,7839,783a,783b,783c,783d,783e,783f,7851,7853,7855,7857,7859,785a,785b,785d,785f,7871,7872,7873,7875,7877,7879,787a,787b,787d,787f,7881,7883,7885,7887,7888,7889,788a,788b,788d,788f,7891,7893,7894,7895,7896,7897,7898,7899,789a,789b,789c,789d,789e,789f,78a2,78a3,78a5,78a7,78a8,78a9,78aa,78ab,78ad,78af,78b1,78b2,78b3,78b4,78b5,78b6,78b7,78b8,78b9,78ba,78bb,78bc,78bd,78be,78bf,78d1,78d3,78d5,78d7,78d8,78d9,78da,78db,78dd,78df,78f1,78f2,78f3,78f5,78f7,78f8,78f9,78fa,78fb,78fd,78ff,7921,7922,7923,7925,7926,7927,7929,792a,792b,792d,792e,792f,7944,7945,7946,7947,7948,7949,794a,794b,794c,794d,794e,794f,7952,7958,7968,79a1,79a4,7a11,7a12,7a13,7a15,7a16,7a17,7a18,7a19,7a1a,7a1b,7a1c,7a1d,7a1e,7a1f,7a34,7a38,7a92,7a94,7b48,7b49,7b68]

3422 [0002,0242,0001,000f] 0123+++

These look like 5th layer shapes.

Added support for 5th layer shapes.
Added stats for each shape: number of logos found, iteration count (work)

Knowns: 6204
Unknowns: 487
[0001,0003,0005,0007,000f,0011,0012,0013,0015,0016,0017,001a,001b,001e,001f,0031,0033,0035,0036,0037,003c,003d,003f,0051,0053,0055,0057,005a,005b,005f,0071,0072,0073,0075,0077,0079,007a,007b,007d,007f,00f1,00f3,00f5,00f7,00ff,0111,0112,0113,0115,0116,0117,011a,011b,011e,011f,0121,0122,0123,0125,0126,0127,0129,012a,012b,012d,012e,012f,0131,0132,0133,0135,0136,0137,0138,0139,013a,013b,013c,013d,013e,013f,0151,0153,0154,0155,0156,0157,015a,015b,015e,015f,0162,0163,0164,0165,0166,0167,0169,016a,016b,016c,016d,016e,016f,0171,0172,0173,0174,0175,0176,0177,0178,0179,017a,017b,017c,017d,017e,017f,01a2,01a3,01a5,01a6,01a7,01aa,01ab,01ae,01af,01b1,01b2,01b3,01b5,01b6,01b7,01ba,01bb,01be,01bf,01e2,01e3,01e4,01e5,01e6,01e7,01ea,01eb,01ee,01ef,01f1,01f2,01f3,01f4,01f5,01f6,01f7,01fa,01fb,01fe,01ff,0311,0312,0313,0315,0316,0317,0318,0319,031a,031b,031c,031d,031e,031f,0331,0333,0334,0335,0336,0337,033c,033d,033f,0351,0353,0354,0355,0356,0357,0359,035a,035b,035c,035d,035e,035f,0361,0362,0363,0364,0365,0366,0367,0369,036a,036b,036c,036d,036e,036f,0371,0372,0373,0374,0375,0376,0377,0378,0379,037a,037b,037c,037d,037e,037f,03c3,03c4,03c5,03c6,03c7,03cc,03cd,03cf,03d1,03d2,03d3,03d4,03d5,03d6,03d7,03d8,03d9,03da,03db,03dc,03dd,03de,03df,03f1,03f3,03f4,03f5,03f6,03f7,03fc,03fd,03ff,0511,0512,0513,0515,0516,0517,051a,051b,051e,051f,0531,0532,0533,0535,0536,0537,0539,053a,053b,053c,053d,053e,053f,0551,0552,0553,0555,0557,055a,055b,055f,0571,0572,0573,0575,0577,0578,0579,057a,057b,057d,057f,05a2,05a3,05a5,05a7,05aa,05ab,05af,05b1,05b2,05b3,05b5,05b6,05b7,05ba,05bb,05be,05bf,05f1,05f2,05f3,05f5,05f7,05fa,05fb,05ff,0711,0712,0713,0715,0716,0717,0718,0719,071a,071b,071c,071d,071e,071f,0721,0722,0723,0725,0727,0729,072a,072b,072d,072f,0731,0732,0733,0734,0735,0736,0737,0738,0739,073a,073b,073c,073d,073e,073f,0751,0752,0753,0755,0757,0758,0759,075a,075b,075d,075f,0771,0772,0773,0775,0777,0778,0779,077a,077b,077d,077f,0791,0793,0795,0796,0797,0798,0799,079a,079b,079c,079d,079e,079f,07a2,07a3,07a5,07a7,07a8,07a9,07aa,07ab,07ad,07af,07b1,07b2,07b3,07b4,07b5,07b6,07b7,07b8,07b9,07ba,07bb,07bc,07bd,07be,07bf,07d1,07d2,07d3,07d5,07d7,07d8,07d9,07da,07db,07dd,07df,07f1,07f2,07f3,07f5,07f7,07f8,07f9,07fa,07fb,07fd,07ff,0f11,0f12,0f13,0f15,0f16,0f17,0f1a,0f1b,0f1e,0f1f,0f31,0f33,0f34,0f35,0f36,0f37,0f3c,0f3d,0f3f,0f51,0f52,0f53,0f55,0f57,0f5a,0f5b,0f5f,0f71,0f72,0f73,0f75,0f77,0f78,0f79,0f7a,0f7b,0f7d,0f7f,0ff1,0ff3,0ff5,0ff7,0fff]

Saving known builds
Saving chart of unknowns

Stats
Max work: 20513
Max logos: 24
Total work: 441126 of 679333837

Something broke <4 layer shapes.
My new toLayers() always return 4 layers...

Max work shape...

Deconstruct
--Rr--Rr:Rg--Rg--:--Rb--Rb:Ry--Ry--
5a5a
- - - - 
X - X - 
- X - X 
X - X - 
- X - X
>LOGO [[1212,1210,0212,1200,0210,0012],[4242,4240,0242,4200,0240,0042],[4848,4840,0848,4800,0840,0048],[1818,1810,0818,1800,0810,0018]]
>>NUM 24
STATS 20513 of 16777216
FOUND 5a5a [0042,1818,0042,000f] 0123+++

- modified toLayers() to return same number of layers as the shape.
- changed find logos to return same order as Binz' TMAM.
- changed logo sets to include both directions of found logos.

Deconstruct
--Rr--Rr:Rg--Rg--:--Rb--Rb:Ry--Ry--
5a5a
- - - - 
X - X - 
- X - X 
X - X - 
- X - X
>LOGO [0018,0048,0042,0012,0810,0840,0240,0210,1800,4800,4200,1200,0818,0848,0242,0212,1810,4840,4240,1210,1818,4848,4242,1212]
>>NUM 24
PARTS [000a,0005,000a,0005,000f]
PARTS [000a,0005,000a,0005,000f]
PARTS [0002,0018,0004,000a,0005,000f]
PARTS [0008,1212,0004,0008,0004,000f]
PARTS [0002,0048,0001,000a,0005,000f]
PARTS [0008,4242,0001,0008,0001,000f]
PARTS [0002,0048,0018,000a,0005,000f]
PARTS [0008,4242,1212,0008,000f]
PARTS [0008,0042,0001,000a,0005,000f]
PARTS [0002,4848,0001,0002,0001,000f]
PARTS [0042,0018,000a,0005,000f]
PARTS [4848,1212,000f]
STATS 12 of 33554432
FOUND 5a5a [4848,1212,000f] 012++

Stats
Max work: 12
Max logos: 24
Total work: 17 of 33554444

- Now finds 5a5a in 12 instead of 20513.
- Need to test all shapes.

- test all key shapes

Knowns: 6691
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Stats
Max work: 8195
Max logos: 24
Total work: 60698 of 1358667674

- All solutions to key shapes found.
- Average work is 60698 / 6691 = 9.07
- TODO: investigate stacking orders - how many are used?  Looks like all (10) of them.
- Worst case is 8195 - need to find it.

125a 11 1028
16d2 10 523
1a56 13 522
1afa 18 513
1e5a 18 523
1e5b 18 513
1e5e 18 513
1e5f 18 513
1ebe 18 513
34a5 11 2051
35a4 13 2052
525a 14 8195
725a 14 515
785a 14 2052
f1a5 14 521

- Complex shapes (require a half-logo)

Knowns: 20320
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Saving stats
Stats
Max work: 8195
Max logos: 24
Total work: 326431 of 2124015874

- Average work 326431 / 20320 = 16.06

- Shapes that take >1024 iters to solve...
125a 11 1028
21a5 11 1028
24a5 11 2051
25a9 13 1030
25ac 13 1030
34a5 11 2051
35a4 13 2052
425a 11 2051
525a 14 8195
585a 14 2052
61a5 11 1028
65a1 13 1028
785a 14 2052
925a 11 1028
9a52 13 1028
a1a5 14 4102
a4a5 14 2054
b4a5 14 2054
c25a 11 2051
ca52 13 2052
d25a 14 8195
e1a5 14 4102

Deconstruct
--Rr--Rr:Rg--Rg--:--Rb----:Ry--Ry--
525a
- - - -
X - X -
- X - -
X - X -
- X - X

>LOGO [0018,0048,0042,0012,0240,0210,4200,1200,0242,0212,4240,1210,4242,1212]
>>NUM 14
STATS 8195 of 32768
FOUND 525a [4242,0018,0001,000f] 01+23++

Knowns: 20320
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Saving stats
Stats
Max logos: 24
Max iters: 285
Total iters: 236628 of 13849796

- Average iters 236628/20320 = 11.65

1e5a 18 283
2da5 18 279
4b5a 18 285
87a5 18 283

I implemented a new iterator that uses hammingCombos() and it works much better.
         total   ave   max
binary   326431  16.1  8195
hamming  236628  11.6   285

Deconstruct
--Rr--Rr:Rg--Rg--:RbRb--Rb:----Ry--
4b5a
- - - -
- - X -
X X - X
X - X -
- X - X

>LOGO [0018,0048,0042,0012,0810,0840,0240,0210,4800,4200,0818,0848,0242,0212,4840,4240,4848,4242]
>>NUM 18
STATS 285 of 8096
FOUND 4b5a [4848,0012,0003,000f] 012++3+

- Added logo sets [2,3], [3,4], [4,2]
- Does not do reverse logoset
- Still uses hamming combos

Knowns: 20320
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Saving stats
Stats
Max logos: 24
Max iters: 226
Total iters: 228840 of 6498218

- total iters decreased to 228840 from 236628.  not correct due to error in iter count.
- max iters decreased to 226 from 285.  Better, but not a lot.
- considering this would be done in parallel, it would be about 76 instead of 143.
- so about half the time needed.
- probably a bit more than 76 because logosets are different lengths.
- need to keep stats for each logoset.

- maybe try NS, EW logosets.  But would also need NE, NW, SE, SW for seated logos.
- that would be 6 instead of 3.  Or 18 logosets if both partitioning was used.
- This would at least double the size of the TMAM.

Slow shapes
16d2 10 216
1c78 10 222
29e1 10 218
2cb4 10 216
43d2 10 217
4978 10 221
5aa5 8 226
83e1 10 219
86b4 10 222
a55a 8 226

- Compare binary/hamming combos with 2 and 3 logo sets.
- Use complex shapes - those that require logos

Knowns: 20320

2, binary
Max iters: 8194
Total iters: 303951 of 2123995552
525a 14 8194
d25a 14 8194

3, binary
Max iters: 1599
Total iters: 442383 of 100984300
4a53 13 1599
4a59 13 1599

2, hamming
Max iters: 238
Total iters: 214328 of 13829476
1c78 10 238
86b4 10 238

3, hamming
Max iters: 227
Total iters: 249160 of 6498218
5aa5 8 227
a55a 8 227

sets  combo    total   max   ave   time
   2  binary   303951  8194  7.48  4097
   3  binary   442383  1599  7.26   533
   2  hamming  214328   238  5.27   119
   3  hamming  249160   227  4.09    76

- The ave and max values are off because different sets have different lengths.
- Modified the code to keep track of iters per combo.

2, binary
Max iters: 4097
Ave iters: 7.18
Total max iters: 145850
Total iters: 303951 of 2123995552
525a 14 4097
a1a5 14 2050
a4a5 14 1026

3, binary
Max iters: 1056
Ave iters: 9.41
Total max iters: 191268
Total iters: 442383 of 100984300
4a53 13 1056
4a59 13 1056

2, hamming
Max logos: 24
Max iters: 119
Ave iters: 4.97
Total max iters: 101039
Total iters: 214328 of 13829476
1c78 10 119
4978 10 118
83e1 10 116

3, hamming
Max iters: 113
Ave iters: 4.84
Total max iters: 98380
Total iters: 249160 of 6498218
5aa5 8 113
1c78 10 109
4978 10 108

sets  combo    total   sum     ave   max
   2  binary   303951  145850  7.18  4097
   3  binary   442383  191268  9.41  1056
   2  hamming  214328  101039  4.97  119
   3  hamming  249160   98380  4.84  113

- Need a fast hamming combo that generates 0, 1, 2, 3, 4 bit combos.
- Given: max size / position
- Try...
- 4 nested for loops / shift registers: A B C D
- The value of each represents a bit postition.
- The combo value is 1<<A | 1<<B | 1<<C | 1<<D
- Start with all registers equal to zero.
- for A: 0..max
  - for B: 0..A
    - for C: 0..B
      - for D: 0..C

hc1(8, 4) returns 162 [0001,0002,0004,0008,0010,0020,0040,0080,
                       0003,0005,0006,0009,000a,000c,0011,0012,0014,0018,0021,0022,0024,0028,0030,0041,0042,0044,0048,0050,0060,0081,0082,0084,0088,0090,00a0,00c0,
                       0007,000b,000d,000e,0013,0015,0016,0019,001a,001c,0023,0025,0026,0029,002a,002c,0031,0032,0034,0038,0043,0045,0046,0049,004a,004c,0051,0052,0054,0058,0061,0062,0064,0068,0070,0083,0085,0086,0089,008a,008c,0091,0092,0094,0098,00a1,00a2,00a4,00a8,00b0,00c1,00c2,00c4,00c8,00d0,00e0,
                       000f,0017,001b,001d,001e,0027,002b,002d,002e,0033,0035,0036,0039,003a,003c,0047,004b,004d,004e,0053,0055,0056,0059,005a,005c,0063,0065,0066,0069,006a,006c,0071,0072,0074,0078,0087,008b,008d,008e,0093,0095,0096,0099,009a,009c,00a3,00a5,00a6,00a9,00aa,00ac,00b1,00b2,00b4,00b8,00c3,00c5,00c6,00c9,00ca,00cc,00d1,00d2,00d4,00d8,00e1,00e2,00e4,00e8,00f0]
hc2(8, 4) returns 162 [0001,
                       0002,0003,
                       0004,0005,0006,0007,
                       0008,0009,000a,000b,000c,000d,000e,000f,
                       0010,0011,0012,0013,0014,0015,0016,0017,0018,0019,001a,001b,001c,001d,001e,
                       0020,0021,0022,0023,0024,0025,0026,0027,0028,0029,002a,002b,002c,002d,002e,0030,0031,0032,0033,0034,0035,0036,0038,0039,003a,003c,
                       0040,0041,0042,0043,0044,0045,0046,0047,0048,0049,004a,004b,004c,004d,004e,0050,0051,0052,0053,0054,0055,0056,0058,0059,005a,005c,0060,0061,0062,0063,0064,0065,0066,0068,0069,006a,006c,0070,0071,0072,0074,0078,
                       0080,0081,0082,0083,0084,0085,0086,0087,0088,0089,008a,008b,008c,008d,008e,0090,0091,0092,0093,0094,0095,0096,0098,0099,009a,009c,00a0,00a1,00a2,00a3,00a4,00a5,00a6,00a8,00a9,00aa,00ac,00b0,00b1,00b2,00b4,00b8,00c0,00c1,00c2,00c3,00c4,00c5,00c6,00c8,00c9,00ca,00cc,00d0,00d1,00d2,00d4,00d8,00e0,00e1,00e2,00e4,00e8,00f0]

- Added a different order of hamming combos

3, hamming
Max iters: 412
Ave iters: 8.36
Total max iters: 169813
Total iters: 400400 of 6498218
4a53 13 412
4a59 13 412

- Max iters was 113, now 412 - much worse
- searching combos in numerical order is worse.
- better to search for all 1 half-logos, then 2 half-logos, etc.

- Can remove these half-logos...
  - 2,3,4 layer half-logo with filled void on layer 1 (bottom layer of target shape).

Problem shapes for 897701215...
1111
1100
0101
1000

1100
1010
0101
1000

35a1       f3a1    
- - - -    - - - - 
X X - -    X X X X 
X - X -    X X - - 
- X - X    - X - X 
X - - -    X - - - 

Mon Nov 21 2022 08:18:23 GMT-0800 (Pacific Standard Time)

Deconstruct
Rr------:--Rg--Rg:Rb--Rb--:RyRy----
35a1
- - - -
X X - -
X - X -
- X - X
X - - -

ROUND 1
>LOGO [0121,0181]
LOGO  f35a1 [0121]
>LOGO [0048]
LOGO  f348 [0048]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 2
>LOGO [0121,0181]
LOGO  f35a1 [0181]
>LOGO [0242]
LOGO  f342 [0242]
LAYER 00f1 [0001]
LAYER 000f [000f]
FOUND 35a1 [0181,0242,0001,000f] 0123+++

Deconstruct
Rr------:--Rg--Rg:RbRb----:RyRyRyRy
f3a1
- - - -
X X X X
X X - -
- X - X
X - - -

ROUND 1
>LOGO [0021,0181]
LOGO  ff3a1 [0021]
>LOGO [0018]
LOGO  ff38 [0018]
LAYER 0ff2 [0002]
LAYER 00ff [000f]
FOUND f3a1 [0021,0018,0002,000f] 0123+++

- Might be 4-part solutions only need 2-layer half-logos?
- Maybe search using binary in that case would not make much difference?

16-Feb-2023
Working on desconstructor design by Skim

It is not iterative.  It grows half-logos, all four corners/sides at the same time.

Here's the cardboard box top issue...

Deconstruct
RrRrRrRr:RgRgRgRg:RbRbRbRb:RyRyRyRy
ffff
- - - -
X X X X
X X X X
X X X X
X X X X

RULES \/\
LAYER 000f
RULE  \
LAYER 000f
RULE  /
>PART 0012
>PART 0024
>PART 0048
>PART 0081
LAYER 000f
RULE  \
LAYER 000f
RULE  -
>PART 0012
>PART 0024
>PART 0048
>PART 0081
PARTS [0012,0024,0048,0081,0012,0024,0048,0081]

Truth table
- - - -
A B C D
E F G H
- - - -

F - Current corner
P - Passed in part
Q - Passed in direction
R - Current rule:
  - flat (eject)
  | stack up
  \ float left
  / float right

A B C D E F G H P Q R
. . . . . 0 . . . . .  NOP
. 1 . . . 1 . . 0 . |   >B
. 1 . . . 1 . . 1 | |  S>B
1 . . . . 1 . . 0 . \   >A
1 . . . 0 1 . . 1 / \  S>A
0 . 1 . . 1 . 0 0 . \   >C
0 . 1 . . 1 0 0 1 \ \  S>C
. . 1 . . 1 . . 0 . /   >C
. . 1 . . 1 0 . 1 \ /  S>C
1 . 0 . . 1 . 0 0 . /   >A
1 . 0 . 0 1 . 0 1 / /  S>A

Process
- If P exists, stack current corner on top of it.
- Pass result to next layer, else eject it as a part.

Ran all complex shapes with \\\

Knowns: 12525
Unknowns: 7795
[0121,0125,0129,012d,0169...

Try \/\

Knowns: 12683
Unknowns: 7637
[0121,0125,0129,012d...

Try \/\, /\/

Knowns: 14200
Unknowns: 6120
[0392,03b4,03d2,03e1...

Deconstruct
--Rr----:Rg----Rg:RbRb----:--------
0392
- - - -
- - - -
X X - -
X - - X
- X - -

RULES \/\
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 0009
RULE  /
>PASS [0008,0012,0000,0000]
>DIR  ["/","/","-","-"]
LAYER 0003
RULE  \
>PART 0018
>PART 0212
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0018,0212]

NOT FOUND 0392

It finds the correct parts, but stacking does not work.
Because the old stacker assumes parts on the bottom come first.

Need to sort by bottom of parts.  Or try more/different stacking orders.
Might also need to combine parts (into superparts) because ther are more parts found using this method than previous methods.

Modifed partsList to group parts by bottom layer.

Deconstruct
----Rr--:RgRg--Rg:RbRb----:--------
03b4
- - - -
- - - -
X X - -
X X - X
- - X -

RULES \/\
LAYER 0004
RULE  \
>PASS [0000,0004,0000,0000]
>DIR  ["-","\\","-","-"]
LAYER 000b
RULE  /
>PART 0024
>PASS [0008,0001,0000,0000]
>DIR  ["/","/","-","-"]
LAYER 0003
RULE  \
>PART 0018
>PART 0021
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0024,0018,0021]

RULES /\/
LAYER 0004
RULE  /
>PASS [0000,0000,0000,0004]
>DIR  ["-","-","-","/"]
LAYER 000b
RULE  \
>PART 0084
>PASS [0002,0001,0000,0000]
>DIR  ["\\","/","-","-"]
LAYER 0003
RULE  /
>PART 0012
>PART 0021
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0084,0012,0021]

NOT FOUND 03b4

03b4 [0024,0009,0003] 012++

Modified partsList by creating superparts that combine all shapes that start on the same layer.

Knowns: 7094
Unknowns: 13226
[0122,0123,0126,0127...

Got worse for some reason.

Forgot to put flats in correct layer of partsList.

Knowns: 16008
Unknowns: 4312
[1642,1643,1661,16c3...

Better now.

Added rule \-/.

Knowns: 16112
Unknowns: 4208
[16d2,16e1,1792,17c1...

Deconstruct
--Rr----:Rg--RgRg:--RbRb--:Ry------
16d2
- - - -
X - - -
- X X -
X - X X
- X - -

RULES \/\
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 000d
RULE  /
>QUAD 0004
>PASS [0000,0012,0008,0000]
>DIR  ["-","/","\\","-"]
LAYER 0006
RULE  \
>PART 0048
>PASS [0212,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 0001
RULE  -
>PART 1212
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [1212,004c]

RULES /\/
LAYER 0002
RULE  /
>PASS [0000,0000,0002,0000]
>DIR  ["-","-","/","-"]
LAYER 000d
RULE  \
>QUAD 0001
>PASS [0000,0042,0008,0000]
>DIR  ["-","\\","\\","-"]
LAYER 0006
RULE  /
>PART 0242
>PART 0048
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
LAYER 0001
RULE  -
>QUAD 0001
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0242,0049,0001]

RULES \-/
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 000d
RULE  -
>PART 0012
>QUAD 0004
>QUAD 0008
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
LAYER 0006
RULE  /
>QUAD 0004
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 0001
RULE  -
>PART 0012
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0012,000c,0016]

NOT FOUND 16d2

16d2 [0042,0048,0121] 012++

Saddle shape.  Two logos joined at the hip on top of another logo.
How did I fix this?  Added //\

Deconstruct
--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
- - - -
X - - -
X X X -
X - - X
- X - -

--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
C - - -
B C D -
A - - B
- A - -

Modified float finding to always fail if there is a corner to the side.
Turned off bottom flats.
EDIT: I did this in an attempt to resolve cardboard box top without pre-preprocessing flat supporting layers.
It does not help with 1792, because it only changes when to start a logo, not how to continue growing one.

Knowns: 14600
Unknowns: 5720
[0138,0164,016c,0178...

Better than the run with the initial rules.

Deconstruct
------Rr:RgRg----:Rb------:--------
0138
- - - -
- - - -
X - - -
X X - -
- - - X

That's 2 2-layer logos, seated.
It doesn't work because the rule won't start a logo when there is a corner.

0261
- - - -
- X - -
- X X -
X - - -

It works with my tmam because the bottom half-logo is removed first.
Skim's TMAM works quads in parallel, but layers bottom up.
The second layer knows that the second quad is claimed I think.  It could ignore it in this case.

Knowns: 15196
Unknowns: 5124
[0164,016c,01c4,01c6...

Deconstruct
----Rr--:--RgRg--:Rb------:--------
0164
- - - -
- - - -
X - - -
- X X -
- - X -

This is a logo on top of a stable layer.
It used to work because bottom flats removed the bottom layer.
Now it fails because it attempt to build a logo with the corner on the bottom.

Try checking for corners directly above.

Knowns: 15800
Unknowns: 4520
[0361,0392,03d2,03e1...

Deconstruct
Rr------:--RgRg--:RbRb----:--------
0361
- - - -
- - - -
X X - -
- X X -
X - - -

RULES \/\
LAYER 0001
RULE  \
>PASS [0000,0001,0000,0000]
>DIR  ["-","/","-","-"]
LAYER 0006
RULE  /
>PART 0021
>PASS [0000,0004,0000,0000]
>DIR  ["-","\\","-","-"]
LAYER 0003
RULE  \
>QUAD 0001
>PART 0024
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0021,0024,0001]

RULES /\/
LAYER 0001
RULE  /
>PASS [0000,0001,0000,0000]
>DIR  ["-","/","-","-"]
LAYER 0006
RULE  \
>PART 0021
>PASS [0000,0004,0000,0000]
>DIR  ["-","\\","-","-"]
LAYER 0003
RULE  /
>QUAD 0001
>PART 0024
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0021,0024,0001]

NOT FOUND 0361

Now the first seat joint fails because the 3-layer logo is cut short due to the corner in the seat.

Try ignoring the corner above when there is a passed part.

That made 2 of 4 found.

Deconstruct
--Rr----:Rg--RgRg:RbRb----:--------
03d2
- - - -
- - - -
X X - -
X - X X
- X - -

RULES \/\
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 000d
RULE  /
>PART 0012
>QUAD 0004
>PASS [0008,0000,0000,0000]
>DIR  ["/","-","-","-"]
LAYER 0003
RULE  \
>PART 0018
>QUAD 0002
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0012,001c,0002]

RULES /\/
LAYER 0002
RULE  /
>PASS [0000,0000,0002,0000]
>DIR  ["-","-","/","-"]
LAYER 000d
RULE  \
>QUAD 0001
>QUAD 0008
>PASS [0000,0042,0000,0000]
>DIR  ["-","\\","-","-"]
LAYER 0003
RULE  /
>QUAD 0001
>PART 0242
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0242,0009,0001]

NOT FOUND 03d2

03d2 [0012,0018,0024] 012++

I think this fails because the logo on top fails to build because there is a peer quad.
Not correct - But the peer is already claimed by the layer below, so it should not matter.

Fixed the logic for checking the corner above.
Only when there is no passed part, the part directly above must not exist.

I'm probably going down a rat's nest...

Knowns: 16080
Unknowns: 4240
[1642,1643,16c3,16d2...

Well, it's better.

Deconstruct
--Rr----:----Rg--:--RbRb--:Ry------
1642
- - - -
X - - -
- X X -
- - X -
- X - -

1642 [0042,0012,0004] 012++

I think this is a case for /-\.

Try without /\/...

Knowns: 15652
Unknowns: 4668
[1792,17c2,1851,1853...

Add /\/ back...

Knowns: 16160
Unknowns: 4160
[1792,17c2,1c78,1d38...

Well, some more are found, but making slow progress.

Now we are back to 1792...

Deconstruct
--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
- - - -
X - - -
X X X -
X - - X
- X - -

--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
C - - -
B C D -
A - - B
- A - -

Ideas
- remove flat layer if there are no passed parts and it stacks.
- refactor rules to a function or two.
- Make it work like my TMAM with strict and loose half-logos. (?)
- Fix 5th layer shapes.

Refactored the code.
Added eject flats.
Restored original rules.
Using only \/\ and /\/.

Knowns: 16008
Unknowns: 4312
[1642,1643,1661,16c3...

Not too bad.  Found almost as many as latest attempt.

Deconstruct
--Rr----:----Rg--:--RbRb--:Ry------
1642
- - - -
X - - -
- X X -
- - X -
- X - -

PARTS [0242,0004,0001]

1642 [0042,0012,0004] 012++

This is finding a 3-layer logo with a filled seat.
It eats the part needed to support the half-logo on the top layer.

My TMAM works because it uses strict logos, and stops at 2 layers.
It needs to stop at two layers. Possible solutions...
- Explicity with a rule like /-\.
- Somehow implement rules with strict and loose logos.
- Pattern matching - recognize that the corner is needed for half-logo on the top layer.
- Heuristic - Maybe the corner in the seat can be used?

Added 5th layer.

      { rules: [RULE.LEFT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT, RULE.RIGHT] }
      
Knowns: 20248
Unknowns: 72
[1642,1643,1661,16c3,16d2,16e1,1792,17c1,17c2,1c48,1c49,1c69,1c78,1cc1,1ce1,1d38,1d61,1d68,2981,2983,2992,29c3,29d2,29e1,2b61,2bc1,2bc2,2c84,2c86,2c96,2cb4,2cc2,2cd2,2e34,2e92,2e94,4312,4316,4334,4396,43b4,43d2,4792,4794,47c2,4918,491c,493c,4978,4994,49b4,4d34,4d38,4d68,8321,8329,8338,8369,8378,83e1,8624,862c,863c,8668,8678,86b4,8b61,8b68,8bc1,8e34,8e38,8e94]

Much better.
I see 1792 is still there.

Try with explicit rules...
      { rules: [RULE.LEFT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT, RULE.RIGHT] },
      { rules: [RULE.LEFT, RULE.FLAT, RULE.RIGHT] },
      { rules: [RULE.RIGHT, RULE.FLAT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.LEFT, RULE.LEFT, RULE.LEFT] },

Knowns: 20296
Unknowns: 24
[1792,17c1,17c2,1d38,1d61,1d68,2b61,2bc1,2bc2,2e34,2e92,2e94,4792,4794,47c2,4d34,4d38,4d68,8b61,8b68,8bc1,8e34,8e38,8e94]

That's pretty good.

Deconstruct
--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
- - - -
X - - -
X X X -
X - - X
- X - -

Deconstruct
Rr------:----RgRg:RbRbRb--:Ry------
17c1
- - - -
X - - -
X X X -
- - X X
X - - -

RULES \/\
LAYER 0 \ 0001
PASS  [0000,0000,0000,0001]
DIR   [null,null,null,"\\"]
LAYER 1 / 000c
PASS  [0081,0004,0000,0000]
DIR   ["/","\\",null,null]
LAYER 2 \ 0007
>PART 0181
>PART 0024
>QUAD 0004
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 3 - 0001
>FLAT 0001
PARTS [0181,0024,0004,0001]

17c1 [0181,0004,0012,0004] 0123+++

This fails mostly because it is finding a 2-layer logo (24) starting on the second layer.
My TMAM works because the 4 gets ejected as a flat supporting the layer above (after 181 is removed).

Added addtional flat rule.
Rerverted to using only \/\ and /\/.

Knowns: 19096
Unknowns: 1224
[1312,1316,1396,1642...

Fixed 17c1, but got worse (was 72) results overall.

1312 fails because it is a 4-layer half logo with a filled void.

My TMAM works because it stops at a strict 2-layer logo.

Try adding the addtional rules back.

Unknowns: 28
[1792,17c2,1d38,1d68,2b61,2bc1,2e34,2e94,37a4,3b58,3e34,4792,47c2,4d38,4d68,67a1,6d68,6e58,8b61,8bc1,8e34,8e94,9792,9b52,9da4,cbc1,cda1,ce52]

Still worse (was 24).

Unknowns: 24
[1792,17c1,17c2,1d38,1d61,1d68,2b61,2bc1,2bc2,2e34,2e92,2e94,4792,4794,47c2,4d34,4d38,4d68,8b61,8b68,8bc1,8e34,8e38,8e94]

37a4 is one that was added when it got worse.

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy----
37a4
- - - -
X X - -
X X X -
- X - X
- - X -

RULES \/\
LAYER 0 \ 0004
PASS  [0000,0004,0000,0000]
DIR   [null,"\\",null,null]
LAYER 1 / 000a
PASS  [0008,0000,0024,0000]
DIR   ["/",null,"/",null]
LAYER 2 \ 0007
>PART 0018
>PART 0424
PASS  [0002,0000,0000,0000]
DIR   ["\\",null,null,null]
LAYER 3 - 0003
>PART 0012
>QUAD 0002
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [0424,0018,0012,0002]
FOUND 37a4 [0424,0018,0012,0002] 0123+++

37a4 [0024,0018,0006,0003] 0123+++

Again with the filled 4-layer logo for the failure case.
The working case finds the filled void and stops at 3 layers.
My TMAM stops at 2 layers with strict logos.

Changed float growing to stop in some cases.
Rerverted to using only \/\ and /\/.

Unknowns: 48
[1642,1643,16c3,16d2,1792,17c2,1c48,1c49,1c69,1c78,1d38,1d68,2981,2983,29c3,29e1,2b61,2bc1,2c84,2c86,2c96,2cb4,2e34,2e94,4312,4316,4396,43d2,4792,47c2,4918,491c,493c,4978,4d38,4d68,8321,8329,8369,83e1,8624,862c,863c,86b4,8b61,8bc1,8e34,8e94]

Better (was 72).
Still see 1792.

Add rules back.

Unknowns: 16
[1792,17c2,1d38,1d68,2b61,2bc1,2e34,2e94,4792,47c2,4d38,4d68,8b61,8bc1,8e34,8e94]

Better.  Still 1792.
That's because the new float growing does not alter the rule for growing floats, only when to start them.

Deconstruct
--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
- - - -
X - - -
X X X -
X - - X
- X - -

--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
C - - -
B C D -
A - - B
- A - -

Try an alternate growing that uses strict logos.

Stop when there is a corner directly on top (a hat).

      { rules: [RULE.LEFT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT, RULE.RIGHT] },

Unknowns: 136
[0361,0392,03d2,03e1,...

That looks familar. 0361 is a seat joint.

So try rules for both.

      { rules: [RULE.LEFT_SEAT, RULE.RIGHT_SEAT, RULE.LEFT_SEAT] },
      { rules: [RULE.RIGHT_SEAT, RULE.LEFT_SEAT, RULE.RIGHT_SEAT] },
      { rules: [RULE.LEFT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT, RULE.RIGHT] },

Unknowns: 32
[1661,16d2,16e1,17c1,1c78,1cc1,1ce1,1d61,2992,29d2,29e1,2bc2,2cb4,2cc2,2cd2,2e92,4334,43b4,43d2,4794,4978,4994,49b4,4d34,8338,8378,83e1,8668,8678,86b4,8b68,8e38]  

Fixed 1792.  But still 32 more to go.

Deconstruct
Rr------:--RgRg--:--RbRb--:Ry------
1661
- - - -
X - - -
- X X -
- X X -
X - - -

1661 [0021,0004,0012,0004] 0123+++

Fails because it starts growing a logo on the second layer.
My TMAM works because of the flat layer removal.
Adding my additional flat removal code fixes 3 out of the first 4.

But let's try something else.

Combined both alternate growing methods.
Again fixes 3 out of the first 4.
Run all to check...
Still runing with only 4 rules.

Unknowns: 8
[16d2,1c78,29e1,2cb4,43d2,4978,83e1,86b4]

Only 8 to go.  No new failures, which is good news.

Deconstruct
--Rr----:Rg--RgRg:--RbRb--:Ry------
16d2
- - - - 
X - - - 
- X X - 
X - X X 
- X - - 

C - - -
- C B -
C - A B
- A - -

16d2 [0042,0048,0121] 012++

Saddle shape

This one fails because...
The 1 in layer 2 does not start a logo becuase it thinks its peer can claim it.
Which is true, but because in strict logo mode, the peer stops growing at this point.
But it doesn't know this.
It's peer has a hat, which makes it (the peer) stop growing.

I could try strict growing rules, that is, always grow in the direction of the rule.
I think that would fail for this shape, because it has two logos start on layer 2,
that grow in opposite directions.

Rule //\ and >>< find it.

Deconstruct
------Rr:RgRgRg--:----RbRb:Ry------
1c78
- - - -
X - - -
- - X X
X X X -
- - - X

Added peer hat checking.

Knowns: 20320
Unknowns: 0

Done!

Trying to simplify the grow logic...
  nextQuad &&
      (!peerQuad || topPeer) &&
      !topQuad &&
      (!passedPart || (passedDir == prevDir && !sideQuad))

Unknowns: 8
[16e1,1ce1,29d2,2cd2,43b4,49b4,8378,8678]

Deconstruct
Rr------:--RgRgRg:--RbRb--:Ry------
16e1
- - - -
X - - -
- X X -
- X X X
X - - -

16e1 [0021,000c,0012,0004] 0123+++

This starts a 2-layer half-logo on layer 2, but rest of layer 2 should be output as a flat.

Trying to remove superparts...

Deconstruct
Rr----Rr:--RgRg--:Rb--Rb--:Ry------
1569
- - - -
X - - -
X - X -
- X X -
X - - X

PARTS [0048,0121,0004,0001]
1569 [0121,0048,0004,0001] 012++3+

This fails because stacking attempts to put the 4 on top of the 121 first.

My TMAM works ...
Becuase the 121 goes first, and the 48 and the 4 go next.

Maybe sort by half-logo height, tallest first?
Reverse the order they were found?

That works.  No longer need super parts.

Deconstruct
RrRrRrRr:Rg------:--RbRbRb:RyRyRyRy
fe1f
- - - -
X X X X
- X X X
X - - -
X X X X

RULES \/\
LAYER 0 \ 000f
>FLAT 000f
LAYER 1 / 0001
PASS  [0000,0001,0000,0000]
DIR   [null,"/",null,null]
LAYER 2 \ 000e
>QUAD 0008
PASS  [0021,0004,0000,0000]
DIR   ["\\","\\",null,null]
LAYER 3 - 000f
>PART 0121
>PART 0024
>QUAD 0004
>QUAD 0008
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [000f,0121,0024,0008,000c]
FOUND fe1f [000f,0121,0024,0008,000c] 01234++++

Deconstruct
RrRrRrRr:Rg------:--RbRbRb:RyRyRyRy
fe1f
- - - -
X X X X
- X X X
X - - -
X X X X

RULES <><
LAYER 0 < 000f
>FLAT 000f
LAYER 1 > 0001
PASS  [0000,0001,0000,0000]
DIR   [null,"/",null,null]
LAYER 2 < 000e
>PART 0021
>QUAD 0004
>QUAD 0008
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 3 - 000f
>FLAT 000f
PARTS [000f,0021,000c,000f]
FOUND fe1f [000f,0021,000c,000f] 0123+++

Truth table v2
- - - -
A B C D
E F G H
- - - -

M N O P - Passed in parts 

F - Current corner
Q - Passed in direction
R - Current rule:
  - flat (eject)
  | stack up
  \ float left - seat
  / float right - seat
  < float left - strict
  > float right - strict

A B C D E F G H M N O P Q R
. . . . . 0 . . . . . . . .  NOP
. 1 . . . 1 . . . 0 . . . |   >B
. 1 . . . 1 . . . 1 . . | |  S>B

A B C D E F G H M N O P Q R
1 . . . 0 1 . . . 0 . . . \   >A
1 . . . 1 1 . . 1 0 . . . \   >A
1 . . . 0 1 . . . 1 . . / \  S>A
0 . 1 . . 1 0 0 . 0 . . . \   >C
0 . 1 . . 1 1 0 . 0 1 . . \   >C
0 . 1 . . 1 0 0 . 1 . . \ \  S>C
. . 1 . . 1 0 . . 0 . . . /   >C
. . 1 . . 1 1 . . 0 1 . . /   >C
. . 1 . . 1 0 . . 1 . . \ /  S>C
1 . 0 . 0 1 . 0 . 0 . . . /   >A
1 . 0 . 1 1 . 0 1 0 . . . /   >A
1 . 0 . 0 1 . 0 . 1 . . / /  S>A

A B C D E F G H M N O P Q R
1 0 . . 0 1 . . . 0 . . . <   >A
1 0 . . 1 1 . . 1 0 . . . <   >A
1 0 . . 0 1 . . . 1 . . > <  S>A
0 0 1 . . 1 0 0 . 0 . . . <   >C
0 0 1 . . 1 1 0 . 0 1 . . <   >C
0 0 1 . . 1 0 0 . 1 . . < <  S>C
0 0 1 1 . 1 0 . . 0 . . . <   >C
0 0 1 1 . 1 1 . . 0 1 . . <   >C
0 0 1 1 . 1 0 . . 1 . . < <  S>C
. 0 1 . . 1 0 . . 0 . . . >   >C
. 0 1 . . 1 1 . . 0 1 . . >   >C
. 0 1 . . 1 0 . . 1 . . < >  S>C
1 0 0 . 0 1 . 0 . 0 . . . >   >A
1 0 0 . 1 1 . 0 1 0 . . . >   >A
1 0 0 . 0 1 . 0 . 1 . . > >  S>A
1 0 0 1 0 1 . . . 0 . . . >   >A
1 0 0 1 1 1 . . 1 0 . . . >   >A
1 0 0 1 0 1 . . . 1 . . > >  S>A

Trying to simplify 5 part solutions

Deconstruct
------Rr:RgRgRg--:Rb--Rb--:Ry------
1578
- - - -
X - - -
X - X -
X X X -
- - - X

RULES <><
LAYER 0 < 0008
PASS  [0000,0000,0008,0000]
DIR   [null,null,"\\",null]
LAYER 1 > 0007
>QUAD 0001
>PART 0048
PASS  [0000,0000,0002,0000]
DIR   [null,null,"/",null]
LAYER 2 < 0005
>QUAD 0001
>PART 0042
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 3 - 0001
>FLAT 0001
PARTS [0048,0042,0001,0001,0001]
FOUND 1578 [0048,0042,0001,0001,0001] 01234++++

1578 [0048,0003,0005,0001] 0123+++

My TMAM works because after it ejects 48, the remainder of layer 2 is a flat.

Skim's starts growing another logo seat on top of the 48.

Teach flat logic about hats?

That worked - Now all 5 parts solutions only use the scafold as the 5th part.

Trying to simplify the grow rule again...

      nextQuad &&
      !topQuad &&
      !(peerQuad && !topPeer) &&
      (!passedPart || (passedDir == prevDir && !sideQuad))

Unknowns: 116
[35b4,35e1,3a78,3ad2...


Deconstruct
----Rr--:RgRg--Rg:Rb--Rb--:RyRy----
35b4
- - - -
X X - -
X - X -
X X - X
- - X -

PARTS [2424,0018,0001,0001]

35b4 [2424,0009,0001,0001,000f] 01234++++

This is supposed to find a 4-layer logo, 3 flats and a 5th layer.

But it starts a logo 18 rather than ejecting the flat.

Starting to look like I need to handle finding flat layers like growing logos.
The logic so far:
- no passed parts - support the layer above
- has passed parts - layer without passed parts supports layer above
  - in strict mode, hats modify passed layer.

- Why can't the indiviual quads be ejected when logo growing fails?
- It can, but that's what makes the grow rule complex / contain a heuristic.
- Maybe we're just shifting the logic from logos to flats.
- Might make sense to do that if we can make a set of flat rules, like...
  - must support layer above
  - must not contain corners claim by floats below
  - etc.
- Also, flats are all on the same layer, so can/must be done before floats.  They grow sideways.

Created a findFlat() method to put the logic in one place.

Tried ejecting just the corners that were not claimed and supporting the corner above (hat).
But 35b4 fails because 8 on the second layer is not ejected and it attempts to grow a logo there.
Need to eject all corners when a flat is found?

Try ejecting all corners except those claimed.
This fixed 0x35b4, 0x35e1, 0x3a78, 0x3ad2.
Note: still running with simplified logo finding.

Something is bad.

Unknowns: 16466
[0112,0116,0118,011a...

0112 [0012,0001] 01+

Maybe parts are out of order now?
Seems to be missing the flat part from the parts list.
Fixed a bug.

It worked!

Truth table v3
- - - -
A B C D
E F G H
- - - -

F - Current corner
P - Passed in part
Q - Passed in direction:
  \ left
  / right
R - Current rule:
  | stack up
  \ float left (seat)
  / float right (seat)
  < float left (strict)
  > float right (strict)

A B C D E F G H P Q R
. . . . . 0 . . . . .  NOP
. 1 . . . 1 . . 0 . |   |B
. 1 . . . 1 . . 1 | |  S|B

A B C D E F G H P Q R
1 . . . . 1 . . 0 . \   \A
1 . . . 0 1 . . 1 / \  S\A
0 . 1 . . 1 . 0 0 . \   /C
0 . 1 . . 1 0 0 1 \ \  S/C
. . 1 . . 1 . . 0 . /   /C
. . 1 . . 1 0 . 1 \ /  S/C
1 . 0 . . 1 . 0 0 . /   \A
1 . 0 . 0 1 . 0 1 / /  S\A

A B C D E F G H P Q R
1 0 . . . 1 . . 0 . <   \A
1 0 . . 0 1 . . 1 / <  S\A
0 0 1 . . 1 . 0 0 . <   /C
0 0 1 . . 1 0 0 1 \ <  S/C
0 0 1 1 . 1 . . 0 . <   /C
0 0 1 1 . 1 0 . 1 \ <  S/C
. 0 1 . . 1 . . 0 . >   /C
. 0 1 . . 1 0 . 1 \ >  S/C
1 0 0 . . 1 . 0 0 . >   \A
1 0 0 . 0 1 . 0 1 / >  S\A
1 0 0 1 . 1 . . 0 . >   \A
1 0 0 1 0 1 . . 1 / >  S\A

Try mixing rules...

      { rules: [RULE.LEFT, RULE.RIGHT_SEAT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT_SEAT, RULE.RIGHT] },

Knowns: 19710
Unknowns: 610
[1312,1316,1396,1642...

Deconstruct
--Rr----:Rg------:RbRb----:Ry------
1312
- - - -
X - - -
X X - -
X - - -
- X - -

1312 [0012,0003,0001] 012++

This is failing because it is creating 1212.
That's a bug.  The bug is deleting the flat from the layer before passing it to the growing function.
Fixed it by not deleting the flat part, instead skip quads that are in the flat part.

Try this...

      { rules: [RULE.LEFT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT, RULE.RIGHT] },
      { rules: [RULE.LEFT, RULE.RIGHT_SEAT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT_SEAT, RULE.RIGHT] },

This works, but probably not helpful since it's probably easier if all the rules are the same type.

Try this...
      { rules: [RULE.LEFT, RULE.RIGHT_SEAT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT_SEAT, RULE.RIGHT] },

Unknowns: 56
[1642,1643,16c3,16d2,1792,17c2,17c3,1c48,1c49,1c69,1c78,1d38,1d68,1d69,2981,2983,29c3,29e1,2b61,2bc1,2c84,2c86,2c96,2cb4,2e34,2e94,2e96,3fc3,4312,4316,4396,43d2,4792,47c2,4918,491c,493c,4978,4d38,4d3c,4d68,6f96,8321,8329,8369,83e1,8624,862c,863c,86b4,8b61,8bc1,8e34,8e94,9f69,cf3c]

Try this...
      { rules: [RULE.LEFT, RULE.RIGHT, RULE.LEFT] },
      { rules: [RULE.RIGHT, RULE.LEFT, RULE.RIGHT] },

Unknowns: 40
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,19c1,1b61,1bc1,1c94,2392,26c2,2792,27c2,2938,2c68,36c2,39c1,4361,4634,49c1,4c94,4e34,4e94,6392,6c94,8392,86c2,8938,8c68,8d38,8d68,9361,9c68,c634,c938]

Building a circuit

Notes
- Need to keep a parts list.  Might need to be able to add to beginning and end of list.
- Not clear yet what I want on the bus.  Could be corners or layers.
- If corners, then adjacent quads would be offset in time.  Assuming serial design.
- If layers, then adjacent quads would be rotations w/analyzer.
- MyTmam uses layers, and handles all four sides with four modules in parallel.
- layers are processed iteratively.  The output of each step is input to the next.  This lends well to a serial design.
- The quads in each layer could be in parallel, or in serial.
- parallel would be faster and bigger than serial.
- I want to try to build one module that handles all 16 quads, so that would be serial.
- There are 4 rule sets.  These would probably be done in parallel with different cores.
- Could skip interations for shapes with fewer layers.
- Could build a combinitorial / functional version first and then convert to serial.

It would have to go something like...

- setup working data
- layer 1+2: flat, quad 1 2 3 4
- layer 2+3: flat, quad 1 2 3 4
- layer 3+4: flat, quad 1 2 3 4
- layer 4  : flat, quad 1 2 3 4 - stacks parts, but always ejects
- finalize parts
- verification / stacking

The flat logic...

Inputs
- above layer (shape)
- below layer (shape)
- passed in parts (boolean[4])

Outputs
- flat part (shape) - optional
- supports (boolean)

Method
above   A B C D
below   E F - -
passed  X - - - 
result  - F - -
supports: yes

Make a candidate part by taking below layer and removing the corners corresponding to the passed in parts.
If the result supports the above layer (has any quad in common / stack makes 2 layers), then output the part.
If found, then remove those corners from the float finding.

Notes
- Could make a negative image of the passed part and have the corners of the below part fall in the holes, then take the top layer.
- This step (finding the flat) has to be done before the floats because the quads in the flat part need to be skipped, or perhaps
short circuit the float finding to always eject the corners in those quads.
- Checking if it supports requires all 4 quads.  So either a layer operation, or aggregate the quads.
- If I do the float checking in series (1 module) then the passed values are generated in series / stream.
- Aggregate the result could just be a serial OR, check if any are true.  Like a SR latch.  would need a tick to reset between iterations.

The float logic...

quad 1 can pass a part to the next layer quad 2 or 4, and so forth.
1 -> 4,2
2 -> 1,3
3 -> 2,4
4 -> 3,1

1 -> 4,2
3 -> 2,4

2 -> 1,3
4 -> 3,1

A B C D
E F G H

Rule: <
1\4 E D A - - H
1/2 E B A G C F
2\1 F A B - - E
2/3 F C B H D G
3\2 G B C - - F
3/4 G D C E A H
4\3 H C D - - G
4/1 H A D F B E

pass logic
  nextQuad &&
  !topQuad &&
  !(peerQuad && !topPeer) &&
  !(passedPart && !((passedDir == prevDir) && !sideQuad))

eject logic
  !nextQuad ||
  topQuad ||
  !(!peerQuad || topPeer) ||
  !(!passedPart || (!(passedDir == prevDir) || sideQuad))

Inputs
- 5 quads (boolean): nextQuad, topQuad, peerQuad, topPeer, sideQuad
- value of the working quad (corner)
- passed in part (shape)
- passed in dir (might be the part on different wires)
- flat found (boolean)
- flat corner (shape)?

Outputs
- Passed part (shape) and direction (wire?)
- Eject to flat part (shape).
- Eject to parts list (shape).

Method
If there is a passed part, put the working corner on top of it, like a half-logo stacking.
Perform the logic and either pass the part (left or right) or eject it (parts list or layer list).

Pass part
- float found
- not a flat part
- prev passed does not matter
Eject to layer list (flat part)
- no prev passed part (current part is 1 layer)
- flat part found by flat finder _or_
- float not found
Eject to parts list
- prev passed part (current part is more than 1 layer)
- float not found

Notes
- There are 4 quads, each quad has 2 directions.
- Each quad has 4 outputs, 2 pass directions and 2 eject directions (layer list or part list).
- Should probably handle left and right direction attempts in the same module.
- One direction would have priority - that's the bias.
- Probably don't need to handle strict and seat versions in the same module, as those would probably be different cores.
- quad 4 may output a passed part to next layer quad 1.
- So would need to delay quad 1 processing at least the time it takes to compute the passed data.
- Layer parts seems to be at most 2 corners.  It seems to be the half the logo is not on.
- Maybe not.  Might need to have the flat finder part as part of the layer parts.
- Use shapes to compute the logic?
- Do all 8 at the same time?

- Flat checking takes 4 ticks.  Could take another 4 ticks to do float checking using the results of flat checking.

Issues
- When passing left  and the input order is 1-2-3-4, then the output order is 4-1-2-3. not okay?
- When passing right and the input order is 1-2-3-4, then the output order is 2-3-4-1. okay?
- Need to calc logic relative to the top layer quad?

Finalize
Make half logo parts.
Combine lists of flats and floats.
Sort by bottom layer.

Verify / Stacking
Determine the stacking order.

Summary

Process layers in pairs starting with the bottom 2 layers.
Floats are "grown" 1 layer at a time, bottom up.
Each corner has 4 possible outputs.  Passed to the next layer (left or right), eject to flat part, or eject as a floating part.

Layers are processed bottom up.
Each layer may eject one flat part and up to two floating parts to the final parts list.
Floats are "grown" by passing parts from one layer to the next.
For each corner in the current layer:
- Flat check
  - If no passed in part and supports layer above, eject it to the layer's flat part.
- Float check
  - If passed in part, stack it with the current corner.
  - If floating to layer above, pass the result to the next layer.
  - Otherwise eject the passed in part as a floating part.
- Otherwise
  - Any corners left over are ejected to the layer's flat part.

Supporting the layer above means any corner in the candidate flat part has a corner above it.

Floating to the layer above is true only when the two "Laws of Logos" are obeyed.
- Floating parts only occupy one side (2 adjacent quads) of a shape.
- 3 and 4 layer floating parts have voids (empty spaces).

Revise

A fast deconstruction method
A deconstuctor takes a shape as an input and outputs a list of primative shapes that can be used to build the input shape.
This method is fast because each layer is handled only once and all the corners in a layer can be processed in parallel.

Overview
- Layers are processed bottom up.
- Each layer may eject one flat part and zero or more floating parts to the final parts list.
- Floats are "grown" by passing parts from one layer to the next.
- First perform a flat check on the current layer, and then perform a float check for each corner not in the flat part.

Flat check
- Create a candidate flat part by taking the current layer and removing any corners claimed by floats growing from the layer below.
- If the candidate flat part supports the layer above, eject the corners it contains to the layer's flat part.

Float check
- For each corner in the current layer that is not in the flat part (if any)...
- Perform floating logic and do one of the following based on the result and if a part was passed in:
- Floating and no passed in part - Stack the current corner with the corner from the layer above and pass the result.
- Floating and has passed in part - Stack passed in part with corner from layer above and pass the result.
- Not floating and no passed in part - Eject the current corner to the layer's flat part.
- Not floating and has passed in part - Eject the passed in part to the final parts list.

Eject flat
- Combine all corners ejected to the layer's flat part (if any) and eject it to the final parts list.

Float logic
- floating laws
- biases and rules
- pruning

Example (logo):
004b
- - - -
- - - -
- - X -
X X - X

Rule: <><
layer 1: bias < (left with pruning)
- no flat part
- quad 1: no float - eject 0001 to flat part
- quad 2: fails to float right (2>3) (peer conflict) - eject 0002 to flat part
- quad 4: float left (4<3), pass 0048 to quad 3.
- flat: combine corners from quads 1 and 2, eject 0003.
layer 2: bias > (right with pruning)
- no flat part - quad 3 is claimed.
- quad 3 - no float, has passed part - eject passed part 0048.
- flat: none
done

Stacking order

5th layer

-----
21-Feb-2023

Try working top down.

changes
- layerNum 3..0
- nextLayer = layerNum-1
- simpleStack - reverse the args
- partList sorting (maybe?)
- stacking (maybe?)

Unknowns: 10694
0138,0178,0192,01d2...

0138
- - - -
- - - -
X - - -
X X - -
- - - X

RULES <><
LAYER 2 < 0001
>FLAT 0001
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 1 > 0003
>QUAD 0002
PASS  [0000,0000,0000,0001]
DIR   [null,null,null,"\\"]
LAYER 0 < 0008
>PART 0018
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [0018,0002,0001]
...

This is ejecting the flat on the top layer, which should be the start of a float.
Maybe need to do floats before flats?

Try taking out flat finding.
That worked for these 4 shapes.

Unknowns: 10822
0318,031c,0324,032c...

That got a little worse.

Deconstruct
------Rr:Rg------:RbRb----:--------
0318
- - - -
- - - -
X X - -
X - - -
- - - X

RULES <><
LAYER 2 < 0003
>QUAD 0001
PASS  [0002,0000,0000,0000]
DIR   ["\\",null,null,null]
LAYER 1 > 0001
>PART 0021
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 0 < 0008
>QUAD 0008
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [0008,0021,0001]

RULES ><>
LAYER 2 > 0003
>QUAD 0001
PASS  [0002,0000,0000,0000]
DIR   ["\\",null,null,null]
LAYER 1 < 0001
>PART 0021
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 0 > 0008
>QUAD 0008
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [0008,0021,0001]

RULES \/\
LAYER 2 \ 0003
>QUAD 0001
PASS  [0002,0000,0000,0000]
DIR   ["\\",null,null,null]
LAYER 1 / 0001
>PART 0021
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 0 \ 0008
>QUAD 0008
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [0008,0021,0001]

RULES /\/
LAYER 2 / 0003
>QUAD 0001
PASS  [0002,0000,0000,0000]
DIR   ["\\",null,null,null]
LAYER 1 \ 0001
>PART 0021
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
LAYER 0 / 0008
>QUAD 0008
PASS  [0000,0000,0000,0000]
DIR   [null,null,null,null]
PARTS [0008,0021,0001]

NOT FOUND 0318

0318 [0018,0003] 01+

This is making a 2-layer logo (21) on top.
I don't think that should be grown in strict mode.
What would be topQuad is now on the side.
Maybe need to change topQuad to be the part on the working layer, above the nextQuad.
But that's the same as sideQuad.
No, pretty sure topQuad should be the same, nextQuads[quad].

5th layer shapes

48432 - 44328 = 4104 5th layer shapes

3422, 342c, 3431, 3443

{0100:0100:0010:1100+struct}
{0011:0100:0010:1100+struct}
{1000:1100:0010:1100+struct}
{1100:0010:0010:1100+struct}

3422
--Cr----:--Cg----:----Cb--:CyCy----

a121
Cr------:--Cg----:Cb------:--Cy--Cy

3c11
Cr------:Cg------:----CbCb:CyCy----

12-Jul-2023
Looking for trashless

Run the constructor with just 1-layer flats and 2-layer floats...

Stats
ToDo:  12308
Total: 44420

    Name   Shapes     Keys
 1-layer    28112     3885
 2-logo     44420     6143

ffff ST 00ff 00ff (3,1,0)
  00ff ST 000f 000f (1,1,0)
    000f P            (0,1,0)
    000f P            (0,1,0)
  00ff ST 000f 000f (1,1,0)
    000f P            (0,1,0)
    000f P            (0,1,0)
0012 P            (1,1,0)
Shape not found: 0121
Shape not found: 1212
004b ST 0042 0009 (2,4,0)
  0042 P            (1,1,0)
  0009 P            (0,1,0)
fe1f ST 00f6 081f (4,3,0)
  00f6 ST 000f 0006 (1,1,0)
    000f P            (0,1,0)
    0006 P            (0,1,0)
  081f ST 0081 000f (2,1,0)
    0081 P            (1,1,0)
    000f P            (0,1,0)
Rocket: fe1f ST(00f6 ST(000f 0006) 081f ST(0081 000f))

Turn off 5th layer...

    Name   Shapes     Keys
 1-layer    28112     3885
 2-logo     42324     5855

ffff  00ff 00ff (0,1,0)
  00ff  000f 000f (0,79,0)
    000f P            (0,15,0)
    000f P            (0,15,0)
  00ff  000f 000f (0,79,0)
    000f P            (0,15,0)
    000f P            (0,15,0)
0012 P            (1,1,0)
Shape not found: 0121
Shape not found: 1212
004b  0042 0009 (1,10,0)
  0042 P            (1,1,0)
  0009 P            (0,3,0)
fe1f  00f6 081f (1,16,0)
  00f6  000f 0006 (0,19,0)
    000f P            (0,15,0)
    0006 P            (0,3,0)
  081f  0081 000f (1,11,0)
    0081 P            (1,1,0)
    000f P            (0,15,0)
Rocket: fe1f undefined(00f6 undefined(000f 0006) 081f undefined(0081 000f))

Add 2-layer corners...
And change flats to only 1 corner...

Stats
ToDo:  0
Total: 42324

    Name   Shapes     Keys
 1-flats    28112     3885
 2-float    42324     5855
 2-stack    42324     5855

0001 P            (0,1,0)
0011 P            (0,1,0)
0012 P            (2,1,0)
Shape not found: 0121
Shape not found: 1212
ffff ST 00ff 00ff (7,79,0)
  00ff ST 0099 0066 (3,14,0)
    0099 ST 0088 0011 (1,2,0)
      0088 P            (0,1,0)
      0011 P            (0,1,0)
    0066 ST 0044 0022 (1,2,0)
      0044 P            (0,1,0)
      0022 P            (0,1,0)
  00ff ST 0099 0066 (3,14,0)
    0099 ST 0088 0011 (1,2,0)
      0088 P            (0,1,0)
      0011 P            (0,1,0)
    0066 ST 0044 0022 (1,2,0)
      0044 P            (0,1,0)
      0022 P            (0,1,0)
004b ST 0042 0009 (4,10,0)
  0042 P            (2,1,0)
  0009 ST 0008 0001 (1,2,0)
    0008 P            (0,1,0)
    0001 P            (0,1,0)
fe1f ST 00f6 081f (11,10,0)
  00f6 ST 0022 00d4 (4,6,0)
    0022 P            (0,1,0)
    00d4 ST 000d 0004 (3,1,0)
      000d ST 0005 0008 (2,6,0)
        0005 ST 0004 0001 (1,2,0)
          0004 P            (0,1,0)
          0001 P            (0,1,0)
        0008 P            (0,1,0)
      0004 P            (0,1,0)
  081f ST 0081 000f (6,11,0)
    0081 P            (2,1,0)
    000f ST 0009 0006 (3,14,0)
      0009 ST 0008 0001 (1,2,0)
        0008 P            (0,1,0)
        0001 P            (0,1,0)
      0006 ST 0004 0002 (1,2,0)
        0004 P            (0,1,0)
        0002 P            (0,1,0)

Floating charts

1361
O - - -
O O - -
- O O -
O - - -

O - - -
\ \ - -
- > \ -
/ - - -

2 - - -
0 1 - -
- 0 1 -
0 - - -

C - - -
A B - -
- A B -
A - - -

Input
- - - - - - O O O O
- - - O O O O O O -
- O O O O - O O - -
O O - O - - O - - -

Output
O - - - O - - O - O
O O - - O O - O O -
O O O - O O O - - -
O O O O - - - - - -

{Ru------}
{Ru------:--Ru----} {Ru------:--Ru----:Ru------} {Ru------:--Ru----:Ru------:--Ru----}
{--Ru----:Ru------} {--Ru----:Ru------:--Ru----} {--Ru----:Ru------:--Ru----:Ru------}

{Ru------}
{Ru------:--Ru----} {Ru------:--Ru----:Ru------} {Ru------:--Ru----:Ru------:--Ru----}
{Ru------:------Ru} {Ru------:------Ru:Ru------} {Ru------:------Ru:Ru------:------Ru}

23c4      23c4
- - - -   - - - -
- D - -   - C - -
B C - -   C B - -
- - C B   - - B A
- - A -   - - A -

1e5a    
- - - - 
B - - - 
- C C B 
B - A - 
- A - B 


Tried turing off flat finding.

Knowns: 16684
Unknowns: 3636
[0126,012e,0163,016c,018c,018e,01c6,01c9,0219,021d,024c,024d,0293,029c,02c6,02c9,03b4,03c6,03c9,0423,042b,0436,0439,0489,048b,0493,049c,0678,0693,069c,07b4,0813,0817,0836,0839,0846,0847,0863,086c,0963,096c,09b4,0c36,0c39,0ce1,0db4,0de1,0e78,1126,112e,1163,1165,1167,116c,118c,118e,11a3,11a9,11ab,11c5,11c6,11c9,11cd,11e3,11e5,11e7,11e9,11eb,11ed,11ef,1219,121d,1239,1253,125c,1262,1263,1264,1265,1266,1267,126c,127c,1293,129c,12a9,12ac,12d3,12e2,12e3,12e4,12e5,12e6,12e7,12e8,12e9,12ea,12eb,12ec,12ed,12ee,12ef,138c,138e,13c5,13c6,13c9,13cd,1578,15a3,15a9,15ab,15d2,1639,1653,1659,1693,169c,16a9,16ac,16c4,16c6,16c7,16c8,16c9,16ca,16cb,16cc,16ce,16cf,16e1,16e9,178c,178e,1813,1817,1836,1839,1856,1859,1879,1893,18a3,18a6,18c4,18c5,18c6,18c8,18c9,18cc,18cd,18d6,18e2,18e3,18e4,18e5,18e6,18e7,18e8,18e9,18ea,18eb,18ec,18ed,18ee,18ef,1926,192e,1963,1965,1967,196c,1a35,1a36,1a37,1a39,1a63,1a65,1a67,1a6c,1a93,1a95,1a9c,1a9d,1ab5,1ab6,1ab7,1abc,1abd,1abe,1abf,1ac5,1ac6,1ac9,1acd,1ae3,1ae5,1ae7,1ae9,1aeb,1aed,1aef,1c36,1c39,1c53,1c59,1c62,1c63,1c64,1c66,1c6a,1c6c,1c6e,1c93,1ca3,1ca6,1ce1,1ce3,1d26,1d2e,1e35,1e36,1e37,1e39,1e53,1e59,1e93,1e95,1e9c,1e9d,1eb5,1eb6,1eb7,1ebc,1ebd,1ebe,1ebf,2126,212e,2136,2156,215c,2163,216c,2191,2193,2198,2199,219a,219b,219c,21a3,21ac,21bc,21d1,21d3,21d4,21d5,21d6,21d7,21d8,21d9,21da,21db,21dc,21dd,21de,21df,21e3,2219,221d,224c,224d,2253,2256,2257,2293,229a,229b,229c,22c6,22c9,22ca,22ce,22d3,22d6,22d7,22da,22db,22de,22df,234c,234d,23b4,23c6,23c9,23ca,23ce,2423,242b,2436,2439,2453,2459,2463,24a6,24a9,24b6,24c4,24c6,24c8,24c9,24ca,24cc,24ce,24d1,24d3,24d4,24d5,24d6,24d7,24d8,24d9,24da,24db,24dc,24dd,24de,24df,24e9,2536,2539,253a,253b,2563,256a,256c,256e,2579,257a,257b,257c,257d,257e,257f,2593,259a,259b,259c,25c6,25c9,25ca,25ce,25d3,25d6,25d7,25da,25db,25de,25df,2619,261d,2693,269a,269b,269c,27b4,2936,2956,295c,2963,296c,29a3,29a6,29c4,29c5,29c6,29c8,29c9,29cc,29cd,29d2,29d6,2a53,2a56,2a57,2ab4,2ae1,2b4c,2b4d,2c36,2c39,2c53,2c59,2c63,2c91,2c93,2c95,2c98,2c99,2c9c,2c9d,2ca3,2ca6,2cd2,2cd3,2d36,2d39,2d3a,2d3b,2d63,2d6a,2d6c,2d6e,2d79,2d7a,2d7b,2d7c,2d7d,2d7e,2d7f,2da3,2da6,2e19,2e1d,3126,312e,3163,3165,3167,316c,318c,318e,31a3,31a9,31ab,31c5,31c6,31c9,31cd,31e3,31e5,31e7,31e9,31eb,31ed,31ef,3219,321d,324c,324d,3253,3256,3257,3293,329a,329b,329c,32c6,32c9,32ca,32ce,32d3,32d6,32d7,32da,32db,32de,32df,334c,334d,338c,338e,3423,342b,3435,3436,3437,3439,3453,3456,3457,3459,345b,345c,345d,345e,345f,3463,3465,3467,346b,346d,346f,3479,347a,347b,347c,347d,347e,347f,34a6,34a9,34ac,34ae,34b5,34b6,34b7,34bc,34bd,34be,34bf,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e3,34e5,34e7,34e9,34eb,34ed,34ef,3516,351a,351c,351e,3543,3549,354a,354b,3552,3558,355a,3578,358c,358e,35d2,3619,361d,3629,3649,3669,3678,3693,369a,369b,369c,3716,371a,371c,371e,3729,3743,3749,374a,374b,3752,3758,375a,3769,3778,3783,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,37b4,37d2,3813,3817,3836,3839,383a,383b,3856,3859,385c,385d,3879,387a,387b,387c,387d,387e,387f,3893,3897,389a,389b,389e,389f,38a3,38a6,38a7,38a9,38ab,38ac,38ad,38ae,38af,38b5,38b6,38b7,38bc,38bd,38be,38bf,38c4,38c5,38c6,38c7,38c8,38c9,38ca,38cb,38cc,38cd,38ce,38cf,38d3,38d6,38d7,38da,38db,38de,38df,38e2,38e3,38e4,38e5,38e6,38e7,38e8,38e9,38ea,38eb,38ec,38ed,38ee,38ef,3916,3926,392e,3963,3965,3967,396c,3986,3996,39b4,3a25,3a29,3a2c,3a2d,3a4c,3a4d,3a83,3a85,3a86,3a87,3aa1,3aa4,3aa5,3ab4,3ae1,3b16,3b25,3b29,3b2c,3b2d,3b43,3b44,3b45,3b46,3b47,3b4a,3b4b,3b4c,3b4d,3b4e,3b4f,3b83,3b85,3b86,3b87,3b96,3ba1,3ba4,3ba5,3bb4,3be1,3c13,3c17,3c23,3c2b,3c63,3c93,3cd3,3ce3,4231,4232,4233,4235,4236,4237,4239,424c,424d,4256,4259,426c,4279,42a9,42ac,42b1,42b2,42b3,42b5,42b6,42b7,42b8,42b9,42ba,42bb,42bc,42bd,42be,42bf,42c6,42c9,42d6,4356,435c,436c,4391,4393,4397,4398,4399,439a,439b,439c,439e,439f,43a9,43ac,43b4,43bc,43c6,43c9,4423,442b,4435,4436,4437,4439,4489,448b,4493,4495,449c,449d,44a6,44ac,44ae,44b5,44b6,44b7,44bc,44bd,44be,44bf,4578,45a6,45ac,45ae,45d2,4678,4689,468b,4693,4695,469c,469d,4789,478b,4846,4847,4853,485c,4863,486c,487c,4891,4893,4895,4898,4899,489c,489d,48a3,48a6,48b1,48b2,48b3,48b5,48b6,48b7,48b8,48b9,48ba,48bb,48bc,48bd,48be,48bf,48c6,48d3,4931,4932,4933,4936,4939,493a,493b,493d,493e,493f,4956,495c,4963,496c,49a3,49a6,49b4,49b6,49c6,4a35,4a36,4a37,4a39,4a63,4a65,4a67,4a6c,4a93,4a95,4a9c,4a9d,4ab5,4ab6,4ab7,4abc,4abd,4abe,4abf,4ac5,4ac6,4ac9,4acd,4ae3,4ae5,4ae7,4ae9,4aeb,4aed,4aef,4b56,4b5c,4b63,4b65,4b67,4b6c,4bc5,4bc6,4bc9,4bcd,4be3,4be5,4be7,4be9,4beb,4bed,4bef,4c23,4c2b,4c35,4c36,4c37,4c39,4d23,4d2b,4e78,5126,512e,5163,5165,5167,516c,518c,518e,51a3,51a9,51ab,51c5,51c6,51c9,51cd,51e3,51e5,51e7,51e9,51eb,51ed,51ef,5219,521d,5239,523a,523b,523d,523e,523f,524c,524d,5253,5256,5257,526a,526b,526c,526d,526e,526f,5279,527a,527b,527c,527d,527e,527f,5293,529a,529b,529c,52a3,52a6,52a7,52a9,52ab,52ac,52ad,52ae,52af,52b5,52b6,52b7,52bc,52bd,52be,52bf,52c6,52c9,52ca,52ce,52d3,52d6,52d7,52da,52db,52de,52df,52e3,52e5,52e7,52e9,52eb,52ed,52ef,531c,532c,533c,534c,534d,538c,538e,53b4,5423,542b,5435,5436,5437,5439,5489,548b,5493,5495,549c,549d,54a6,54ac,54ae,54b5,54b6,54b7,54bc,54bd,54be,54bf,5619,561d,5629,5649,5669,5689,568b,571c,5725,5729,572c,572d,5738,573c,5749,5768,5769,5783,5785,5786,5787,5788,5789,578a,578b,578c,578d,578e,578f,57b4,5813,5817,5836,5839,583a,583b,5846,5847,5859,585c,585d,5863,586a,586c,586e,5879,587a,587b,587c,587d,587e,587f,5893,5897,589a,589b,589e,589f,58a3,58a6,58a7,58a9,58ab,58ac,58ad,58ae,58af,58b5,58b6,58b7,58bc,58bd,58be,58bf,58c6,58c7,58ca,58cb,58ce,58cf,58d3,58d6,58d7,58da,58db,58de,58df,58e3,58e5,58e7,58e9,58eb,58ed,58ef,5916,5926,592e,5946,5947,5986,5996,59b4,5ab5,5ab6,5ab7,5abc,5abd,5abe,5abf,5ae3,5ae5,5ae7,5ae9,5aeb,5aed,5aef,5c13,5c17,5c23,5c2b,5c43,5c83,5cc3,5ce1,5d16,5d22,5d23,5d25,5d26,5d27,5d29,5d2a,5d2b,5d2c,5d2d,5d2e,5d2f,5d43,5d83,5d85,5d86,5d87,5d92,5d96,5db4,5dc2,5dc3,5de1,6126,612e,6135,6136,6137,613d,613e,613f,6153,6156,6157,6159,615b,615c,615d,615e,615f,6163,6165,6167,616c,6179,617a,617b,617c,617d,617e,617f,6191,6193,6195,6197,6198,6199,619a,619b,619c,619d,619e,619f,61a3,61a9,61ab,61ac,61b5,61b6,61b7,61bc,61bd,61be,61bf,61d1,61d3,61d4,61d5,61d6,61d7,61d8,61d9,61da,61db,61dc,61dd,61de,61df,61e3,61e5,61e7,61e9,61eb,61ed,61ef,6219,621d,624c,624d,6253,6256,6257,6293,629a,629b,629c,62c6,62c9,62ca,62ce,62d3,62d6,62d7,62da,62db,62de,62df,631c,632c,633c,634c,634d,63b4,63c6,63c9,63ca,63ce,6423,642b,6435,6436,6437,6439,6489,648b,6493,6495,649c,649d,64a6,64ac,64ae,64b5,64b6,64b7,64bc,64bd,64be,64bf,6516,651a,651c,651e,6543,6549,654a,654b,6552,6558,655a,6578,6589,658b,65d2,6619,661d,6689,668b,6716,671a,671c,671e,672c,673c,6743,6749,674a,674b,6752,6758,675a,6785,6786,6787,6788,6789,678a,678b,678c,678d,678e,678f,67b4,67d2,6846,6847,6853,6859,685c,685d,6863,686a,686c,686e,6879,687a,687b,687c,687d,687e,687f,6891,6893,6895,6897,6898,6899,689a,689b,689c,689d,689e,689f,68a3,68a6,68a7,68a9,68ab,68ac,68ad,68ae,68af,68b1,68b2,68b3,68b5,68b6,68b7,68b8,68b9,68ba,68bb,68bc,68bd,68be,68bf,68c6,68c7,68ca,68cb,68ce,68cf,68d3,68d6,68d7,68da,68db,68de,68df,68e3,68e5,68e7,68e9,68eb,68ed,68ef,6926,692e,6936,693d,693e,693f,6946,6947,69b6,69c6,69d6,6a19,6a1d,6a25,6a29,6a2c,6a2d,6a83,6a85,6a86,6a87,6aa1,6aa4,6aa5,6ab4,6ae1,6c23,6c2b,6c35,6c36,6c37,6c39,6c43,6c83,6cc3,6ce1,6e11,6e13,6e15,6e16,6e17,6e19,6e1a,6e1b,6e1d,6e1e,6e1f,6e25,6e29,6e2c,6e2d,6e43,6e78,6e83,6e85,6e86,6e87,6ea1,6ea4,6ea5,6eb4,6ec3,6ee1,7126,712e,7163,7165,7167,716c,718c,718e,71a3,71a9,71ab,71c5,71c6,71c9,71cd,71e3,71e5,71e7,71e9,71eb,71ed,71ef,7219,721d,724c,724d,7253,7256,7257,7293,729a,729b,729c,72c6,72c9,72ca,72ce,72d3,72d6,72d7,72da,72db,72de,72df,734c,734d,738c,738e,7423,742b,7435,7436,7437,7439,7489,748b,7493,7495,749c,749d,74a6,74ac,74ae,74b5,74b6,74b7,74bc,74bd,74be,74bf,7619,761d,7689,768b,7813,7817,7836,7839,783a,783b,7846,7847,7859,785c,785d,7863,786a,786c,786e,7879,787a,787b,787c,787d,787e,787f,7893,7897,789a,789b,789e,789f,78a3,78a6,78a7,78a9,78ab,78ac,78ad,78ae,78af,78b5,78b6,78b7,78bc,78bd,78be,78bf,78c6,78c7,78ca,78cb,78ce,78cf,78d3,78d6,78d7,78da,78db,78de,78df,78e3,78e5,78e7,78e9,78eb,78ed,78ef,7916,7926,792e,7946,7947,7986,7996,79b4,7a25,7a29,7a2c,7a2d,7a83,7a85,7a86,7a87,7aa1,7aa4,7aa5,7ab4,7ae1,7b16,7b25,7b29,7b2c,7b2d,7b43,7b46,7b47,7b83,7b85,7b86,7b87,7b96,7ba1,7ba4,7ba5,7bb4,7be1,7c13,7c17,7c23,7c2b,7c43,7c83,7cc3,7ce1,7d16,7d22,7d23,7d25,7d26,7d27,7d29,7d2a,7d2b,7d2c,7d2d,7d2e,7d2f,7d43,7d83,7d85,7d86,7d87,7d92,7d96,7db4,7dc2,7dc3,7de1,7e13,7e16,7e17,7e25,7e29,7e2c,7e2d,7e43,7e83,7e85,7e86,7e87,7ea1,7ea4,7ea5,7eb4,7ec3,7ee1,7f16,7f25,7f29,7f2c,7f2d,7f43,7f83,7f85,7f86,7f87,7f92,7f96,7fa1,7fa4,7fa5,7fb4,7fc2,7fc3,7fe1,8131,8132,8133,8136,8139,813a,813b,8156,815c,8171,8172,8173,8174,8175,8176,8177,8179,817a,817b,817c,817d,817e,817f,818c,818e,819c,81a6,81a9,81b6,81c6,81c9,81e9,8356,835c,8362,8363,8364,8365,8366,8367,836b,836c,836d,836f,8378,837c,839c,83a9,83ac,83c6,83c9,8453,8459,8462,8463,8464,8466,846a,846c,846e,8471,8472,8473,8474,8475,8476,8477,8479,847a,847b,847c,847d,847e,847f,8489,848b,8493,849c,84a3,84ac,84bc,84c9,84e3,8536,8539,853a,853b,8563,856a,856c,856e,8579,857a,857b,857c,857d,857e,857f,8593,859a,859b,859c,85c6,85c9,85ca,85ce,85d3,85d6,85d7,85da,85db,85de,85df,8631,8632,8633,8635,8636,8637,8639,8653,8659,8678,8679,8693,869c,86a9,86ac,86c9,8793,879a,879b,879c,87a9,87ac,87c6,87c9,87ca,87ce,87d3,87d6,87d7,87da,87db,87de,87df,8813,8817,8836,8839,883a,883b,8846,8847,8859,885c,885d,8863,886a,886c,886e,8879,887a,887b,887c,887d,887e,887f,8946,8947,8963,896a,896c,896e,89b4,8a59,8a5c,8a5d,8ab4,8ae1,8b46,8b47,8c13,8c17,8c36,8c39,8c3a,8c3b,8ce1,8db4,8de1,8e13,8e17,9126,912e,9163,9165,9167,916c,918c,918e,91a3,91a9,91ab,91c5,91c6,91c9,91cd,91e3,91e5,91e7,91e9,91eb,91ed,91ef,9219,921d,9239,923a,923b,923d,923e,923f,9253,9256,9257,925c,9262,9263,9264,9265,9266,9267,926a,926b,926c,926d,926e,926f,9279,927a,927b,927c,927d,927e,927f,9293,929a,929b,929c,92a3,92a6,92a7,92a9,92ab,92ac,92ad,92ae,92af,92b5,92b6,92b7,92bc,92bd,92be,92bf,92d3,92d6,92d7,92da,92db,92de,92df,92e2,92e3,92e4,92e5,92e6,92e7,92e8,92e9,92ea,92eb,92ec,92ed,92ee,92ef,931c,932c,933c,938c,938e,93b4,93c5,93c6,93c9,93cd,9453,9456,9457,9459,945b,945c,945d,945e,945f,9462,9463,9464,9465,9466,9467,946a,946b,946c,946d,946e,946f,9471,9472,9473,9474,9475,9476,9477,9479,947a,947b,947c,947d,947e,947f,9489,948b,9493,9495,949c,949d,94a3,94a6,94ac,94ae,94b5,94b6,94b7,94bc,94bd,94be,94bf,94c5,94c7,94c9,94cb,94cd,94cf,94d3,94d6,94d7,94da,94db,94de,94df,94e3,94e5,94e7,94e9,94eb,94ed,94ef,9516,951a,951c,951e,9526,952e,9543,9549,954a,954b,9552,9558,955a,9578,95d2,9619,961d,9639,9679,9689,968b,96c7,96c9,96cb,96cf,96e9,9813,9817,9836,9839,983a,983b,9846,9847,9859,985c,985d,9863,986a,986c,986e,9879,987a,987b,987c,987d,987e,987f,9926,992e,9946,9947,9a25,9a29,9a2c,9a2d,9a46,9a47,9a83,9a85,9a86,9a87,9aa1,9aa4,9aa5,9ab4,9ae1,9b1c,9b25,9b29,9b2c,9b2d,9b3c,9b44,9b45,9b46,9b47,9b49,9b4a,9b4b,9b4c,9b4d,9b4e,9b4f,9b83,9b85,9b86,9b87,9ba1,9ba4,9ba5,9bb4,9be1,9c13,9c17,9c36,9c39,9c3a,9c3b,9c43,9c83,9cc3,9ce1,9d16,9d1a,9d1c,9d1e,9d22,9d23,9d25,9d26,9d27,9d29,9d2a,9d2b,9d2d,9d2e,9d2f,9d43,9d49,9d4a,9d4b,9d52,9d58,9d5a,9d78,9d83,9db4,9dc3,9de1,a126,a12e,a135,a136,a137,a13d,a13e,a13f,a153,a156,a157,a159,a15b,a15c,a15d,a15e,a15f,a163,a165,a167,a16c,a179,a17a,a17b,a17c,a17d,a17e,a17f,a18c,a18e,a195,a197,a19c,a19d,a19e,a19f,a1a3,a1a9,a1ab,a1b5,a1b6,a1b7,a1bc,a1bd,a1be,a1bf,a1c5,a1c6,a1c9,a1cd,a1d3,a1d6,a1d7,a1da,a1db,a1de,a1df,a1e3,a1e5,a1e7,a1e9,a1eb,a1ed,a1ef,a219,a21d,a24c,a24d,a253,a256,a257,a293,a29a,a29b,a29c,a2c6,a2c9,a2ca,a2ce,a2d3,a2d6,a2d7,a2da,a2db,a2de,a2df,a31c,a32c,a33c,a34c,a34d,a38c,a38e,a423,a42b,a435,a436,a437,a439,a453,a456,a457,a459,a45b,a45c,a45d,a45e,a45f,a463,a465,a467,a46b,a46d,a46f,a479,a47a,a47b,a47c,a47d,a47e,a47f,a489,a48b,a493,a495,a49c,a49d,a4a6,a4ac,a4ae,a4b5,a4b6,a4b7,a4bc,a4bd,a4be,a4bf,a4c5,a4c7,a4c9,a4cb,a4cd,a4cf,a4d3,a4d6,a4d7,a4da,a4db,a4de,a4df,a4e3,a4e5,a4e7,a4e9,a4eb,a4ed,a4ef,a579,a57a,a57b,a57c,a57d,a57e,a57f,a5d3,a5d6,a5d7,a5da,a5db,a5de,a5df,a619,a61d,a629,a649,a669,a678,a689,a68b,a813,a817,a836,a839,a83a,a83b,a846,a847,a859,a85c,a85d,a863,a86a,a86c,a86e,a879,a87a,a87b,a87c,a87d,a87e,a87f,a916,a926,a92e,a946,a947,a986,a996,ab16,ab1a,ab1c,ab1e,ab2c,ab34,ab3c,ab43,ab44,ab45,ab46,ab47,ab49,ab4a,ab4b,ab4c,ab4d,ab4e,ab4f,ab86,ab94,ab96,abb4,ac13,ac17,ac23,ac2b,ac43,ac83,acc3,ae11,ae13,ae15,ae16,ae17,ae19,ae1a,ae1b,ae1c,ae1d,ae1e,ae1f,ae29,ae43,ae49,ae4a,ae4b,ae61,ae69,ae78,ae83,aec1,aec3,b126,b12e,b163,b165,b167,b16c,b18c,b18e,b1a3,b1a9,b1ab,b1c5,b1c6,b1c9,b1cd,b1e3,b1e5,b1e7,b1e9,b1eb,b1ed,b1ef,b219,b21d,b24c,b24d,b253,b256,b257,b293,b29a,b29b,b29c,b2c6,b2c9,b2ca,b2ce,b2d3,b2d6,b2d7,b2da,b2db,b2de,b2df,b34c,b34d,b38c,b38e,b423,b42b,b435,b436,b437,b439,b453,b456,b457,b459,b45b,b45c,b45d,b45e,b45f,b463,b465,b467,b46b,b46d,b46f,b479,b47a,b47b,b47c,b47d,b47e,b47f,b489,b48b,b493,b495,b49c,b49d,b4a6,b4ac,b4ae,b4b5,b4b6,b4b7,b4bc,b4bd,b4be,b4bf,b4c5,b4c7,b4c9,b4cb,b4cd,b4cf,b4d3,b4d6,b4d7,b4da,b4db,b4de,b4df,b4e3,b4e5,b4e7,b4e9,b4eb,b4ed,b4ef,b516,b51a,b51c,b51e,b543,b549,b54a,b54b,b552,b558,b55a,b578,b5d2,b619,b61d,b629,b649,b669,b678,b689,b68b,b716,b71a,b71c,b71e,b729,b743,b749,b74a,b74b,b752,b758,b75a,b769,b778,b783,b789,b78b,b7d2,b813,b817,b836,b839,b83a,b83b,b846,b847,b859,b85c,b85d,b863,b86a,b86c,b86e,b879,b87a,b87b,b87c,b87d,b87e,b87f,b926,b92e,b946,b947,bc13,bc17,bc23,bc2b,bc43,bc83,bcc3,bd16,bd1a,bd1c,bd1e,bd23,bd29,bd2b,bd43,bd49,bd4a,bd4b,bd52,bd58,bd5a,bd78,bd83,bdc3,be11,be13,be15,be16,be17,be19,be1a,be1b,be1c,be1d,be1e,be1f,be29,be43,be49,be4a,be4b,be61,be69,be78,be83,bec1,bec3,bf16,bf1a,bf1c,bf1e,bf29,bf43,bf49,bf4a,bf4b,bf52,bf58,bf5a,bf61,bf69,bf78,bf83,bfb4,bfc1,bfc3,c131,c132,c133,c135,c136,c137,c139,c13a,c13b,c13d,c13e,c13f,c153,c156,c157,c159,c15b,c15c,c15d,c15e,c15f,c171,c172,c173,c174,c175,c176,c177,c179,c17a,c17b,c17c,c17d,c17e,c17f,c18c,c18e,c195,c197,c19c,c19d,c19e,c19f,c1a3,c1a6,c1a9,c1ab,c1b5,c1b6,c1b7,c1bc,c1bd,c1be,c1bf,c1c5,c1c6,c1c9,c1cd,c1d3,c1d6,c1d7,c1da,c1db,c1de,c1df,c1e3,c1e5,c1e7,c1e9,c1eb,c1ed,c1ef,c231,c232,c233,c235,c236,c237,c239,c23a,c23b,c23d,c23e,c23f,c24c,c24d,c253,c256,c257,c259,c26a,c26b,c26c,c26d,c26e,c26f,c279,c27a,c27b,c27c,c27d,c27e,c27f,c2a3,c2a6,c2a7,c2a9,c2ab,c2ac,c2ad,c2ae,c2af,c2b1,c2b2,c2b3,c2b5,c2b6,c2b7,c2b8,c2b9,c2ba,c2bb,c2bc,c2bd,c2be,c2bf,c2c6,c2c9,c2ca,c2ce,c2d3,c2d6,c2d7,c2da,c2db,c2de,c2df,c2e3,c2e5,c2e7,c2e9,c2eb,c2ed,c2ef,c34c,c34d,c36b,c36c,c36d,c36f,c37c,c38c,c38e,c397,c39c,c39e,c39f,c3bc,c423,c42b,c435,c436,c437,c439,c489,c48b,c493,c495,c49c,c49d,c4a6,c4ac,c4ae,c4b5,c4b6,c4b7,c4bc,c4bd,c4be,c4bf,c516,c51a,c51c,c51e,c523,c52b,c543,c549,c54a,c54b,c552,c558,c55a,c578,c5d2,c629,c649,c669,c678,c689,c68b,c693,c695,c69c,c69d,c813,c817,c836,c839,c83a,c83b,c846,c847,c859,c85c,c85d,c863,c86a,c86c,c86e,c879,c87a,c87b,c87c,c87d,c87e,c87f,c916,c946,c947,c963,c96a,c96c,c96e,c986,c996,c9b4,ca13,ca17,ca25,ca29,ca2c,ca2d,ca83,ca85,ca86,ca87,caa1,caa4,caa5,cab4,cae1,cc13,cc17,cc23,cc2b,cd16,cd1a,cd1c,cd1e,cd22,cd23,cd25,cd26,cd27,cd2a,cd2b,cd2c,cd2d,cd2e,cd2f,cd43,cd49,cd4a,cd4b,cd52,cd58,cd5a,cd78,cd86,cd96,cdb4,cde1,ce11,ce13,ce15,ce17,ce19,ce1a,ce1b,ce1c,ce1d,ce1e,ce1f,ce25,ce29,ce2c,ce2d,ce49,ce69,ce78,ce83,ce85,ce86,ce87,cea1,cea4,cea5,ceb4,d126,d12e,d163,d165,d167,d16c,d18c,d18e,d1a3,d1a9,d1ab,d1c5,d1c6,d1c9,d1cd,d1e3,d1e5,d1e7,d1e9,d1eb,d1ed,d1ef,d219,d21d,d239,d23a,d23b,d23d,d23e,d23f,d24c,d24d,d253,d256,d257,d26a,d26b,d26c,d26d,d26e,d26f,d279,d27a,d27b,d27c,d27d,d27e,d27f,d293,d29a,d29b,d29c,d2a3,d2a6,d2a7,d2a9,d2ab,d2ac,d2ad,d2ae,d2af,d2b5,d2b6,d2b7,d2bc,d2bd,d2be,d2bf,d2c6,d2c9,d2ca,d2ce,d2d3,d2d6,d2d7,d2da,d2db,d2de,d2df,d2e3,d2e5,d2e7,d2e9,d2eb,d2ed,d2ef,d31c,d32c,d33c,d34c,d34d,d38c,d38e,d3b4,d423,d42b,d435,d436,d437,d439,d489,d48b,d493,d495,d49c,d49d,d4a6,d4ac,d4ae,d4b5,d4b6,d4b7,d4bc,d4bd,d4be,d4bf,d619,d61d,d629,d649,d669,d689,d68b,d71c,d725,d729,d72c,d72d,d738,d73c,d749,d768,d769,d783,d785,d786,d787,d788,d789,d78a,d78b,d78c,d78d,d78e,d78f,d7b4,d813,d817,d836,d839,d83a,d83b,d846,d847,d859,d85c,d85d,d863,d86a,d86c,d86e,d879,d87a,d87b,d87c,d87d,d87e,d87f,d926,d92e,d946,d947,da25,da29,da2c,da2d,da83,da85,da86,da87,daa1,daa4,daa5,dab4,dae1,db1c,db25,db29,db2c,db2d,db3c,db49,db4c,db4d,db83,db85,db86,db87,dba1,dba4,dba5,dbb4,dbe1,dc13,dc17,dc23,dc2b,de19,de1c,de1d,de25,de29,de2c,de2d,de49,de69,de83,de85,de86,de87,dea1,dea4,dea5,deb4,df1c,df25,df29,df2c,df2d,df38,df3c,df49,df68,df69,df83,df85,df86,df87,dfa1,dfa4,dfa5,dfb4,e126,e12e,e135,e136,e137,e13d,e13e,e13f,e153,e156,e157,e159,e15b,e15c,e15d,e15e,e15f,e163,e165,e167,e16c,e179,e17a,e17b,e17c,e17d,e17e,e17f,e18c,e18e,e195,e197,e19c,e19d,e19e,e19f,e1a3,e1a9,e1ab,e1b5,e1b6,e1b7,e1bc,e1bd,e1be,e1bf,e1c5,e1c6,e1c9,e1cd,e1d3,e1d6,e1d7,e1da,e1db,e1de,e1df,e1e3,e1e5,e1e7,e1e9,e1eb,e1ed,e1ef,e219,e21d,e24c,e24d,e253,e256,e257,e293,e29a,e29b,e29c,e2c6,e2c9,e2ca,e2ce,e2d3,e2d6,e2d7,e2da,e2db,e2de,e2df,e31c,e32c,e33c,e34c,e34d,e38c,e38e,e423,e42b,e435,e436,e437,e439,e489,e48b,e493,e495,e49c,e49d,e4a6,e4ac,e4ae,e4b5,e4b6,e4b7,e4bc,e4bd,e4be,e4bf,e516,e51a,e51c,e51e,e543,e549,e54a,e54b,e552,e558,e55a,e578,e5d2,e619,e61d,e689,e68b,e716,e71a,e71c,e71e,e72c,e73c,e743,e749,e74a,e74b,e752,e758,e75a,e786,e78c,e78e,e7d2,e813,e817,e836,e839,e83a,e83b,e846,e847,e859,e85c,e85d,e863,e86a,e86c,e86e,e879,e87a,e87b,e87c,e87d,e87e,e87f,e916,e926,e92e,e946,e947,e986,e996,eb16,eb1a,eb1c,eb1e,eb2c,eb34,eb3c,eb43,eb44,eb45,eb46,eb47,eb49,eb4a,eb4b,eb4c,eb4d,eb4e,eb4f,eb86,eb94,eb96,ebb4,ec13,ec17,ec23,ec2b,ed16,ed1a,ed1c,ed1e,ed26,ed2c,ed2e,ed43,ed49,ed4a,ed4b,ed52,ed58,ed5a,ed78,ed86,ed96,ef16,ef1a,ef1c,ef1e,ef2c,ef34,ef3c,ef43,ef49,ef4a,ef4b,ef52,ef58,ef5a,ef86,ef94,ef96,efb4,f126,f12e,f163,f165,f167,f16c,f18c,f18e,f1a3,f1a9,f1ab,f1c5,f1c6,f1c9,f1cd,f1e3,f1e5,f1e7,f1e9,f1eb,f1ed,f1ef,f219,f21d,f24c,f24d,f253,f256,f257,f293,f29a,f29b,f29c,f2c6,f2c9,f2ca,f2ce,f2d3,f2d6,f2d7,f2da,f2db,f2de,f2df,f34c,f34d,f38c,f38e,f423,f42b,f435,f436,f437,f439,f489,f48b,f493,f495,f49c,f49d,f4a6,f4ac,f4ae,f4b5,f4b6,f4b7,f4bc,f4bd,f4be,f4bf,f619,f61d,f689,f68b,f813,f817,f836,f839,f83a,f83b,f846,f847,f859,f85c,f85d,f863,f86a,f86c,f86e,f879,f87a,f87b,f87c,f87d,f87e,f87f,f926,f92e,f946,f947,fc13,fc17,fc23,fc2b]

Find only 1 corner for flat and add float finding rule of no side quad allowed.

Knowns: 18404
Unknowns: 1916
[0138,0178,0192,01d2,0234,0261,02b4,02e1,0361,0392,03d2,03e1,0468,0478,04c2,04d2, ...

and make superparts...

Knowns: 20272
Unknowns: 48
[1265,126d,16ca,16cb,18c5,18c7,1c6a,1c6b,219a,219e,24ca,24cb,29c5,29c7,2c95,2c97,34ca,34cb,38c5,38c7,4235,423d,439a,439e,4895,4897,493a,493e,619a,619e,6895,6897,813a,813e,8365,836d,846a,846b,8635,863d,9265,926d,946a,946b,c13a,c13e,c235,c23d]

Shapes 1
 48432 Possible shapes
 28112 Standard MAM shapes
 20320 Advanced MAM shapes
 11296 Invalid shapes
  5808 Impossible shapes
  6691 Key shapes
    15 1 layer
   205 2 layer
  2891 3 layer
 45321 4 layer

-----

Shapez 2

Ideas
- find all possible shapes
- but first, design encoding scheme and shape chart

Blueprints
# string                      code
1 CuRuCuCu                    000f
2 CuRuCuCu:CbCbCbCb           00ff
3 CuRuCuCu:CcCcCcCc           00ff
4 CwRwCwCw:P-P-P-P-:CcCcCcCc  xxxx:xxxx
5 cwRwcwcw:P-P-P-P-:CcCcCcCc

Blueprints 2 and 3 have the same structure, so only need to do 4.
Blueprints may not be best as they have no quad key.

Stacker
Ru------
0001

180 Rotator
RuRu----:--RuRu--:----RuRu
0c63

Platform Limit 4
P-CwRuCw:Ru------
0001:001e

Color Mixing Speed 1
RpP-P-P-:--WrP-P-:----CyP-:------Sg
08ce:8421

Blueprint Discount 5
cwRwcwcw:P-P-P-P-:CcCcCcCc
00fd:0f0f

Wires
CwRwcrcp:ccRwCwcb:cgcyCwRw:RwcrcpCw
639c:ffff

Ru------
RuRu----:--RuRu--:----RuRu
P-CwRuCw:Ru------
RpP-P-P-:--WrP-P-:----CyP-:------Sg
cwRwcwcw:P-P-P-P-:CcCcCcCc
CwRwcrcp:ccRwCwcb:cgcyCwRw:RwcrcpCw

First attempt (no code changes)

                      0001       00fd:0f02  08ce:8421  639c:9c63
0001       0c63       001e       00fd:0f02  08ce:8421  639c:9c63
- - - -    - - - -    O - - -    O O O O    - - - O    - - O O 
- - - -    - - - -    - - - -    O - O O    - - O O    O O O - 
- - - -    - - O O    - - - -    - - - -    - O O O    O O - - 
- - - -    - O O -    O - - -    O O O O    - - - O    O - - O 
O - - -    O O - -    - O O O    - - - -    - - O -    O O - - 

Second attempt

0000       0000       0001       08ce       00fd       639c    
0001       0c63       001e       8421       0f0f       ffff    
- - - -    - - - -    - - - -    - - - O    - - - -    O X X O 
- - - -    - - O O    - - - -    - - O I    O O O O    X X O O 
- - - -    - O O -    O - - -    - O I I    I I I I    X O O X 
O - - -    O O - -    I O O O    O I I I    X O X X    O O X X 

Maybe put hex number on the side?

00 - - - -   00 - - - -   00 - - - -   08 - - - O   00 - - - -   6f O X X O 
00 - - - -   0c - - O O   00 - - - -   84 - - O I   0f O O O O   3f X X O O 
00 - - - -   06 - O O -   01 O - - -   c2 - O I I   f0 I I I I   9f X O O X 
01 O - - -   03 O O - -   1e I O O O   e1 O I I I   df X O X X   cf O O X X 

Testing S2 ops

S1 shapes made from FLAT_1, stacking only
1-flats  28112   3885

S1 shapes made from FLAT_4, all ops
1-flats  48432   6691

S1 ops - FLAT_1, stacking only
    Name   Shapes     Keys
 1-flats    28112     3885

First attempt at S2 ops - FLAT_1, stacking only

ToDo:  0
Total: 21136

    Name   Shapes     Keys
 1-flats    21136     2914

Saving shape chart
0001 P            (0,1,0)
0011 ST 0001 0001 (0,1,0)
  0001 P            (0,1,0)
  0001 P            (0,1,0)
Shape not found: 0012
Shape not found: 0121
Shape not found: 1212
ffff ST 00ff 00ff (0,111238,0)
  00ff ST 000f 000f (0,91,0)
    000f ST 0009 0006 (0,14,0)
      0009 ST 0008 0001 (0,2,0)
        0008 P            (0,1,0)
        0001 P            (0,1,0)
      0006 ST 0004 0002 (0,2,0)
        0004 P            (0,1,0)
        0002 P            (0,1,0)
    000f ST 0009 0006 (0,14,0)
      0009 ST 0008 0001 (0,2,0)
        0008 P            (0,1,0)
        0001 P            (0,1,0)
      0006 ST 0004 0002 (0,2,0)
        0004 P            (0,1,0)
        0002 P            (0,1,0)
  00ff ST 000f 000f (0,91,0)
    000f ST 0009 0006 (0,14,0)
      0009 ST 0008 0001 (0,2,0)
        0008 P            (0,1,0)
        0001 P            (0,1,0)
      0006 ST 0004 0002 (0,2,0)
        0004 P            (0,1,0)
        0002 P            (0,1,0)
    000f ST 0009 0006 (0,14,0)
      0009 ST 0008 0001 (0,2,0)
        0008 P            (0,1,0)
        0001 P            (0,1,0)
      0006 ST 0004 0002 (0,2,0)
        0004 P            (0,1,0)
        0002 P            (0,1,0)

Initial results
Input: 1 quarter shape, no pins, no crystals
Ops: stacking only

Game      Shapes  Keys
Shapez 1  28112   3885
Shapez 2  21136   2914

Ran all ops for 10000 iters...

Remaining shapes:
0 0
1 0
2 0
3 0
4 0
5 21051
6 75537
7 205412
8 477256
9 925324
10 698408
11 64991

Stats
ToDo:  2467979
Total: 2477979

    Name   Shapes     Keys
 1-flats  2477979   318082

It figured out how to put a crystal on the 2nd layer...

00 - - - -   00 - - - -   00 - - - -   00 - - - -
00 - - - -   00 - - - -   00 - - - -   00 - - - -
11 X - - -   11 X - - -   11 X - - -   11 X - - -
03 O O - -   07 O O O -   0b O O - O   0f O O O O

0010:001f SL(005e:00ff XX(000e:00af ST(000a ST(0008 0002) 000e:000f XX(0001))) 000c ST(0008 0004))

Problem: SL(005e:00ff 000c) should be 0010:002d.
looks like collapseS2 is not sticking solids crystals together.

Find all possible shapes, no stacking

ToDo:  0
Total: 255

    Name   Shapes     Keys
 4-flats      255       54

Saving shape chart
0001 CR 0009      (3,1,0)
  0009 RR 000c      (2,2,0)
    000c CL 000f      (1,1,0)
      000f P            (0,1,0)

0005:0005 SL(0001:0009 RR(0008:000c CL(0008:000f XX(0007 SR(0006 RL(000c CL(000f)) 000f)))) 0004:0006 RL(0008:000c CL(0008:000f XX(0007 SR(0006 RL(000c CL(000f)) 000f)))))
0007:0005 SL(0007:0009 RR(000b:000c SR(0008:000f XX(0007 SR(0006 RL(000c CL(000f)) 000f)) 000f:0000)) 0004:0006 RL(0008:000c CL(0008:000f XX(0007 SR(0006 RL(000c CL(000f)) 000f)))))
000f:0005 SL(0007:0009 RR(000b:000c SR(0008:000f XX(0007 SR(0006 RL(000c CL(000f)) 000f)) 000f:0000)) 000d:0006 RL(000b:000c SR(0008:000f XX(0007 SR(0006 RL(000c CL(000f)) 000f)) 000f:0000)))

Find all 2-layer shapes, using FLAT_1 and PINS_1

    Name   Shapes     Keys
 1-flats    26237     3828

00 - - - -
00 - - - -
11 X - - -
01 O - - -

0010:0011 CR 0010:0091      (7,27,0)
0010:0011 CR(0010:0091 RL(0020:0032 CR(00ad:00ff XX(000d:005f ST(0005 SR(0004 0001) 000d:000f XX(0002))))))

It first made a full flat with one quarter and crystal, so that it could stack a bowtie on top and crystal that.
Then it cut>rotate>cut to make it one quad.

Idea: make crystal more expense - because it uses 2 parts?

Try it again, but with only FLAT_4

  4-flat    26237     3828

Well, at least it found the the same number of shapes.
Charts are the same.

0010:0011 CR 0010:0099      (7,3,0)
0010:0011 CR(0010:0099 RL(0020:0033 CR(0020:00ff XX(0020:00df ST(0002:000d RR(0001:000e PP(000f)) 000f)))))

Cost is still 7, but only one crystal step this time.


0013:0013 CR(0013:009f RR(0089:00cf SR(0088:00ff XX(0008:0077 RL(0001:00ee PP(00ff ST(000f 000f)))) 0001:000f XX(0001:000e PP(000f)))))
0007:0025 SL(0003:006d RR(0009:003e SR(0008:000f XX(0008:0007 RL(0001:000e PP(000f))) 0001:00fe ST(000f 0001:000e PP(000f)))) 0004:0006 RR(0002:0003 CR(0002:000f XX(0002:000d RR(0001:000e PP(000f))))))

One of the 12 shapes with the most steps:
00ba:007b RL 0075:00e7      (21,2,0)
00ba:007b RL(0075:00e7 SL(0031:006f ST(0001:000e PP(000f) 0021:006f RR(0018:003f SL(0010:00ff XX(0010:00ef ST(0001:000e PP(000f) 00cccc0f)) 0008:000f XX(0008:0007 RL(0001:000e PP(000f)))))) 0044:00f7 RR(0022:00fb SL(0022:00ff XX(0002:00dd RR(0001:00ee PP(00ff ST(000f 000f)))) 00f9 ST(000f 0009 RL(0003 CR(000f)))))))

00 - - - -
00 - - - -
b7 X X O I
ab O X - X

Rucr--cr:crcrRuP-

Bug? 0031:006f ST(0001:000e 0021:006f)
Looks like it's not dropping the part 000e on top?
Probably the way I'm currently forcing 2-layer parts.  Stack is just truncating the value.
The fix is to check if the result is more than 2 layers, and return nothing.

One of the 18 shapes with the most steps:
00ba:0053 RL 0075:00a6      (21,1,0)
00ba:0053 RL(0075:00a6 ST(0005:0000 PP(0004:0000 CL(0004:0003 R2(0001:000c PP(000c CL(000f))))) a RR(0012:00db SL(0012:009f RR(0081:00cf SR(0080:00ff XX(0080:007f ST(0008:0007 RL(0001:000e PP(000f)) 000f)) 0001:000f XX(0001:000e PP(000f)))) 00f9 ST(000f 0009 RL(0003 CR(000f))))))))

00 - - - -
00 - - - -
b5 X I O I
a3 O X - I

Rucr--P-:crP-RuP-

Bug? 0025:00a6 PP(0024:00b7)
should be: 0025:002e

Quad 4 should fall
PinPush collapse should check for 2 parts that fall.
Fixed by making a parts list when part is 0x5 or 0xa.

Reran the layer 2 shape finding, and it found fewer shapes...
    Name   Shapes     Keys
  4-flat    25757     3763

There are now 12 shapes with cost=21.
The first one happens to be the same as the first one it found before the bugs were fixed...

00ba:007b RL 0075:00e7      (21,2,0)
00ba:007b RL(0075:00e7 SL(0031:00ef RR(0098:00C7f SR(0088:007f RL(0011:00ef ST(0001:000e PP(000f) 0001:000f XX(0001:000e PP(000f)))) 0010:00ff XX(0010:00ef ST(0001:000ce PP(000f) 000f)))) 0044:00f7 RR(0022:00fb SL(0022:00ff XX(0002:00dd RR(0001:00ee PP(00ff ST(000f 000f)))) 00f9 ST(000f 0009 RL(0003 CR(000f)))))))

00 - - - -
00 - - - -
b7 X X O I
ab O X - X

Rucr--cr:crcrRuP-

00ff:00af SR 00cc:00bf 0033:00ef (21,2,15)

Ran 3-layer for 10,000 iters...

ToDo:  392272
Total: 402272

00 - - - -
13 X O - -
03 O O - -
02 - O - -

0100:0332 CR(0109:0fff XX(0100:0ef6 ST(0010:00ef ST(0001:000e PP(000f) 000f) 0006 RR(0003 CR(000f)))))
0100:0ffe SL(0109:0fff XX(0100:0ef6 ST(0010:00ef ST(0001:000e PP(000f) 000f) 0006 RR(0003 CR(000f)))) 0fff ST(00ff ST(000f 000f) 000f))

I see a lot of lower cost founds.
Here's one with 22 alternates...

0089:0237 SL 0001:06ff 0088:0017 (12,22,13)
0089:0237 SL(0001:06ff ST(006f ST(0006 RR(0003 CR(000f)) 000f) 0001:000f XX(0001:000e PP(000f))) 0088:0017 RL(0011:002e ST(0001:0002 PP(0003 CR(000f)) 0001:000e PP(000f))))

00 - - - -
02 - O - -
83 O O - I
97 X O O I

Not sure why lower cost found so much.
Maybe pin pusher is an easy way to delete quarters on higher layers?
Or it's just the swapper gets more efficient with more layers?

Ran all layers for 5,000 iters...

Remaining shapes:
0 0
1 0
2 0
3 0
4 0
5 0
6 3485
7 16553
8 38134
9 103226
10 217350
11 359102
12 360661
13 143670

Stats
ToDo:  1242181
Total: 1247181

    Name   Shapes     Keys
  4-flat  1247181   231777

f000:ffff XX(1000:0fff ST(0001:000c PP(000c CL(000f)) 03ff ST(0003 CR(000f) 00ff ST(000f 000f))))
0f00:ffff XX(0100:f0ff ST(0001:00fc ST(000f 0001:000c PP(000c CL(000f))) 003f ST(0003 CR(000f) 000f)))

1-quarter  4
2-quarter 18
3-quarter 24
4-quarter  6
total     52


Shapes 1
 48432 Possible shapes
 28112 Standard MAM shapes
 20320 Advanced MAM shapes
 11296 Invalid shapes
  5808 Impossible shapes
  6691 Key shapes
    15 1 layer
   205 2 layer
  2891 3 layer
 45321 4 layer


Shapes 2
  255 1 layer
25757 2 layer

-----

Test shape: ----Cu--:Cu--Cu--:------Cu:Cu------

1854    
- - - - 
B - - - 
- - - B 
B - C - 
- - A - 

-----

Implemented the new pin pusher.

Found 35260 shapes, 5091 keys
Max cost: 25

First different shape:

00 - - - -
00 - - - -
11 X - - -
10 I - - -

0011:0010 PP(0001:0001 CR(0001:0009 RR(0008:000c CL(0008:000f XX(0007 SR(0006 RR(0003 CR(000f)) 000f))))))

Crystal on pin!

First pin push build:
0001:0000 CR(0099:0090 PP(0009:0009 RR(000c:000c CL(000c:000f XX(0003 CR(000f))))))
Just one pin

Most complex: there are 2 with cost 35

00ff:005f SL 0073:009f 00dc:006f (35,2,16)
00ff:00af SR 00ec:009f 00b3:006f (35,2,16)

00 - - - -
00 - - - -
f5 X I X I
ff X X X X

00ff:005f SL(0073:009f RL(00e6:003f SR(00c4:000f ST(00cc:00c0 PP(000c:000c CL(000c:000f XX(0003 CR(000f)))) 0004:000f a(000b SR(0009 RL(0003 CR(000f)) 000f))) 0022:00ff XX(00dd SL(0099 RL(0033 CR(00ff ST(000f 000f))) 00ff ST(000f 000f))))) 00dc:006f RR(00e6:003f SR(00c4:000f ST(00cc:00c0 PP(000c:000c CL(000c:000f XX(0003 CR(000f)))) 0004:000f XX(000b SR(0009 RL(0003 CR(000f)) 000f))) 0022:00ff XX(00dd SL(0099 RL(0033 CR(00ff ST(000f 000f))) 00ff ST(000f 000f))))))

How about 1-layer of pins?

000f:0000 SL(00bf:00f0 PP(000b:000f XX(0004 CL(0006 RR(0003 CR(000f))))) 00df:00f0 PP(000d:000f XX(0002 CR(0006 RR(0003 CR(000f))))))

Ran ops without crystals for 10,000 iters...
Remaining shapes:
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 5374
8 21200
9 38504
10 89167
11 162884
12 260355
13 313952
14 236016
15 86161

Stats
ToDo:  1213613
Total: 1223613

000f:0000 SL(c0cf:0c00 ST(000f:00f0 PP(000f) 00cc:0c00 PP(000c:00c0 PP(000c CL(000f)))) 302f:0300 ST(000f:00f0 PP(000f) 0023:0300 PP(0003:0030 PP(0003 CR(000f)))))

Bug?

0023:0300 PP(0003:0030 PP(0003 CR(000f)))

This is pins pushing pins.  Should be:
0033:0300

Fix: Pin push function was using quads 1..4, should be 0..3.

Reran 10,000 iters. Found more shapes...

Remaining shapes:
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 2037
8 19330
9 32683
10 71885
11 135312
12 226184
13 319506
14 337293
15 218344

Stats
ToDo:  1362574
Total: 1372574

    Name   Shapes     Keys
  4-flat  1372574   186112

All pins
000f:0000 SL(c0cf:0c00 ST(000f:00f0 PP(000f) 00cc:0c00 PP(000c:00c0 PP(000c CL(000f)))) 303f:0300 ST(000f:00f0 PP(000f) 0033:0300 PP(0003:0030 PP(0003 CR(000f)))))

Reran 2-layers
Same total numbers, same charts
different builds

    Name   Shapes     Keys
  4-flat    35280     5091

What about a shape that has to be broken to be made?

0100:0ffe - did not find it.

Looking for pin between crystal layers.
Which would be 0111:0101 or some variant.
-
X
I
X

Ran 3-layer shapes for 50,000 iters.

0111:0100 PP 0011:0010      (9,2,0)
0111:0102 CR 0199:0906      (9,1,0)
0111:0104 SL 0199:0900 0006 (11,2,0)
0111:0106 RL 0222:020c      (10,2,0)
0111:0108 RL 0222:0201      (10,2,0)
0111:010a SL 0199:0906 0009 (11,2,0)
0111:010c SL 0199:0900 000f (9,2,0)
0111:010e SL 0199:0906 000f (9,2,5)

All of these are even numbers (have pin on bottom layer).

00 - - - -   00 - - - -   00 - - - -   00 - - - -   00 - - - -   00 - - - -   00 - - - -   00 - - - - 
11 X - - -   11 X - - -   11 X - - -   11 X - - -   11 X - - -   11 X - - -   11 X - - -   11 X - - - 
10 I - - -   10 I - - -   10 I - - -   10 I - - -   10 I - - -   10 I - - -   10 I - - -   11 X - - - 
12 I O - -   14 I - O -   16 I O O -   18 I - - O   1a I O - O   1c I - O O   1e I O O O   10 I - - - 

-----

TMAM test shapes

--Cw----:----CbCb:CgCgCg--:--Cr----
--Cw----:----CbCb:CgCg--Cg:--Cr----

27c2   
- - - -
- C - -
C A B -
- - A B
- A - -

2bc2   
- - - -
- D - -
D A - C
- - A B
- A - -

FOUND 27c2 [0242,0048,0021] 01+2+
- - - - 
- C - - 
C A B - 
- - A B 
- A - - 

FOUND 2bc2 [0242,0008,0008,0021] 0123+++
- - - - 
- D - - 
D A - C 
- - A B 
- A - - 

16d2

Ops for rocket fe1f
RuRuRuRu:CuRuRuRu:RuRuRuRu:RuRuRuRu

fe1f    
D D D D 
- B C C 
B - - - 
A A A A 

- - - -  5th layer
- - - -  3-4
- / - -  2-3
- - - -  1-2

fe1f    
D D D D 
- C C B 
B - - - 
A A A A 

- - - -  5th layer
- - - -  3-4
- - - \  2-3
- - - -  1-2

Rules

Layer pair #1 (layers 1-2)
FLAT - If any of the corners are supported, then the skip the remaining rules.
FLOAT_V - Find floats on E/W halves.
FLOAT_H - Find floats on N/S halves.
<exceptions - look at layer 3>

Layer pair #2 (layers 2-3)
FLAT - Same as pair #1, but excludes some corners (like floats from below) and others?

Layer pair #3 (layers 3-4)

Layer #5
<if there are corners on layer 4>

LOGOS
There are four positions 0..3 (ESWN), three sizes 2..4, and two orientations (left/right handed)

With these 3 rules (FLAT, FLOAT_V, FLOAT_H) able to find solutions to 15016 out of 20320 complex shapes.

Knowns: 15016
Unknowns: 5304
[0138,0178,0192,01d2,0234,0261,02b4,02e1,0361,0378,0392,03b4,03d2,03e1,...

Tested the first 4 failures...

00 - - - -   00 - - - -   00 - - - -   00 - - - - 
01 O - - -   01 O - - -   01 O - - -   01 O - - - 
03 O O - -   07 O O O -   09 O - - O   0d O - O O 
08 - - - O   08 - - - O   02 - O - -   02 - O - - 

0138 fails because it finds 18 but not 12, which is seated on top of 18.
It doesn't look like a float, because it is seated.
Which ARULE checks for this?
I think rules for pair #2 start with ignoring the corner of the float from pair #1.
I think the rules say that is ignored for both the FLAT and FLOAT rules on pair #2.
The float from pair #1 (the choosen one) is passed if there is only one float found on pair #1.

I added the removal of the passed float corner (but did not confirm with the document).
Now there's only one of these four that fail...

0178
- - - -
- - - -
O - - -
O O O -
- - - O

Passed: 0000
Floats: [0048]
Passed: 0048
Passed: 0000
Layers: [0000,0001,0003,0048]
NOT FOUND 0178

This fails because the float found on pair #1 is the wrong one.
It is 48 on the West (vertical) and it should be choosing 18 on the North (horizontal).
What is the rule for this?  It is probably an exception to FLOAT_V.

There is a rule (3.2) that says if the horizontal float has a hat (and the vertical float has no hat), skip the FLOAT_V rule.
Actually, it says activate the horizontal output.

How do I make exceptions?
Try making a separate rule for this, and adding it before the others so that it has priority.
Or, add conditions to the exising rules that break out of them.

Idea: Use patterns and masks for all rules, not just finding floats.
It's not clear if the rules should be checking all 4 (or 8) variations of each pattern. Probably does check.
Also - Might not need masks for some patterns, like just floats.  Will need masks for patterns that have missing corners.

The result is simply float-left or float-right for each of the 4 quads per layer-pair.
And those results are in 2 groups (maybe?): horizontal and vertical.

Design ideas
First find all the floats, in two sets: horiz and vertical.
Then run the rules in order to determine which set to use.
The first rule that passes wins and the other rules are not used.
(or design the rules so that only one will win)

Looking at the wires implementation...
Looks like pair #1 float checking does not look for gaps, only for the 2 corners.
Has a signal for each of the 8 possible 2-layer floats.
It does find all possible 8 floats first, and then has gates to release either the H or V set.
Each corner of the build ops is for one position of the logo (ESWN) and if it is the left or right handed variant
(default = uncolored rectangle, right float = circle, left float = purple)
What I'm currently using is each corner is the actual corner in the shape.
It never will find both floats in the same position because float finding is disabled
when there are corners on top of each other (flat/supported part).

Note: If it's only H or V, then only need rules for one of them.
Note: Might not need to find the floats, just need to make sure the quads that include them are part of the rule.
(or since they are needed for all rules, they can be factored out, which is probably the way the wires work)

1 2 3 4
N - - N  4
- - W W  3
- S S -  2
E E - -  1

E S W N
- - - -  5th layer
- - - -  3-4
- - - -  2-3
- - - -  1-2

fe1f    
D D D D 
- B C C 
B - - - 
A A A A 

- - - -
- - - -
/ - - -
- - - -

fe1f    
D D D D 
- C C B 
B - - - 
A A A A 

- - - -  5th layer
- - - -  3-4
- - - \  2-3
- - - -  1-2

A - - - 
- A - -
\ - - -

A - - -
- - - A
- - - /

- B - -
- - B -
- \ - -

- B - -
B - - -
/ - - -

- - - D
D - - -
- - - \

I've changed makeShape to use a build ops that matches the wires.  The columns are float positions (ESWN).
Might be more efficient the way I had it before where columns were shape quads.

Design Ideas
If there is a flat, skip float finding
Find floats in two sets: floats-H and floats-V
floats-V is default / fallback.  Rules will check to see if floats-H should be used.
Basically - Use_H = Rule1 OR Rule2 OR ...
If Use_H is true, then set build ops with floats-H, else use floats-V

TODO: Use simple float finding - only the corners (mask = float).

With just flat and NO_V...
Knowns: 13472
Unknowns: 6848

That's less than before.  I don't know why, but there are newly not found...
[0121,0125,0129,012d,0165,016d,0178,0181,0183,0185,0187,0212,0216,021a,021e,...

0121
- - - -
- - - -
O - - -
- O - -
O - - -

Passed: 0000
Floats: [0021]
Passed: 0021
Passed: 0000
Layers: [0000,0001,0000,0021]
NOT FOUND 0121

How do I expect this to work?  Why did it work before?
Pair #1 should find a right float in E position (21).
There should be one passed passed float.
Pair #2 should find a left float in E position (12).
But probably does not because of part removal from the passed float.
Which is why it worked before, becuase it did not have part removal yet.
Removing the part removal makes these four work... 0121,0125,0129,012d

So, how is it supposed to work?

The text says that the upper corner of the passed float should be excluded from the float finding for the perpendicular positions.
That is, if the passed float is E/W, then exclude the top corner when finding N/S floats.  and vice-versa.

Added this, and the four shapes work.
Try them all again...

Knowns: 14384
Unknowns: 5936
[0178,0185,0187,0192,01d2,024a,024b,0261, ...

More, but still not as many as before.

0178
- - - -
- - - -
O - - -
O O O -
- - - O

Passed: 0000
Floats: [0048]
Passed: 0048
Passed: 0000
Layers: [0000,0001,0003,0048]
NOT FOUND 0178

This is where I left off before...
This fails because the float found on pair #1 is the wrong one.
It is 48 on the West (vertical) and it should be choosing 18 on the North (horizontal).

There is a rule (3.2a) that says if the horizontal float has a hat (and the vertical float has no hat),
then activate the horizontal output.  Shared bottom, with a hat.

This is the inerted logo, with a hat.  The first floating shape I was wondering about.

Need a name for this rule, and implement it using bit ops pattern matching.  I think I'll call it HAT_H for now.

I want to have one function to check for patterns, and all paterns as simple data (bit strings).
Perhaps patterns will have a number (maybe two numbers for pattern and mask).

Added this...

  static hatH(shape) {
    const PATTERN = { code: 0x0158, mask: 0x0558 };
    // TODO: Need rotations / mirrors of this probably
    const { code, mask } = PATTERN;
    return (shape & mask) == code;
  }

found it...

0178
- - - -
- - - -
O - - -
O O O -
- - - O

Passed: 0000
Floats: [0018]
Passed: 0018
Floats: [0012]
Passed: 0012
Layers: [0000,0000,0016,0018]
FOUND 0178
- - - -
- - - -
\ - - -
- - - /

Next shape...

0185
- - - -
- - - -
O - - -
- - - O
O - O -

Passed: 0000
Floats: [0084]
Passed: 0084
Passed: 0000
Layers: [0000,0001,0000,0085]
NOT FOUND 0185

This also finds the wrong float.  But it's one with a shared top instead of a shared bottom.
It find West 84 (vert) instead of North 81 (horz).  There's a 3-layer float 181 that needs it.
This is 3.2b in the text.  Interesting how the text is in exactly the same order that I am finding them.
Called this one THREE_H.

Next...
0192
- - - -
- - - -
O - - -
O - - O
- O - -

Passed: 0000
Floats: [0012]
Passed: 0012
Passed: 0000
Layers: [0000,0001,0008,0012]
NOT FOUND 0192

seat joint.  It finds the bottom float 12, but not the top float 18.
Maybe because I'm using strict logo / floats with gaps.
Need to use the simpler float finding that only looks for two corners.
Okay, changed float finding to simple, but it still doesn't work.
It's finding a flat on Pair #2.  The layer pair is 1 on top of 9.
Should be excluding the top of the bottom float (1) from the bottom of pair #2.  Should be just 8.
Modified the below part in the flat finding to remove the top of the passed float from pair #1.

Now it works...

0192
- - - -
- - - -
O - - -
O - - O
- O - -

Passed: 0000
Floats: [0012]
Passed: 0012
Floats: [0018]
Passed: 0018
Layers: [0000,0000,0018,0012]
FOUND 0192
- - - -
- - - -
- - - /
\ - - -

Knowns: 8298
Unknowns: 12022
[0123,0127,012b,012f,013c,0163,0167, ...

That's a lot worse.  Probably because it is using simple float finding now.

0123
- - - -
- - - -
O - - -
- O - -
O O - -

Passed: 0000
Floats: [0021]
Passed: 0021
Floats: [0012]
Passed: 0012
Layers: [0000,0000,0000,0321]
NOT FOUND 0123

It found the 2 floats correctly, but the layers are wierd (upside down).  Maybe it messed up the stacking?
Actually, it should be a flat, with a float on top.
Fixed a bug with finding flats.  It was always picking a float (if there was one) even if a flat was found.
Now it skips picking a float if a flat is found.

Knowns: 14921
Unknowns: 5399
[024a,024b,02b4,0361,0392,03b4,03d2,03e1, ...

So a few more found, but still a lot to go.

024a
- - - -
- - - -
- O - -
- - O -
- O - O

Passed: 0000
Floats: [0048]
Passed: 0048
Passed: 0000
Layers: [0000,0002,0000,004a]
NOT FOUND 024a

Pair #1 picks the wrong float.  It picks West 48, should pick South 42.
Shared top, three-layer float should win.
Same as 0185 I think, but this time the correct float is South 242 instead of North 181.
I think that's a mirror and rotate twice.

Shape.pp(Shape.rotateCode(Shape.mirrorCode(0x185), 2))
'024a'

Added makePatterns() which makes 4 patterns using the mirror and rotate twice of the code and mask.

Found it...

024a
- - - -
- - - -
- O - -
- - O -
- O - O

Passed: 0000
Floats: [0042]
Passed: 0042
Floats: [0024]
Passed: 0024
Layers: [0000,0000,0000,024a]
FOUND 024a
- - - -
- - - -
- \ - -
- / - -

0361
- - - -
- - - -
O O - -
- O O -
O - - -

Passed: 0000
Floats: [0021]
Passed: 0021
Floats: [0012]
Passed: 0012
Layers: [0000,0002,0004,0121]
NOT FOUND 0361

3-layer float with seated 2-layer float on Pair #2.
Seems to find the 3-layer float, but not the 2-layer float.
Needs to find East 12 and South 24 on Pair #2.  I don't know how it could if it only does horizontal or vertical floats.
Seems Pair #2 allows for H and V floats at the same time.  But it's not clear what the restrictions are.

The wires use 1 bit to determine which set of floats to allow for pair #1 and pair #3.  It is either H or V.
For pair #2, the wires use 2 bits, so that's 4 sets of floats.  Floats with shared bottom corner are exclusive.
One bit controls if it uses V or H with quad 1 or 3 on the bottom
One bit controls if it uses V or H with quad 2 or 4 on the bottom.
Another way of looking at it is that floats that have bottoms in opposite corners can only be parallel.
If they were perpendicular, they would share a top piece.
So for pair #2, it is possible to have H and V if the bottom quads are different and adjacent.
(and they both have the same direction)

It's difficult to make a general solution for every pair, when each pair has a different set of controls.
I think the controls for pair #2 are the more general (superset) of the controls for pair #1 and #3.

There are 8 possible 2-layer floats to find in each layer pair.  That's 8 bits of control needed, or 256 combos.
Many of those combos are exclusive, because floats can't share bottoms or tops, and can't occupy the same position.
And there's a max limit of 3(?) floats because 4 makes a box top, which is impossible to assemble.
Seeems the wires reduce this down to 2 bits of control for pair #2.



Blueprints

#!/bin/bash
echo -n "$1" | sed 's/^.\{10\}//' | base64 --decode | gunzip -c | jq
