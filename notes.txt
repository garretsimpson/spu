24-Apr-2022

- prim: all flats (cost 0), all logos (cost 10)
353c ST(3111 ST(0031 ST(0003 0001) 0011 ST(0001 0001)) 242c ST(2424 0008))
----RrRr:RgRg----:Ry--Ry--:RwRw----

- The solution uses 6 parts, a 4-logo and 5th layer.
- The solution I want is 4 parts: 2 2-logos and 2 2 part layers and no 5th layer.

- prim: all flats (cost 0), 2-logo (cost 10), 3-logo (cost 20), 4-logo (cost 30)
353c ST(0035 ST(0003 0005) 003c ST(0018 0024))
----RrRr:RgRg----:Ry--Ry--:RwRw----

- That is better.  Only 4 parts and matches what I wanted.
- But, there are still 6 part builds...
3c43 ST(033c ST(0031 ST(0003 0001) 002c ST(0024 0008)) 0043 ST(0042 0001))
RrRr----:----Rg--:----RyRy:RwRw----

- That's 3 layer, 2 2-logos, has fifth layer
- I want 1 layer, 3 2-logos, no fifth layer

- maybe because logos are expensive, and 5th layers cost only 1 stack?
- Maybe add a cost to 5th layer shapes?

- Try with flats (cost 0) and logos (cost 0)
- That's better (and simpler).

- Or, set cost of 2-logos to 2 (stack+cut), 3-logos to 3 (stack+stack+cut), ...
- I think that is even better.

- This avoids logos, but only as much as they cost to build.
- Some builds are longer (more parts), but all are still 5 parts or less.
- Like this one...

old...
0163 ST(0121 0042)
new...
0163 ST(0016 ST(0012 0004) 0003)
RrRr----:--RgRg--:Ry------

- First 5 part build:
5222 ST(0054 ST(0005 0004) 1222 ST(0012 0022 ST(0002 0002)))
- Has 3 layer, 1 2-logo, 5th layer

file: data/builds_flat0_logo234.txt

-----

Unknown shapes when using LOGO_A and LOGO_C
[03d2,07b4,121a,121e,125a,12b4,1385,1387,13a4,13b4,13d2,1678,16b4,1785,1787,17a4,17b4,1b61,1e78,3185,3187,31d2,3425,342d,3478,34a5,3585,3587,35a1,35a4,35b4,361a,361e,3658,3678,36b4,3785,3787,37a4,37b4,521a,521e,52b4,5385,5387,53a4,53b4,7185,7187,71d2,721a,721e,72b4,7385,7387,73a4,73b4,794a,794b,7952,79d2]

5th layer
found by TMAM
[3422,3423,3424,3425,3426,3427,342a,342b,342c,342d,342e,342f,3431,3432,3433,3435,3436,3437,3439,343a,343b,343c,343d,343e,343f,3442,3443,3444,3445,3446,3447,3448,3449,344a,344b,344c,344d,344e,344f,3451,3453,3454,3455,3456,3457,3459,345a,345b,345c,345d,345e,345f,3462,3463,3464,3465,3466,3467,3468,3469,346a,346b,346c,346d,346e,346f,3471,3472,3473,3474,3475,3476,3477,3478,3479,347a,347b,347c,347d,347e,347f,34a2,34a3,34a5,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,34c3,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e2,34e3,34e4,34e5,34e6,34e7,34e8,34e9,34ea,34eb,34ec,34ed,34ee,34ef,34f1,34f2,34f3,34f4,34f5,34f6,34f7,34f8,34f9,34fa,34fb,34fc,34fd,34fe,34ff,3521,3522,3523,3524,3525,3526,3527,3529,352a,352b,352c,352d,352e,352f,3534,3538,3561,3568,3581,3583,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35a4,35b4,35c1,35c2,35e1,3612,3616,361a,361e,3652,3c11,3c13,3c15,3c17,3c18,3c19,3c1a,3c1b,3c1c,3c1d,3c1e,3c1f,3c34,3c52,3c58,3c68,3d24,3d2c,3d34,5211,5212,5213,5215,5216,5217,5219,521a,521b,521d,521e,521f,5221,5222,5223,5225,5227,5229,522a,522b,522d,522f,5231,5232,5233,5234,5235,5236,5237,5239,523a,523b,523c,523d,523e,523f,5251,5253,5255,5257,5259,525a,525b,525d,525f,5271,5272,5273,5275,5277,5279,527a,527b,527d,527f,5291,5293,5295,5296,5297,5298,5299,529a,529b,529c,529d,529e,529f,52a2,52a3,52a5,52a7,52a8,52a9,52aa,52ab,52ad,52af,52b1,52b2,52b3,52b4,52b5,52b6,52b7,52b8,52b9,52ba,52bb,52bc,52bd,52be,52bf,52d1,52d3,52d5,52d7,52d8,52d9,52da,52db,52dd,52df,52f1,52f2,52f3,52f5,52f7,52f8,52f9,52fa,52fb,52fd,52ff,5342,5343,5344,5345,5346,5347,534a,534b,534c,534d,534e,534f,5352,5358,5381,5383,5385,5387,5388,5389,538a,538b,538c,538d,538e,538f,53a1,53a4,53c1,53c2,5a11,5a12,5a13,5a15,5a16,5a17,5a1a,5a1b,5a1e,5a1f,5a34,5a38,5a52,5a78,5b42,5b43,5b44,5b45,5b46,5b47,5b4a,5b4b,5b4e,5b4f,5b52,5b68,7811,7813,7815,7817,7818,7819,781a,781b,781c,781d,781e,781f,7831,7832,7833,7835,7836,7837,7839,783a,783b,783c,783d,783e,783f,7851,7853,7855,7857,7859,785a,785b,785d,785f,7871,7872,7873,7875,7877,7879,787a,787b,787d,787f,7881,7883,7885,7887,7888,7889,788a,788b,788d,788f,7891,7893,7894,7895,7896,7897,7898,7899,789a,789b,789c,789d,789e,789f,78a2,78a3,78a5,78a7,78a8,78a9,78aa,78ab,78ad,78af,78b1,78b2,78b3,78b4,78b5,78b6,78b7,78b8,78b9,78ba,78bb,78bc,78bd,78be,78bf,78d1,78d3,78d5,78d7,78d8,78d9,78da,78db,78dd,78df,78f1,78f2,78f3,78f5,78f7,78f8,78f9,78fa,78fb,78fd,78ff,7921,7922,7923,7925,7926,7927,7929,792a,792b,792d,792e,792f,7944,7945,7946,7947,7948,7949,794a,794b,794c,794d,794e,794f,7952,7958,7961,7968,79a1,79a4,7a11,7a12,7a13,7a15,7a16,7a17,7a18,7a19,7a1a,7a1b,7a1c,7a1d,7a1e,7a1f,7a34,7a38,7a52,7a58,7a78,7a92,7a94,7ad2,7b48,7b49,7b68]
found by constructor
[3422,3423,3424,3425,3426,3427,342a,342b,342c,342d,342e,342f,3431,3432,3433,3435,3436,3437,3439,343a,343b,343c,343d,343e,343f,3442,3443,3444,3445,3446,3447,3448,3449,344a,344b,344c,344d,344e,344f,3451,3453,3454,3455,3456,3457,3459,345a,345b,345c,345d,345e,345f,3462,3463,3464,3465,3466,3467,3468,3469,346a,346b,346c,346d,346e,346f,3471,3472,3473,3474,3475,3476,3477,3478,3479,347a,347b,347c,347d,347e,347f,34a2,34a3,34a5,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,34c3,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e2,34e3,34e4,34e5,34e6,34e7,34e8,34e9,34ea,34eb,34ec,34ed,34ee,34ef,34f1,34f2,34f3,34f4,34f5,34f6,34f7,34f8,34f9,34fa,34fb,34fc,34fd,34fe,34ff,3521,3522,3523,3524,3525,3526,3527,3529,352a,352b,352c,352d,352e,352f,3534,3538,3561,3568,3581,3583,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35a4,35b4,35c1,35c2,35e1,                         3c11,3c13,3c15,3c17,3c18,3c19,3c1a,3c1b,3c1c,3c1d,3c1e,3c1f,3c34,3c52,3c58,3c68,3d24,3d2c,3d34,5211,5212,5213,5215,5216,5217,5219,521a,521b,521d,521e,521f,5221,5222,5223,5225,5227,5229,522a,522b,522d,522f,5231,5232,5233,5234,5235,5236,5237,5239,523a,523b,523c,523d,523e,523f,5251,5253,5255,5257,5259,525a,525b,525d,525f,5271,5272,5273,5275,5277,5279,527a,527b,527d,527f,5291,5293,5295,5296,5297,5298,5299,529a,529b,529c,529d,529e,529f,52a2,52a3,52a5,52a7,52a8,52a9,52aa,52ab,52ad,52af,52b1,52b2,52b3,52b4,52b5,52b6,52b7,52b8,52b9,52ba,52bb,52bc,52bd,52be,52bf,52d1,52d3,52d5,52d7,52d8,52d9,52da,52db,52dd,52df,52f1,52f2,52f3,52f5,52f7,52f8,52f9,52fa,52fb,52fd,52ff,5342,5343,5344,5345,5346,5347,534a,534b,534c,534d,534e,534f,5352,5358,5381,5383,5385,5387,5388,5389,538a,538b,538c,538d,538e,538f,53a1,53a4,53c1,53c2,5a11,5a12,5a13,5a15,5a16,5a17,5a1a,5a1b,5a1e,5a1f,5a34,5a38,5a52,5a78,5b42,5b43,5b44,5b45,5b46,5b47,5b4a,5b4b,5b4e,5b4f,5b52,5b68,7811,7813,7815,7817,7818,7819,781a,781b,781c,781d,781e,781f,7831,7832,7833,7835,7836,7837,7839,783a,783b,783c,783d,783e,783f,7851,7853,7855,7857,7859,785a,785b,785d,785f,7871,7872,7873,7875,7877,7879,787a,787b,787d,787f,7881,7883,7885,7887,7888,7889,788a,788b,788d,788f,7891,7893,7894,7895,7896,7897,7898,7899,789a,789b,789c,789d,789e,789f,78a2,78a3,78a5,78a7,78a8,78a9,78aa,78ab,78ad,78af,78b1,78b2,78b3,78b4,78b5,78b6,78b7,78b8,78b9,78ba,78bb,78bc,78bd,78be,78bf,78d1,78d3,78d5,78d7,78d8,78d9,78da,78db,78dd,78df,78f1,78f2,78f3,78f5,78f7,78f8,78f9,78fa,78fb,78fd,78ff,7921,7922,7923,7925,7926,7927,7929,792a,792b,792d,792e,792f,7944,7945,7946,7947,7948,7949,794a,794b,794c,794d,794e,794f,7952,7958,7961,7968,79a1,79a4,7a11,7a12,7a13,7a15,7a16,7a17,7a18,7a19,7a1a,7a1b,7a1c,7a1d,7a1e,7a1f,7a34,7a38,7a52,7a58,7a78,7a92,7a94,7ad2,7b48,7b49,7b68]

5th layers made by default TMAM
3612 --    3616 --    361a --    361e --    3652 --
- - - -    - - - -    - - - -    - - - -    - - - -
X X - -    X X - -    X X - -    X X - -    X X - -
- X X -    - X X -    - X X -    - X X -    - X X -
X - - -    X - - -    X - - -    X - - -    X - X -
- X - -    - X X -    - X - X    - X X X    - X - -

Shape counts
         Shapes  Keys
1-layer  28112   3885
2-logo   44588   6164
3-logo   47918   6620
4-logo   48432   6691

5th layer - Keys

logos cost zero
1 piece 314
2 piece 255
  total 569

logos cost 123
1 piece  73
2 piece 485
  total 558 - ???

No 5th layer
          Shapes  Keys
 1-layer   28112  3885
 2-logo    42324  5855
 3-logo    44230  6118
 4-logo    44328  6132

Missing: 6691-6132 = 559

Can't make if layer and size are reversed in search...
[16d2]

Can't make if using only X mask...
Unknowns: 7
keys [0361,1361,1634,17a4,1b61,36c2,37a4]

Knowns: 48384
Unknowns: 48
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,17a4,19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,2b58,2c68,36c2,37a4,39c1,3b58,4361,4634,49c1,4c94,     4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,     9361,9b52,9c68,9da4,c634,c938]
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,     19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,     2c68,36c2,     39c1,     4361,4634,49c1,4c94,4da1,4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,8e52,9361,9b52,9c68,9da4,c634,c938,cda1,ce52]

17a4 17a4,1da4,2b58,2e58,47a1,4da1,8b52,8e52
37a4 37a4,3b58,67a1,6e58,9b52,9da4,cda1,ce52

Can't make if using only Y mask (seat joints)...
Unknowns: 9
keys [1642,1643,16c3,16d2,1792,17c2,3521,3529,3561]
Unknowns: 82
keys [1212,1216,121a,121e,125a,1296,1642,1643,165a,1696,16c3,16d2,1792,17c2,1a5a,1e5a,3424,3425,342c,342d,343c,34a5,3524,352c,3534,35a4,35b4,3c18,3c1a,3c1c,3c1e,3c34,3c3c,3c58,3d24,3d2c,3d34,5212,5216,521a,521e,525a,5296,5342,5343,534a,534b,5352,53c2,5a12,5a16,5a1a,5a1e,5a38,5a52,5a5a,5a78,5b42,5b43,5b4a,5b4b,5b68,7818,781a,781c,781e,783c,785a,7948,7949,794a,794b,7958,7968,7a18,7a1c,7a38,7a58,7a78,7b48,7b49,7b68]

- Not sure why these are different
- Maybe size of Y mask?

02-May-2022

MyTMAM

          type, position
round-1 - logo-X, first
round-2 - logo-Y, first
round-3 - logo-X, last
round-4 - logo-Y, last

deconstruct(targetShape) {
  configs = [round1, ...];
  found = false;
  foreach (config of configs) {
    shape = targetShape;
    partlist = [];
    while (hasParts(shape)) {
      parts = findPossibleParts(shape, config);
      part = choosePart(parts, config);
      partList = add(partList, part);
      found = tryBuild(parts);
      if (found) break;
      shape = deletePart(shape, part);
    }
    if (found) break;
  }
  if (!found) partList = []
  return partList
}

findLogo(shape, config) {
  codes = getLogoCodes(config.type);
  foreach (pos of positions) { // rotations
    foreach (size of [4, 3, 2]) {
      foreach ({logo, mask} of codes[pos][size]) {
        if ((shape & mask) == logo) ...
      }
    }
  }
  return found[config.position];
}

-----

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy----
37a4
- - - -
X X - -
X X X -
- X - X
- - X -

ROUND 1
>LOGO [0484,0084,0024]
LOGO  f37a4 [0484]
LAYER f332 [0002]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 2
>LOGO [0484,0084,0424,0024]
LOGO  f37a4 [0484]
LAYER f332 [0002]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 3
>LOGO [0024,0484,0084]
LOGO  f37a4 [0024]
>LOGO [0048,0018]
LOGO  f378 [0048]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 4
>LOGO [0424,0024,0484,0084]
LOGO  f37a4 [0424]
>LOGO [0018]
LOGO  f338 [0018]
LAYER 0f32 [0002]
LAYER 00f3 [0003]
FOUND 37a4 [0424,0018,0002,0003] 4 0123+++

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy----
37a4
- - - -
X X - -
X X X -
- X - X
- - X -

ROUND 1
>LOGO [0024,0484,0084]
LOGO  f37a4 [0024]
>LOGO [0048,0018]
LOGO  f378 [0048]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 2
>LOGO [0024,0424,0484,0084]
LOGO  f37a4 [0024]
>LOGO [0048,0018]
LOGO  f378 [0048]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 3
>LOGO [0084,0484,0024]
LOGO  f37a4 [0084]
LAYER f372 [0002]
LAYER 0f37 [0007]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 4
>LOGO [0084,0484,0424,0024]
LOGO  f37a4 [0084]
LAYER f372 [0002]
LAYER 0f37 [0007]
LAYER 00f3 [0003]
LAYER 000f [000f]
NOT FOUND 37a4

-----

Using "origial" TMAM
- hat not implmented
- special case not implemented

Knowns: 2519
Unknowns: 287
[0178,0361,0378,03d2,07b4,1178,1361,1378,13d2,1622,1623,1625,1626,1627,1629,162a,162b,162c,162d,162e,162f,1631,1632,1633,1634,1635,1636,1637,1639,163a,163b,163c,163d,163e,163f,1643,1644,1645,1646,1647,1649,164a,164b,164c,164d,164e,164f,1651,1653,1654,1655,1656,1657,1659,165b,165c,165d,165e,165f,1661,1668,1678,16a2,16a3,16a6,16a7,16a8,16a9,16aa,16ab,16ac,16ad,16ae,16af,16b1,16b2,16b3,16b4,16b5,16b6,16b7,16b8,16b9,16ba,16bb,16bc,16bd,16be,16bf,16c3,16c4,16c5,16c6,16c7,16c8,16c9,16ca,16cb,16cc,16cd,16ce,16cf,16d1,16d2,16d3,16d4,16d5,16d6,16d7,16d8,16d9,16da,16db,16dc,16dd,16de,16df,16e1,1783,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a1,17a4,17b4,17c1,17c2,17e1,1a22,1a23,1a25,1a26,1a27,1a29,1a2a,1a2b,1a2c,1a2d,1a2e,1a2f,1a31,1a32,1a33,1a35,1a36,1a37,1a39,1a3a,1a3b,1a3d,1a3e,1a3f,1a62,1a63,1a64,1a65,1a66,1a67,1a6a,1a6b,1a6c,1a6d,1a6e,1a6f,1a71,1a72,1a73,1a74,1a75,1a76,1a77,1a79,1a7a,1a7b,1a7c,1a7d,1a7e,1a7f,1aa1,1aa4,1ab4,1ae1,1b61,1b78,1e22,1e23,1e25,1e26,1e27,1e29,1e2a,1e2b,1e2c,1e2d,1e2e,1e2f,1e31,1e32,1e33,1e35,1e36,1e37,1e39,1e3a,1e3b,1e3d,1e3e,1e3f,1e43,1e44,1e45,1e46,1e47,1e4a,1e4b,1e4e,1e4f,1e51,1e53,1e54,1e55,1e56,1e57,1e5b,1e5e,1e5f,1e61,1e68,1e78,1ea1,1ea4,1eb4,1ee1,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36b4,36c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37b4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

After fixing stacking order
- hat implemented
- special case not implemented

Knowns: 2800
Unknowns: 6
[0361,1361,1634,1b61,35a1,36c2]

These are all seat joints, except for 35a1, which is a problem because the TMAM fails to solve it.

The 35a1 shape has two 3-layer half-logos (with hat).  The TMAM picks the wrong one.
The TMAM picks in this order: ESWN
- 0121 is East
- 0181 is North

Rotating right once puts the good half-logo on the East, and that shape works.

Also need a way to fix the problem shape.

Picking last logo
Knowns: 2801
Unknowns: 5
[0361,1361,1634,1b61,36c2]

Only seat joints left.  I think that means there are no other ambiguous shapes.
But need to try all shapes to be sure.

Deconstruct
Rr------:--Rg--Rg:Rb--Rb--:RyRy----
35a1
- - - - 
X X - - 
X - X - 
- X - X 
X - - -
>LOGO f35a1 [] (2,hat)
>LOGO f35a1 [0121,0181] (3,hat)
LOGO  f35a1 [0121]
>LOGO f348 [] (2,hat)
>LOGO f348 [] (3,hat)
>LOGO f348 [] (4)
>LOGO f348 [] (3)
>LOGO f348 [0048] (2)
LOGO  f348 [0048]
LAYER 00f3 [0003]
LAYER 000f [000f]
NOT FOUND 35a1

The "special case" must be seat joints.
But adding support for pad, and looking for them first, causes other shapes to fail.

Need a "smart" way to find seat joints.

From nabby
{----RyRg:RgRg----:Rg--RyRg:--RyRbRc}
ed3c (7bc3)
- X X X
X - X X
X X - -
- - X X

- O B A
X - O X
X X - -
- - O X

where 
- green quads must exist
- missing quads, must not exist
- yellow quads could exist
- blue and cyan are a special case, both could exist but blue can't exist without cyan

0361 --    1361 --    1634 --    1b61 --    36c2 -- 
- - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    X - - -    X - - -    X - - -    X X - - 
X X - -    X X - -    - X X -    X X - X    - X X - 
- X X -    - X X -    X X - -    - X X -    - - X X 
X - - -    X - - -    - - X -    X - - -    - X - - 

0361 --    1361 --    4361 --    1b61 --    9361 -- 
- - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    X - - -    - - X -    X - - -    X - - X 
X X - -    X X - -    X X - -    X X - X    X X - - 
- X X -    - X X -    - X X -    - X X -    - X X - 
X - - -    X - - -    X - - -    X - - -    X - - - 

db61
- - - -
A - B C
X X - D
- X X -
X - - -

- never present
X always present
A,B,C,D optional
C or D only if A is present

Added a seat check, with a mask 0x07ff.

Knowns: 2803
Unknowns: 3
[1792,17c2,35a1]

Found all the seats, but now two fail (plus the problem shape).

1792 --    17c2 --    35a1 -- 
- - - -    - - - -    - - - - 
X - - -    X - - -    X X - - 
X X X -    X X X -    X - X - 
X - - X    - - X X    - X - X 
- X - -    - X - -    X - - - 

1793 - has 1000 set (which is 2000 and not in the mask) and D set (without A)
17c2 - has C and D set (without A)

Added support for seats (pads).
Ran all possible shapes.

Knowns: 48424
Unknowns: 8
[1bc1,2792,35a1,3a52,4e94,65a4,8d68,ca58]

1b61 1b61,1bc1,2792,27c2,4e34,4e94,8d38,8d68
35a1 35a1,3a52,65a4,6a52,95a1,9a58,c5a4,ca58

Test with (3-pad, 2-logo) for seat and (4,3,2-logo) for other. 

Knowns: 2735
Unknowns: 71
[0178,0378,03d2,07b4,1178,1378,13d2,1634,16b4,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a4,17b4,17c2,1b78,1e78,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36b4,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37b4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

0178 - two 2-logo, picks the wrong one.  Looking for a hat would fix.

Test with (3-pad, 2-logo) for seat and (2-hat, 3-hat, 4,3,2-logo) for other. 

Knowns: 2804
Unknowns: 2
[1634,35a1]

Much better.
1634 - one 3-pad, one 3-logo.  The first has a pad, but then fails because the second has no pad.
1bc1 - one 3-pad, then two 2-logo, picks the wrong one.
35a1 - problem shape - two 3-hat, picks the wrong one.

Test having a pad optional.

1634 works now.

1bc1 --    35a1 -- 
- - - -    - - - - 
X - - -    X X - - 
X X - X    X - X - 
- - X X    - X - X 
X - - -    X - - - 

1b61
X - - -
O X - X
- O X -
O - - -

const SEAT_CONFIG = [{ size: 3, pad: true }, { size: 2 }];
 
Knowns: 2638
Unknowns: 168
[0178,0378,1178,1212,1216,121a,121e,125a,1296,1378,13a1,13e1,1642,1643,164a,164b,165a,1696,16c3,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a1,17c2,1a5a,1b78,1e5a,3178,3352,3358,3378,3424,3425,342c,342d,343c,34a5,3522,3523,3524,3526,3527,352a,352b,352c,352e,352f,3534,3538,3568,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35a4,35b4,35c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a1,37c2,3c18,3c1a,3c1c,3c1e,3c34,3c3c,3c52,3c58,3cd2,3d24,3d2c,3d34,3d38,3d68,3da4,3db4,5178,5212,5216,521a,521e,525a,5296,5342,5343,534a,534b,5352,5358,5378,53a1,53c2,5a12,5a16,5a1a,5a1e,5a38,5a52,5a5a,5a78,5b42,5b43,5b4a,5b4b,5b68,5b78,7178,7352,7358,7378,73a1,7818,781a,781c,781e,783c,785a,78b4,7948,7949,794a,794b,7958,7968,7978,79a4,79b4,7a18,7a1c,7a38,7a58,7a78,7b48,7b49,7b58,7b68,7b78,f178,f352,f358,f378]

    const LOGO_CONFIG = [
      { size: 2, hat: true },
      { size: 3, hat: true },
      { size: 4 },
      { size: 3 },
      { size: 2 },
    ];
    
Knowns: 2800
Unknowns: 6
[0361,1361,1634,1b61,35a1,36c2]

    const LOGO_CONFIG = [
      { size: 4 },
      { size: 3 },
      { size: 2 },
    ];
    
Knowns: 2731
Unknowns: 75
[0178,0361,0378,03d2,07b4,1178,1361,1378,13d2,1634,16b4,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a4,17b4,17c2,1b61,1b78,1e78,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36b4,36c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37b4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

-----

Test key shapes without seat check
- Find logo returns largest in each position, and then choses first in the given direction.

config
{ seat: true, reverse: true },

Knowns: 2687
Unknowns: 119
[0125,012d,0361,03d2,07b4,1125,112d,121a,121e,1251,1253,1254,1255,1256,1257,1259,125a,125b,125c,125d,125e,125f,12b4,12d1,12d3,12d4,12d5,12d6,12d7,12d8,12d9,12da,12db,12dc,12dd,12de,12df,1361,13a4,13b4,13d2,1634,1678,16b4,16e1,17a4,17b4,1b61,1e78,3125,312d,31d2,334a,334b,3478,34a2,34a3,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,35a4,35b4,361a,361e,3658,3678,36b4,36c2,36e1,37a4,37b4,5125,512d,521a,521e,52b4,534a,534b,53a4,53b4,7125,712d,71d2,721a,721e,72b4,734a,734b,73a4,73b4,7925,792d,7952,79d2,f125,f12d,f34a,f34b]

config
{ seat: false, reverse: false },
{ seat: true, reverse: true },

Knowns: 2799
Unknowns: 7
[0361,1361,1634,17a4,1b61,36c2,37a4]

Requires seat:
[0x0361, 0x1361, 0x1634, 0x1b61, 0x36c2];

Change find logo to return largest from all positions, then choose the first in the given direction.

Knowns: 2738
Unknowns: 68
[0178,0361,0378,1178,1361,1378,1634,16b4,16d2,1785,1787,1788,1789,178a,178b,178c,178d,178e,178f,1792,17a4,17c2,1b61,1b78,3178,3358,3378,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35a1,35c2,36c2,3785,3787,3788,3789,378a,378b,378c,378d,378e,378f,3792,37a4,37c2,3c52,3cd2,5178,5358,5378,7178,7358,7378,78b4,79a4,79b4,f178,f358,f378]

Using the largest from *each* position works better than the largest from *all* positions.

Test both directions

Deconstruct
Rr--Rr--:--Rg----:Rb------:--------
0125
- - - -
- - - -
X - - -
- X - -
X - X -

ROUND 1
>LOGO [0121,0024]
LOGO  0125 [0024]
EXTRA 0101 [0001]
LAYER 0001 [0001]
ROUND 2
>LOGO [0121,0024]
LOGO  0125 [0121]
LAYER 0004 [0004]
FOUND 0125 [0121,0004] 01+

Choosing 0121 fails.
Choosing 0024 passes.

But you can't always choose the largest, as demonstrated by 0178 and others above.

Test my current (one core) TMAM with all possible shapes...

{ seat: false, reverse: true },

Knowns: 47612
Unknowns: 820
[0125,012d,01d2,021a,021e,024a,024b,02b4,02e1,0361,0392,03b4,03d2,03e1,0478,0485,0487,0634,0678,06b4,06c2,06e1,07b4,07e1,0938,09c1,09d2,0bd2,0c68,0c78,0c94,0e78,1125,112d,11d2,121a,121e,1251,1253,1254,1255,1256,1257,1259,125a,125b,125c,125d,125e,125f,12b4,12d1,12d3,12d4,12d5,12d6,12d7,12d8,12d9,12da,12db,12dc,12dd,12de,12df,1361,13a4,13b4,13d2,1634,1678,16b4,16e1,17a4,17b4,1925,192d,19c1,19d2,1b61,1bc1,1bd2,1c78,1c94,1d22,1d23,1d25,1d26,1d27,1d2a,1d2b,1d2d,1d2e,1d2f,1d38,1d68,1da1,1da4,1e78,2125,212d,21a2,21a3,21a5,21a6,21a7,21a8,21a9,21aa,21ab,21ac,21ad,21ae,21af,21e2,21e3,21e4,21e5,21e6,21e7,21e8,21e9,21ea,21eb,21ec,21ed,21ee,21ef,221a,221e,224a,224b,22b4,22e1,234a,234b,2392,23b4,23e1,2478,24a2,24a3,24a6,24a7,24a8,24a9,24aa,24ab,24ac,24ad,24ae,24af,24b1,24b2,24b3,24b5,24b6,24b7,24b8,24b9,24ba,24bb,24bc,24bd,24be,24bf,261a,261e,2658,2678,26b4,26c2,26e1,2792,27b4,27c2,27e1,2938,29d2,2b44,2b45,2b46,2b47,2b4a,2b4b,2b4c,2b4d,2b4e,2b4f,2b58,2b61,2bc1,2c68,2c78,2e11,2e13,2e15,2e17,2e19,2e1a,2e1b,2e1d,2e1e,2e1f,2e34,2e52,2e58,2e78,2e94,3125,312d,31d2,321a,321e,324a,324b,32b4,32e1,334a,334b,33a4,33b4,3478,34a2,34a3,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,35a4,35b4,361a,361e,3658,3678,36b4,36c2,36e1,37a4,37b4,3925,392d,39c1,39d2,3a44,3a45,3a46,3a47,3a4a,3a4b,3a4c,3a4d,3a4e,3a4f,3a61,3ac1,3b44,3b45,3b46,3b47,3b4a,3b4b,3b4c,3b4d,3b4e,3b4f,3b58,3b61,3bc1,424a,424b,42e1,4361,43b4,43d2,43e1,4478,4485,4487,4634,4678,4685,4687,46a1,46e1,4785,4787,4788,4789,478a,478b,478c,478d,478e,478f,4792,47a1,47c2,47e1,4851,4853,4854,4855,4856,4857,4859,485a,485b,485c,485d,485e,485f,4871,4872,4873,4874,4875,4876,4877,4879,487a,487b,487c,487d,487e,487f,49c1,49d2,4bd2,4c78,4c94,4e34,4e78,4e94,5125,512d,51d2,521a,521e,524a,524b,52b4,52e1,534a,534b,53a4,53b4,5478,5485,5487,561a,561e,5658,5678,5685,5687,56a1,56e1,5925,592d,5952,59d2,6125,612d,61a2,61a3,61a5,61a6,61a7,61a8,61a9,61aa,61ab,61ac,61ad,61ae,61af,61e2,61e3,61e4,61e5,61e6,61e7,61e8,61e9,61ea,61eb,61ec,61ed,61ee,61ef,621a,621e,624a,624b,62b4,62e1,634a,634b,6392,63b4,63e1,6478,6485,6487,6585,6587,6588,6589,658a,658b,658c,658d,658e,658f,6592,65a1,65c2,65e1,661a,661e,6658,6678,6685,6687,66a1,66e1,6785,6787,6788,6789,678a,678b,678c,678d,678e,678f,6792,67a1,67c2,67e1,6851,6853,6854,6855,6856,6857,6859,685a,685b,685c,685d,685e,685f,6871,6872,6873,6874,6875,6876,6877,6879,687a,687b,687c,687d,687e,687f,6925,692d,6952,69d2,6a11,6a13,6a15,6a17,6a19,6a1a,6a1b,6a1d,6a1e,6a1f,6a34,6a52,6a58,6a78,6a94,6c78,6c94,6e11,6e13,6e15,6e17,6e19,6e1a,6e1b,6e1d,6e1e,6e1f,6e34,6e52,6e58,6e78,6e94,7125,712d,71d2,721a,721e,724a,724b,72b4,72e1,734a,734b,73a4,73b4,7478,7485,7487,761a,761e,7658,7678,7685,7687,76a1,76e1,7925,792d,7952,79d2,81d2,8392,83b4,83d2,83e1,8485,8487,84a5,8678,86b4,86c2,86e1,87b4,87e1,8938,8952,89d2,8b52,8bd2,8c68,8d38,8d68,9125,912d,91d2,921a,921e,9251,9253,9254,9255,9256,9257,9259,925a,925b,925c,925d,925e,925f,92b4,92d1,92d3,92d4,92d5,92d6,92d7,92d8,92d9,92da,92db,92dc,92dd,92de,92df,9361,93a4,93b4,93d2,9485,9487,94a5,9522,9523,9525,9526,9527,952a,952b,952d,952e,952f,9538,9568,95a1,961a,961e,9658,9678,9685,9687,96a1,96e1,9925,992d,9952,99d2,9a52,9a58,9ad2,9b52,9bd2,9c68,9d22,9d23,9d25,9d26,9d27,9d2a,9d2b,9d2d,9d2e,9d2f,9d38,9d68,9da1,9da4,a125,a12d,a1d2,a21a,a21e,a24a,a24b,a2b4,a2e1,a34a,a34b,a3a4,a3b4,a478,a485,a487,a61a,a61e,a658,a678,a685,a687,a6a1,a6e1,a925,a92d,a952,a9d2,b125,b12d,b1d2,b21a,b21e,b24a,b24b,b2b4,b2e1,b34a,b34b,b3a4,b3b4,b478,b485,b487,b61a,b61e,b658,b678,b685,b687,b6a1,b6e1,b925,b92d,b952,b9d2,c1d2,c24a,c24b,c2e1,c34a,c34b,c3a4,c3b4,c478,c485,c487,c5a4,c634,c678,c685,c687,c6a1,c6e1,c938,c952,c9d2,d125,d12d,d1d2,d21a,d21e,d24a,d24b,d2b4,d2e1,d34a,d34b,d3a4,d3b4,d478,d485,d487,d61a,d61e,d658,d678,d685,d687,d6a1,d6e1,d925,d92d,d952,d9d2,e125,e12d,e1d2,e21a,e21e,e24a,e24b,e2b4,e2e1,e34a,e34b,e3a4,e3b4,e478,e485,e487,e61a,e61e,e658,e678,e685,e687,e6a1,e6e1,e925,e92d,e952,e9d2,f125,f12d,f1d2,f21a,f21e,f24a,f24b,f2b4,f2e1,f34a,f34b,f3a4,f3b4,f478,f485,f487,f61a,f61e,f658,f678,f685,f687,f6a1,f6e1,f925,f92d,f952,f9d2]

Total: 48432
Percent: 98.3%

0125 --    012d --    01d2 --    021a --    021e --    024a --    024b --    02b4 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X - - -    X - - -    X - - -    - X - -    - X - -    - X - -    - X - -    - X - - 
- X - -    - X - -    X - X X    X - - -    X - - -    - - X -    - - X -    X X - X 
X - X -    X - X X    - X - -    - X - X    - X X X    - X - X    X X - X    - - X - 
...

Test with both directions...

{ seat: false, reverse: true },
{ seat: false, reverse: false },

Knowns: 48384
Unknowns: 48
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,17a4,19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,2b58,2c68,36c2,37a4,39c1,3b58,4361,4634,49c1,4c94,4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,9361,9b52,9c68,9da4,c634,c938]

Total: 48432
Percent: 99.9%

0361 --    0392 --    0634 --    06c2 --    0938 --    09c1 --    0c68 --    0c94 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X - -    X X - -    - X X -    - X X -    X - - X    X - - X    - - X X    - - X X 
- X X -    X - - X    X X - -    - - X X    X X - -    - - X X    - X X -    X - - X 
X - - -    - X - -    - - X -    - X - -    - - - X    X - - -    - - - X    - - X - 

1361 --    1634 --    17a4 --    19c1 --    1b61 --    1bc1 --    1c94 --    1da4 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    X - - - 
X X - -    - X X -    X X X -    X - - X    X X - X    X X - X    - - X X    X - X X 
- X X -    X X - -    - X - X    - - X X    - X X -    - - X X    X - - X    - X - X 
X - - -    - - X -    - - X -    X - - -    X - - -    X - - -    - - X -    - - X - 

2392 --    26c2 --    2792 --    27c2 --    2938 --    2b58 --    2c68 --    36c2 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- X - -    - X - -    - X - -    - X - -    - X - -    - X - -    - X - -    X X - - 
X X - -    - X X -    X X X -    X X X -    X - - X    X X - X    - - X X    - X X - 
X - - X    - - X X    X - - X    - - X X    X X - -    X - X -    - X X -    - - X X 
- X - -    - X - -    - X - -    - X - -    - - - X    - - - X    - - - X    - X - - 

37a4 --    39c1 --    3b58 --    4361 --    4634 --    49c1 --    4c94 --    4e34 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X - -    X X - -    X X - -    - - X -    - - X -    - - X -    - - X -    - - X - 
X X X -    X - - X    X X - X    X X - -    - X X -    X - - X    - - X X    - X X X 
- X - X    - - X X    X - X -    - X X -    X X - -    - - X X    X - - X    X X - - 
- - X -    X - - -    - - - X    X - - -    - - X -    X - - -    - - X -    - - X - 

4e94 --    6392 --    6c94 --    8392 --    86c2 --    8938 --    8b52 --    8c68 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - X -    - X X -    - X X -    - - - X    - - - X    - - - X    - - - X    - - - X 
- X X X    X X - -    - - X X    X X - -    - X X -    X - - X    X X - X    - - X X 
X - - X    X - - X    X - - X    X - - X    - - X X    X X - -    X - X -    - X X - 
- - X -    - X - -    - - X -    - X - -    - X - -    - - - X    - X - -    - - - X 

8d38 --    8d68 --    9361 --    9b52 --    9c68 --    9da4 --    c634 --    c938 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - - X    - - - X    X - - X    X - - X    X - - X    X - - X    - - X X    - - X X 
X - X X    X - X X    X X - -    X X - X    - - X X    X - X X    - X X -    X - - X 
X X - -    - X X -    - X X -    X - X -    - X X -    - X - X    X X - -    X X - - 
- - - X    - - - X    X - - -    - X - -    - - - X    - - X -    - - X -    - - - X 

-----
30-Jun-2022

Find all shapes that require 4-layer half-logo

There are 71 of them.
Modified ops.js t find them and create only4.txt

Last few...
7b49 ST(0433 ST(0042 0013 ST(0001 0003)) 4849 ST(4848 0001))
7b68 ST(4332 ST(0042 0132 ST(0012 0012)) 4848)

Rr----Rr:----Rg--:RbRb--Rb:RyRyRy--
------Rr:--RgRg--:RbRb--Rb:RyRyRy--

7a1c --    7a38 --    7a58 --    7a78 --    7b48 --    7b49 --    7b68 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X X -    X X X -    X X X -    X X X -    X X X -    X X X -    X X X - 
- X - X    - X - X    - X - X    - X - X    X X - X    X X - X    X X - X 
X - - -    X X - -    X - X -    X X X -    - - X -    - - X -    - X X - 
- - X X    - - - X    - - - X    - - - X    - - - X    X - - X    - - - X 

7b49 --
- - - -
X X X -
X X - X
- - X -
X - - X

C:\Program Files\nodejs\node.exe --max-old-space-size=25000 .\main.js
Shape Processing Tools
Wed Oct 12 2022 18:06:22 GMT-0700 (Pacific Daylight Time)

Reading shape file: data/allShapes.txt
lines: 9316
good: 48432
bad: 2625

 1      4
 2     18
 3     68
 4    289
 5   1112
 6   3408
 7   7524
 8  10729
 9  10636
10   7798
11   4332
12   1817
13    560
14    120
15     16
16      1
total: 48432

C:\Program Files\nodejs\node.exe --max-old-space-size=25000 .\main.js
Shape Processing Tools
Wed Oct 12 2022 18:12:59 GMT-0700 (Pacific Daylight Time)

Reading shape file: data/allShapes.txt
lines: 9316
good: 48432
bad: 2625

 1      1
 2      4
 3     11
 4     44
 5    153
 6    463
 7   1004
 8   1449
 9   1443
10   1094
11    619
12    283
13     92
14     26
15      4
16      1
total: 6691

key shapes

6691 possible
 835 impossible
7526 total

3885 standard / stackable
2806 floating

13-Oct-2022

Working on MyTMAM
Level 123 does not work
----Su--:--Wc--Rg:WyCuSg--:WgRy--Cg
code: b7a4
b7a4 [8484,0002,0003,0003,000f] 01234++++

Deconstruct
----Rr--:--Rg--Rg:RbRbRb--:RyRy--Ry
b7a4
- - - - 
X X - X 
X X X - 
- X - X 
- - X -
ROUND 1
>LOGO [8484,0024]
LOGO  fb7a4 [8484]
LAYER f332 [0002]
LAYER 0f33 [0003]
LAYER 00f3 [0003]
LAYER 000f [000f]
FOUND b7a4 [8484,0002,0003,0003,000f] 01234++++

5th layer on top of 4-logo
reverse stacking

FIX: add reverse stacking to game
TODO: simplify stacking methods, and then implement in-game

Problem
Level 211: ----Wc--:Sc--Rb--:--Wc----
code: 0254

0254 [0004,0024,0001] 012++

The solution has only 3 parts.
The stacking test component uses 4 non "smart" stackers, which returns null when any of the 5 inputs is null.

could add smart stackers, or use intermediate results.
But first, simplify / reduce the needed stacking orders.  Should only need 3 or 4.

level 223: Ry--Sw--:--Cy--Wg:Rr----Wr:----Rg--
code: 49a5

49a5 [0084,0121,0048] 01+2+

--WbSw--:Sw----Cb:----SbWw:RbWw----
3c96 [0084,0012,0024,0018] 01+23++
Missing test stacker

Sr------:--CrSrCr:RuCw--Cw:----Ru--
4be1 [0021,000c,0048,0003] 0123+++
A fifth layer prevents the reverse stacking from working.  But that's okay if the stacking checks early (only 4 layers).

Wy------:--CwCw--:WrCr----:----Cr--
4361 [0121,0424] 01+
That's a seat joint

Need some reverse search codes...
Knowns: 48348
Unknowns: 84
[1792,17c2,181a,181e,185a,1d38,1d68,2125,212d,24a5,29e1,2b61,2bc1,34a5,35a4,35b4,381a,381e,385a,3a58,3a78,3c1a,3c1e,424a,424b,425a,43d2,4978,524a,524b,534a,534b,581a,581e,5c1a,5c1e,6125,612d,6925,692d,781a,781e,7c1a,7c1e,8185,8187,81a5,86b4,8e34,8e94,9a52,9ad2,a125,a12d,a185,a187,a385,a387,a925,a92d,c185,c187,c1a5,c24a,c24b,c25a,c34a,c34b,c385,c387,c5a1,c5e1,d24a,d24b,d34a,d34b,e125,e12d,e185,e187,e385,e387,e925,e92d]

1792 --    17c2 --    181a --    181e --    185a --    1d38 --    1d68 --    2125 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    X - - -    - X - - 
X X X -    X X X -    - - - X    - - - X    - - - X    X - X X    X - X X    X - - - 
X - - X    - - X X    X - - -    X - - -    X - X -    X X - -    - X X -    - X - - 
- X - -    - X - -    - X - X    - X X X    - X - X    - - - X    - - - X    X - X - 

212d --    24a5 --    29e1 --    2b61 --    2bc1 --    34a5 --    35a4 --    35b4 -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- X - -    - X - -    - X - -    - X - -    - X - -    X X - -    X X - -    X X - - 
X - - -    - - X -    X - - X    X X - X    X X - X    - - X -    X - X -    X - X - 
- X - -    - X - X    - X X X    - X X -    - - X X    - X - X    - X - X    X X - X 
X - X X    X - X -    X - - -    X - - -    X - - -    X - X -    - - X -    - - X - 

381a --    381e --    385a --    3a58 --    3a78 --    3c1a --    3c1e --    424a -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
X X - -    X X - -    X X - -    X X - -    X X - -    X X - -    X X - -    - - X - 
- - - X    - - - X    - - - X    - X - X    - X - X    - - X X    - - X X    - X - - 
X - - -    X - - -    X - X -    X - X -    X X X -    X - - -    X - - -    - - X - 
- X - X    - X X X    - X - X    - - - X    - - - X    - X - X    - X X X    - X - X 

424b --    425a --    43d2 --    4978 --    524a --    524b --    534a --    534b -- 
- - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - -    - - - - 
- - X -    - - X -    - - X -    - - X -    X - X -    X - X -    X - X -    X - X - 
- X - -    - X - -    X X - -    X - - X    - X - -    - X - -    X X - -    X X - - 
- - X -    X - X -    X - X X    X X X -    - - X -    - - X -    - - X -    - - X - 
X X - X    - X - X    - X - -    - - - X    - X - X    X X - X    - X - X    X X - X 
...

--Rr----:Rg----Rg:RbRbRb--:Ry------
1792 [0012,0018,0012,0004] 0123+++

WgSg--Ru:----Rg--:Ry----Wg:Cc--Ru--
594b [4848,0003,0001,0001,000f] 01+234+++
 
--RrRr--:Rg------:Rb------:Ry------
1116 [0012,0004,0001,0001] 01+23++

Problem: Sofware TMAM did not use fifth layer, but game TMAM did.  Not clear if stacking solutions are correct.
TODO: Modify decompose to check after finding all parts.  Maybe need different set of stacking solutions.
OR... Modify game TMAM to flag which stacking is correct and remove 5th layer if not needed.

Note: There are some solutions that the 5th layer can cause the stacking to fail.

Only use X (no seat config)
The list of unknowns has changed. Why???
Unknowns: 48
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,17a4,19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,2b58,2c68,36c2,37a4,39c1,3b58,4361,4634,49c1,4c94,     4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,     9361,9b52,9c68,9da4,c634,c938]
[0361,0392,0634,06c2,0938,09c1,0c68,0c94,1361,1634,     19c1,1b61,1bc1,1c94,1da4,2392,26c2,2792,27c2,2938,     2c68,36c2,     39c1,     4361,4634,49c1,4c94,4da1,4e34,4e94,6392,6c94,8392,86c2,8938,8b52,8c68,8d38,8d68,8e52,9361,9b52,9c68,9da4,c634,c938,cda1,ce52]

Same number but 8 differences, including 17a4 and 37a4, which I found previously.
Maybe logo search order?  Yes, that was it.

So what does this mean?
- Changing logo search order changes which shapes are found with the X mask.
- Some shapes can be solved with either X mask (strict logo) or Y mask (seat joint).  Like 17a4, and the 8 differences above.
- X mask might miss some (8?) when looking in a particualar order both forward and reverse.
- But Y mask does find them.
- Maybe this is why I had previously found that there were only 5 key shapes that required seat joints
- But to find all solutions, MyTMAM needs to find more than that when looking for them in order to find the ones X mask misses.

Note: using key shapes is misleading, as some shapes are both.

I think there are 5 key shapes that require seat joints.
Including rotations and mirrors: 5 * 8 = 40 shapes
Then there are 8 that X mask (strict logo) misses: 40 + 8 = 48 shapes.
(which change depending on logo search order)

Rr--Sy--:--Wr----:Cu------:Rg--Ry--
5125 [0121,0004,0005] 01+2+

Seat w/pad

0361 --    1361 --    1634 --    1b61 --    36c2 -- 
- - - -    - - - -    - - - -    - - - -    - - - - 
- - - -    C - - -    B - - -    C - - -    C C - - 
A B - -    A B - -    - B A -    A B - C    - A B - 
- A B -    - A B -    B A - -    - A B -    - - A B 
A - - -    A - - -    - - A -    A - - -    - A - - 

06c2       0634
- - - -    - - - -
- A B -    - B A -
- - A B    B A - -
- A - -    - - A -

A south    A south
B west     B east

4da1 [0181,0042,0048] 012++

--RbSg--

Working on Binz' BUSTTMAM
- looking for half-logos in all positions.
- not including the logos that occupy the same position.
- there are many shapes (like 5a5a) that result in 24 posible logos which iteratie over all 16 million combinations.
- there must be a better way.
- perhaps try all 1 logo, then 2 logo combos, etc.  stop at 4 logos / pieces.
- need to check actual save game to see what it does in this case.
- it's hard to believe that the TMAM takes the order of 2^24 for some shapes.
- maybe the way the logos are sorted makes it faster?  it does search foward and backwards in parallel.
- did not implement 5th layer yet, but some solutions found have 5 pieces.
Knowns: 6147
Unknowns: 544
[3422,3423,3424,3425,3426,3427,342a,342b,342c,342d,342e,342f,3431,3432,3433,3435,3436,3437,3439,343a,343b,343c,343d,343e,343f,3442,3443,3444,3445,3446,3447,3448,3449,344a,344b,344c,344d,344e,344f,3451,3453,3454,3455,3456,3457,3459,345a,345b,345c,345d,345e,345f,3462,3463,3464,3465,3466,3467,3468,3469,346a,346b,346c,346d,346e,346f,3471,3472,3473,3474,3475,3476,3477,3478,3479,347a,347b,347c,347d,347e,347f,34a2,34a3,34a5,34a6,34a7,34a8,34a9,34aa,34ab,34ac,34ad,34ae,34af,34b1,34b2,34b3,34b5,34b6,34b7,34b8,34b9,34ba,34bb,34bc,34bd,34be,34bf,34c3,34c4,34c5,34c6,34c7,34c8,34c9,34ca,34cb,34cc,34cd,34ce,34cf,34d1,34d3,34d4,34d5,34d6,34d7,34d8,34d9,34da,34db,34dc,34dd,34de,34df,34e2,34e3,34e4,34e5,34e6,34e7,34e8,34e9,34ea,34eb,34ec,34ed,34ee,34ef,34f1,34f2,34f3,34f4,34f5,34f6,34f7,34f8,34f9,34fa,34fb,34fc,34fd,34fe,34ff,3521,3522,3523,3524,3525,3526,3527,3529,352a,352b,352c,352d,352e,352f,3534,3538,3561,3568,3581,3583,3585,3587,3588,3589,358a,358b,358c,358d,358e,358f,3592,35c1,35c2,3c11,3c13,3c15,3c17,3c18,3c19,3c1a,3c1b,3c1c,3c1d,3c1e,3c1f,3c34,3c52,3c58,3c68,3d24,3d2c,3d34,5211,5212,5213,5215,5216,5217,5219,521a,521b,521d,521e,521f,5221,5222,5223,5225,5227,5229,522a,522b,522d,522f,5231,5232,5233,5234,5235,5236,5237,5239,523a,523b,523c,523d,523e,523f,5251,5253,5255,5257,5259,525d,5271,5272,5273,5275,5277,5279,527a,527b,527d,527f,5291,5293,5295,5296,5297,5298,5299,529a,529b,529c,529d,529e,529f,52a2,52a3,52a5,52a7,52a8,52a9,52aa,52ab,52ad,52af,52b1,52b2,52b3,52b4,52b5,52b6,52b7,52b8,52b9,52ba,52bb,52bc,52bd,52be,52bf,52d1,52d3,52d5,52d7,52d8,52d9,52db,52dd,52df,52f1,52f2,52f3,52f5,52f7,52f8,52f9,52fa,52fb,52fd,52ff,5342,5343,5344,5345,5346,5347,534a,534b,534c,534d,534e,534f,5352,5358,5381,5383,5385,5387,5388,5389,538a,538b,538c,538d,538e,538f,53a1,53a4,53c2,5a11,5a12,5a13,5a15,5a16,5a17,5a1a,5a1b,5a1e,5a1f,5a34,5a38,5a52,5b42,5b43,5b44,5b45,5b46,5b47,5b4a,5b4b,5b4e,5b4f,5b52,5b68,7811,7813,7815,7817,7818,7819,781a,781b,781c,781d,781e,781f,7831,7832,7833,7835,7836,7837,7839,783a,783b,783c,783d,783e,783f,7851,7853,7855,7857,7859,785a,785b,785d,785f,7871,7872,7873,7875,7877,7879,787a,787b,787d,787f,7881,7883,7885,7887,7888,7889,788a,788b,788d,788f,7891,7893,7894,7895,7896,7897,7898,7899,789a,789b,789c,789d,789e,789f,78a2,78a3,78a5,78a7,78a8,78a9,78aa,78ab,78ad,78af,78b1,78b2,78b3,78b4,78b5,78b6,78b7,78b8,78b9,78ba,78bb,78bc,78bd,78be,78bf,78d1,78d3,78d5,78d7,78d8,78d9,78da,78db,78dd,78df,78f1,78f2,78f3,78f5,78f7,78f8,78f9,78fa,78fb,78fd,78ff,7921,7922,7923,7925,7926,7927,7929,792a,792b,792d,792e,792f,7944,7945,7946,7947,7948,7949,794a,794b,794c,794d,794e,794f,7952,7958,7968,79a1,79a4,7a11,7a12,7a13,7a15,7a16,7a17,7a18,7a19,7a1a,7a1b,7a1c,7a1d,7a1e,7a1f,7a34,7a38,7a92,7a94,7b48,7b49,7b68]

3422 [0002,0242,0001,000f] 0123+++

These look like 5th layer shapes.

Added support for 5th layer shapes.
Added stats for each shape: number of logos found, iteration count (work)

Knowns: 6204
Unknowns: 487
[0001,0003,0005,0007,000f,0011,0012,0013,0015,0016,0017,001a,001b,001e,001f,0031,0033,0035,0036,0037,003c,003d,003f,0051,0053,0055,0057,005a,005b,005f,0071,0072,0073,0075,0077,0079,007a,007b,007d,007f,00f1,00f3,00f5,00f7,00ff,0111,0112,0113,0115,0116,0117,011a,011b,011e,011f,0121,0122,0123,0125,0126,0127,0129,012a,012b,012d,012e,012f,0131,0132,0133,0135,0136,0137,0138,0139,013a,013b,013c,013d,013e,013f,0151,0153,0154,0155,0156,0157,015a,015b,015e,015f,0162,0163,0164,0165,0166,0167,0169,016a,016b,016c,016d,016e,016f,0171,0172,0173,0174,0175,0176,0177,0178,0179,017a,017b,017c,017d,017e,017f,01a2,01a3,01a5,01a6,01a7,01aa,01ab,01ae,01af,01b1,01b2,01b3,01b5,01b6,01b7,01ba,01bb,01be,01bf,01e2,01e3,01e4,01e5,01e6,01e7,01ea,01eb,01ee,01ef,01f1,01f2,01f3,01f4,01f5,01f6,01f7,01fa,01fb,01fe,01ff,0311,0312,0313,0315,0316,0317,0318,0319,031a,031b,031c,031d,031e,031f,0331,0333,0334,0335,0336,0337,033c,033d,033f,0351,0353,0354,0355,0356,0357,0359,035a,035b,035c,035d,035e,035f,0361,0362,0363,0364,0365,0366,0367,0369,036a,036b,036c,036d,036e,036f,0371,0372,0373,0374,0375,0376,0377,0378,0379,037a,037b,037c,037d,037e,037f,03c3,03c4,03c5,03c6,03c7,03cc,03cd,03cf,03d1,03d2,03d3,03d4,03d5,03d6,03d7,03d8,03d9,03da,03db,03dc,03dd,03de,03df,03f1,03f3,03f4,03f5,03f6,03f7,03fc,03fd,03ff,0511,0512,0513,0515,0516,0517,051a,051b,051e,051f,0531,0532,0533,0535,0536,0537,0539,053a,053b,053c,053d,053e,053f,0551,0552,0553,0555,0557,055a,055b,055f,0571,0572,0573,0575,0577,0578,0579,057a,057b,057d,057f,05a2,05a3,05a5,05a7,05aa,05ab,05af,05b1,05b2,05b3,05b5,05b6,05b7,05ba,05bb,05be,05bf,05f1,05f2,05f3,05f5,05f7,05fa,05fb,05ff,0711,0712,0713,0715,0716,0717,0718,0719,071a,071b,071c,071d,071e,071f,0721,0722,0723,0725,0727,0729,072a,072b,072d,072f,0731,0732,0733,0734,0735,0736,0737,0738,0739,073a,073b,073c,073d,073e,073f,0751,0752,0753,0755,0757,0758,0759,075a,075b,075d,075f,0771,0772,0773,0775,0777,0778,0779,077a,077b,077d,077f,0791,0793,0795,0796,0797,0798,0799,079a,079b,079c,079d,079e,079f,07a2,07a3,07a5,07a7,07a8,07a9,07aa,07ab,07ad,07af,07b1,07b2,07b3,07b4,07b5,07b6,07b7,07b8,07b9,07ba,07bb,07bc,07bd,07be,07bf,07d1,07d2,07d3,07d5,07d7,07d8,07d9,07da,07db,07dd,07df,07f1,07f2,07f3,07f5,07f7,07f8,07f9,07fa,07fb,07fd,07ff,0f11,0f12,0f13,0f15,0f16,0f17,0f1a,0f1b,0f1e,0f1f,0f31,0f33,0f34,0f35,0f36,0f37,0f3c,0f3d,0f3f,0f51,0f52,0f53,0f55,0f57,0f5a,0f5b,0f5f,0f71,0f72,0f73,0f75,0f77,0f78,0f79,0f7a,0f7b,0f7d,0f7f,0ff1,0ff3,0ff5,0ff7,0fff]

Saving known builds
Saving chart of unknowns

Stats
Max work: 20513
Max logos: 24
Total work: 441126 of 679333837

Something broke <4 layer shapes.
My new toLayers() always return 4 layers...

Max work shape...

Deconstruct
--Rr--Rr:Rg--Rg--:--Rb--Rb:Ry--Ry--
5a5a
- - - - 
X - X - 
- X - X 
X - X - 
- X - X
>LOGO [[1212,1210,0212,1200,0210,0012],[4242,4240,0242,4200,0240,0042],[4848,4840,0848,4800,0840,0048],[1818,1810,0818,1800,0810,0018]]
>>NUM 24
STATS 20513 of 16777216
FOUND 5a5a [0042,1818,0042,000f] 0123+++

- modified toLayers() to return same number of layers as the shape.
- changed find logos to return same order as Binz' TMAM.
- changed logo sets to include both directions of found logos.

Deconstruct
--Rr--Rr:Rg--Rg--:--Rb--Rb:Ry--Ry--
5a5a
- - - - 
X - X - 
- X - X 
X - X - 
- X - X
>LOGO [0018,0048,0042,0012,0810,0840,0240,0210,1800,4800,4200,1200,0818,0848,0242,0212,1810,4840,4240,1210,1818,4848,4242,1212]
>>NUM 24
PARTS [000a,0005,000a,0005,000f]
PARTS [000a,0005,000a,0005,000f]
PARTS [0002,0018,0004,000a,0005,000f]
PARTS [0008,1212,0004,0008,0004,000f]
PARTS [0002,0048,0001,000a,0005,000f]
PARTS [0008,4242,0001,0008,0001,000f]
PARTS [0002,0048,0018,000a,0005,000f]
PARTS [0008,4242,1212,0008,000f]
PARTS [0008,0042,0001,000a,0005,000f]
PARTS [0002,4848,0001,0002,0001,000f]
PARTS [0042,0018,000a,0005,000f]
PARTS [4848,1212,000f]
STATS 12 of 33554432
FOUND 5a5a [4848,1212,000f] 012++

Stats
Max work: 12
Max logos: 24
Total work: 17 of 33554444

- Now finds 5a5a in 12 instead of 20513.
- Need to test all shapes.

- test all key shapes

Knowns: 6691
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Stats
Max work: 8195
Max logos: 24
Total work: 60698 of 1358667674

- All solutions to key shapes found.
- Average work is 60698 / 6691 = 9.07
- TODO: investigate stacking orders - how many are used?  Looks like all (10) of them.
- Worst case is 8195 - need to find it.

125a 11 1028
16d2 10 523
1a56 13 522
1afa 18 513
1e5a 18 523
1e5b 18 513
1e5e 18 513
1e5f 18 513
1ebe 18 513
34a5 11 2051
35a4 13 2052
525a 14 8195
725a 14 515
785a 14 2052
f1a5 14 521

- Complex shapes (require a half-logo)

Knowns: 20320
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Saving stats
Stats
Max work: 8195
Max logos: 24
Total work: 326431 of 2124015874

- Average work 326431 / 20320 = 16.06

- Shapes that take >1024 iters to solve...
125a 11 1028
21a5 11 1028
24a5 11 2051
25a9 13 1030
25ac 13 1030
34a5 11 2051
35a4 13 2052
425a 11 2051
525a 14 8195
585a 14 2052
61a5 11 1028
65a1 13 1028
785a 14 2052
925a 11 1028
9a52 13 1028
a1a5 14 4102
a4a5 14 2054
b4a5 14 2054
c25a 11 2051
ca52 13 2052
d25a 14 8195
e1a5 14 4102

Deconstruct
--Rr--Rr:Rg--Rg--:--Rb----:Ry--Ry--
525a
- - - -
X - X -
- X - -
X - X -
- X - X

>LOGO [0018,0048,0042,0012,0240,0210,4200,1200,0242,0212,4240,1210,4242,1212]
>>NUM 14
STATS 8195 of 32768
FOUND 525a [4242,0018,0001,000f] 01+23++

Knowns: 20320
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Saving stats
Stats
Max logos: 24
Max iters: 285
Total iters: 236628 of 13849796

- Average iters 236628/20320 = 11.65

1e5a 18 283
2da5 18 279
4b5a 18 285
87a5 18 283

I implemented a new iterator that uses hammingCombos() and it works much better.
         total   ave   max
binary   326431  16.1  8195
hamming  236628  11.6   285

Deconstruct
--Rr--Rr:Rg--Rg--:RbRb--Rb:----Ry--
4b5a
- - - -
- - X -
X X - X
X - X -
- X - X

>LOGO [0018,0048,0042,0012,0810,0840,0240,0210,4800,4200,0818,0848,0242,0212,4840,4240,4848,4242]
>>NUM 18
STATS 285 of 8096
FOUND 4b5a [4848,0012,0003,000f] 012++3+

- Added logo sets [2,3], [3,4], [4,2]
- Does not do reverse logoset
- Still uses hamming combos

Knowns: 20320
Unknowns: 0
[]

Saving known builds
Saving chart of unknowns

Saving stats
Stats
Max logos: 24
Max iters: 226
Total iters: 228840 of 6498218

- total iters decreased to 228840 from 236628.  not correct due to error in iter count.
- max iters decreased to 226 from 285.  Better, but not a lot.
- considering this would be done in parallel, it would be about 76 instead of 143.
- so about half the time needed.
- probably a bit more than 76 because logosets are different lengths.
- need to keep stats for each logoset.

- maybe try NS, EW logosets.  But would also need NE, NW, SE, SW for seated logos.
- that would be 6 instead of 3.  Or 18 logosets if both partitioning was used.
- This would at least double the size of the TMAM.

Slow shapes
16d2 10 216
1c78 10 222
29e1 10 218
2cb4 10 216
43d2 10 217
4978 10 221
5aa5 8 226
83e1 10 219
86b4 10 222
a55a 8 226

- Compare binary/hamming combos with 2 and 3 logo sets.
- Use complex shapes - those that require logos

Knowns: 20320

2, binary
Max iters: 8194
Total iters: 303951 of 2123995552
525a 14 8194
d25a 14 8194

3, binary
Max iters: 1599
Total iters: 442383 of 100984300
4a53 13 1599
4a59 13 1599

2, hamming
Max iters: 238
Total iters: 214328 of 13829476
1c78 10 238
86b4 10 238

3, hamming
Max iters: 227
Total iters: 249160 of 6498218
5aa5 8 227
a55a 8 227

sets  combo    total   max   ave   time
   2  binary   303951  8194  7.48  4097
   3  binary   442383  1599  7.26   533
   2  hamming  214328   238  5.27   119
   3  hamming  249160   227  4.09    76

- The ave and max values are off because different sets have different lengths.
- Modified the code to keep track of iters per combo.

2, binary
Max iters: 4097
Ave iters: 7.18
Total max iters: 145850
Total iters: 303951 of 2123995552
525a 14 4097
a1a5 14 2050
a4a5 14 1026

3, binary
Max iters: 1056
Ave iters: 9.41
Total max iters: 191268
Total iters: 442383 of 100984300
4a53 13 1056
4a59 13 1056

2, hamming
Max logos: 24
Max iters: 119
Ave iters: 4.97
Total max iters: 101039
Total iters: 214328 of 13829476
1c78 10 119
4978 10 118
83e1 10 116

3, hamming
Max iters: 113
Ave iters: 4.84
Total max iters: 98380
Total iters: 249160 of 6498218
5aa5 8 113
1c78 10 109
4978 10 108

sets  combo    total   sum     ave   max
   2  binary   303951  145850  7.18  4097
   3  binary   442383  191268  9.41  1056
   2  hamming  214328  101039  4.97  119
   3  hamming  249160   98380  4.84  113

- Need a fast hamming combo that generates 0, 1, 2, 3, 4 bit combos.
- Given: max size / position
- Try...
- 4 nested for loops / shift registers: A B C D
- The value of each represents a bit postition.
- The combo value is 1<<A | 1<<B | 1<<C | 1<<D
- Start with all registers equal to zero.
- for A: 0..max
  - for B: 0..A
    - for C: 0..B
      - for D: 0..C

hc1(8, 4) returns 162 [0001,0002,0004,0008,0010,0020,0040,0080,
                       0003,0005,0006,0009,000a,000c,0011,0012,0014,0018,0021,0022,0024,0028,0030,0041,0042,0044,0048,0050,0060,0081,0082,0084,0088,0090,00a0,00c0,
                       0007,000b,000d,000e,0013,0015,0016,0019,001a,001c,0023,0025,0026,0029,002a,002c,0031,0032,0034,0038,0043,0045,0046,0049,004a,004c,0051,0052,0054,0058,0061,0062,0064,0068,0070,0083,0085,0086,0089,008a,008c,0091,0092,0094,0098,00a1,00a2,00a4,00a8,00b0,00c1,00c2,00c4,00c8,00d0,00e0,
                       000f,0017,001b,001d,001e,0027,002b,002d,002e,0033,0035,0036,0039,003a,003c,0047,004b,004d,004e,0053,0055,0056,0059,005a,005c,0063,0065,0066,0069,006a,006c,0071,0072,0074,0078,0087,008b,008d,008e,0093,0095,0096,0099,009a,009c,00a3,00a5,00a6,00a9,00aa,00ac,00b1,00b2,00b4,00b8,00c3,00c5,00c6,00c9,00ca,00cc,00d1,00d2,00d4,00d8,00e1,00e2,00e4,00e8,00f0]
hc2(8, 4) returns 162 [0001,
                       0002,0003,
                       0004,0005,0006,0007,
                       0008,0009,000a,000b,000c,000d,000e,000f,
                       0010,0011,0012,0013,0014,0015,0016,0017,0018,0019,001a,001b,001c,001d,001e,
                       0020,0021,0022,0023,0024,0025,0026,0027,0028,0029,002a,002b,002c,002d,002e,0030,0031,0032,0033,0034,0035,0036,0038,0039,003a,003c,
                       0040,0041,0042,0043,0044,0045,0046,0047,0048,0049,004a,004b,004c,004d,004e,0050,0051,0052,0053,0054,0055,0056,0058,0059,005a,005c,0060,0061,0062,0063,0064,0065,0066,0068,0069,006a,006c,0070,0071,0072,0074,0078,
                       0080,0081,0082,0083,0084,0085,0086,0087,0088,0089,008a,008b,008c,008d,008e,0090,0091,0092,0093,0094,0095,0096,0098,0099,009a,009c,00a0,00a1,00a2,00a3,00a4,00a5,00a6,00a8,00a9,00aa,00ac,00b0,00b1,00b2,00b4,00b8,00c0,00c1,00c2,00c3,00c4,00c5,00c6,00c8,00c9,00ca,00cc,00d0,00d1,00d2,00d4,00d8,00e0,00e1,00e2,00e4,00e8,00f0]

- Added a different order of hamming combos

3, hamming
Max iters: 412
Ave iters: 8.36
Total max iters: 169813
Total iters: 400400 of 6498218
4a53 13 412
4a59 13 412

- Max iters was 113, now 412 - much worse
- searching combos in numerical order is worse.
- better to search for all 1 half-logos, then 2 half-logos, etc.

- Can remove these half-logos...
  - 2,3,4 layer half-logo with filled void on layer 1 (bottom layer of target shape).

Problem shapes for 897701215...
1111
1100
0101
1000

1100
1010
0101
1000

35a1       f3a1    
- - - -    - - - - 
X X - -    X X X X 
X - X -    X X - - 
- X - X    - X - X 
X - - -    X - - - 

Mon Nov 21 2022 08:18:23 GMT-0800 (Pacific Standard Time)

Deconstruct
Rr------:--Rg--Rg:Rb--Rb--:RyRy----
35a1
- - - -
X X - -
X - X -
- X - X
X - - -

ROUND 1
>LOGO [0121,0181]
LOGO  f35a1 [0121]
>LOGO [0048]
LOGO  f348 [0048]
LAYER 00f3 [0003]
LAYER 000f [000f]
ROUND 2
>LOGO [0121,0181]
LOGO  f35a1 [0181]
>LOGO [0242]
LOGO  f342 [0242]
LAYER 00f1 [0001]
LAYER 000f [000f]
FOUND 35a1 [0181,0242,0001,000f] 0123+++

Deconstruct
Rr------:--Rg--Rg:RbRb----:RyRyRyRy
f3a1
- - - -
X X X X
X X - -
- X - X
X - - -

ROUND 1
>LOGO [0021,0181]
LOGO  ff3a1 [0021]
>LOGO [0018]
LOGO  ff38 [0018]
LAYER 0ff2 [0002]
LAYER 00ff [000f]
FOUND f3a1 [0021,0018,0002,000f] 0123+++

- Might be 4-part solutions only need 2-layer half-logos?
- Maybe search using binary in that case would not make much difference?

16-Feb-2023
Working on desconstructor design by Skim

It is not iterative.  It grows half-logos, all four corners/sides at the same time.

Here's the cardboard box top issue...

Deconstruct
RrRrRrRr:RgRgRgRg:RbRbRbRb:RyRyRyRy
ffff
- - - -
X X X X
X X X X
X X X X
X X X X

RULES \/\
LAYER 000f
RULE  \
LAYER 000f
RULE  /
>PART 0012
>PART 0024
>PART 0048
>PART 0081
LAYER 000f
RULE  \
LAYER 000f
RULE  -
>PART 0012
>PART 0024
>PART 0048
>PART 0081
PARTS [0012,0024,0048,0081,0012,0024,0048,0081]

Truth table
- - - -
A B C D
E F G H
- - - -

F - Current corner
P - Passed in part
Q - Previous rule
R - Current rule:
  - flat (eject)
  | stack up
  \ float left
  / float right

A B C D E F G H P Q R
. . . . . 0 . . . . .  NOP
. 1 . . . 1 . . 0 . |   >B
. 1 . . . 1 . . 1 | |  S>B
1 . . . . 1 . . 0 . \   >A
1 . . . 0 1 . . 1 / \  S>A
0 . 1 . . 1 . 0 0 . \   >C
0 . 1 . . 1 0 0 1 \ \  S>C
. . 1 . . 1 . . 0 . /   >C
. . 1 . . 1 0 . 1 \ /  S>C
1 . 0 . . 1 . 0 0 . /   >A
1 . 0 . 0 1 . 0 1 / /  S>A

Process
- If P exists, stack current corner on top of it.
- Pass result to next layer, else eject it as a part.

Ran all complex shapes with \\\

Knowns: 12525
Unknowns: 7795
[0121,0125,0129,012d,0169...

Try \/\

Knowns: 12683
Unknowns: 7637
[0121,0125,0129,012d...

Try \/\, /\/

Knowns: 14200
Unknowns: 6120
[0392,03b4,03d2,03e1...

Deconstruct
--Rr----:Rg----Rg:RbRb----:--------
0392
- - - -
- - - -
X X - -
X - - X
- X - -

RULES \/\
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 0009
RULE  /
>PASS [0008,0012,0000,0000]
>DIR  ["/","/","-","-"]
LAYER 0003
RULE  \
>PART 0018
>PART 0212
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0018,0212]

NOT FOUND 0392

It finds the correct parts, but stacking does not work.
Because the old stacker assumes parts on the bottom come first.

Need to sort by bottom of parts.  Or try more/different stacking orders.
Might also need to combine parts (into superparts) because ther are more parts found using this method than previous methods.

Modifed partsList to group parts by bottom layer.

Deconstruct
----Rr--:RgRg--Rg:RbRb----:--------
03b4
- - - -
- - - -
X X - -
X X - X
- - X -

RULES \/\
LAYER 0004
RULE  \
>PASS [0000,0004,0000,0000]
>DIR  ["-","\\","-","-"]
LAYER 000b
RULE  /
>PART 0024
>PASS [0008,0001,0000,0000]
>DIR  ["/","/","-","-"]
LAYER 0003
RULE  \
>PART 0018
>PART 0021
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0024,0018,0021]

RULES /\/
LAYER 0004
RULE  /
>PASS [0000,0000,0000,0004]
>DIR  ["-","-","-","/"]
LAYER 000b
RULE  \
>PART 0084
>PASS [0002,0001,0000,0000]
>DIR  ["\\","/","-","-"]
LAYER 0003
RULE  /
>PART 0012
>PART 0021
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0084,0012,0021]

NOT FOUND 03b4

03b4 [0024,0009,0003] 012++

Modified partsList by creating superparts that combine all shapes that start on the same layer.

Knowns: 7094
Unknowns: 13226
[0122,0123,0126,0127...

Got worse for some reason.

Forgot to put flats in correct layer of partsList.

Knowns: 16008
Unknowns: 4312
[1642,1643,1661,16c3...

Better now.

Added rule \-/.

Knowns: 16112
Unknowns: 4208
[16d2,16e1,1792,17c1...

Deconstruct
--Rr----:Rg--RgRg:--RbRb--:Ry------
16d2
- - - -
X - - -
- X X -
X - X X
- X - -

RULES \/\
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 000d
RULE  /
>QUAD 0004
>PASS [0000,0012,0008,0000]
>DIR  ["-","/","\\","-"]
LAYER 0006
RULE  \
>PART 0048
>PASS [0212,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 0001
RULE  -
>PART 1212
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [1212,004c]

RULES /\/
LAYER 0002
RULE  /
>PASS [0000,0000,0002,0000]
>DIR  ["-","-","/","-"]
LAYER 000d
RULE  \
>QUAD 0001
>PASS [0000,0042,0008,0000]
>DIR  ["-","\\","\\","-"]
LAYER 0006
RULE  /
>PART 0242
>PART 0048
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
LAYER 0001
RULE  -
>QUAD 0001
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0242,0049,0001]

RULES \-/
LAYER 0002
RULE  \
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 000d
RULE  -
>PART 0012
>QUAD 0004
>QUAD 0008
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
LAYER 0006
RULE  /
>QUAD 0004
>PASS [0002,0000,0000,0000]
>DIR  ["\\","-","-","-"]
LAYER 0001
RULE  -
>PART 0012
>PASS [0000,0000,0000,0000]
>DIR  ["-","-","-","-"]
PARTS [0012,000c,0016]

NOT FOUND 16d2

16d2 [0042,0048,0121] 012++

Deconstruct
--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
- - - -
X - - -
X X X -
X - - X
- X - -

--Rr----:Rg----Rg:RbRbRb--:Ry------
1792
C - - -
B C D -
A - - B
- A - -


